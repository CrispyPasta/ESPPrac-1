
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087ac  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f3c  08008960  08008960  00018960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a89c  0800a89c  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a89c  0800a89c  0001a89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8a4  0800a8a4  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8a4  0800a8a4  0001a8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8a8  0800a8a8  0001a8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800a8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  200000c0  0800a96c  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  0800a96c  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f40  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000330c  00000000  00000000  0003a030  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001580  00000000  00000000  0003d340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e8  00000000  00000000  0003e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000277d0  00000000  00000000  0003fca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011f0e  00000000  00000000  00067478  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e736f  00000000  00000000  00079386  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001606f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061dc  00000000  00000000  00160770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008944 	.word	0x08008944

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	08008944 	.word	0x08008944

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b972 	b.w	8000e88 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4688      	mov	r8, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14b      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4615      	mov	r5, r2
 8000bce:	d967      	bls.n	8000ca0 <__udivmoddi4+0xe4>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b14a      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd6:	f1c2 0720 	rsb	r7, r2, #32
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	fa20 f707 	lsr.w	r7, r0, r7
 8000be2:	4095      	lsls	r5, r2
 8000be4:	ea47 0803 	orr.w	r8, r7, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf4:	fa1f fc85 	uxth.w	ip, r5
 8000bf8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bfc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c00:	fb07 f10c 	mul.w	r1, r7, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x60>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c0e:	f080 811b 	bcs.w	8000e48 <__udivmoddi4+0x28c>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 8118 	bls.w	8000e48 <__udivmoddi4+0x28c>
 8000c18:	3f02      	subs	r7, #2
 8000c1a:	442b      	add	r3, r5
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c30:	45a4      	cmp	ip, r4
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x8c>
 8000c34:	192c      	adds	r4, r5, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3a:	f080 8107 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	f240 8104 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c44:	3802      	subs	r0, #2
 8000c46:	442c      	add	r4, r5
 8000c48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c4c:	eba4 040c 	sub.w	r4, r4, ip
 8000c50:	2700      	movs	r7, #0
 8000c52:	b11e      	cbz	r6, 8000c5c <__udivmoddi4+0xa0>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0xbe>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80eb 	beq.w	8000e42 <__udivmoddi4+0x286>
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c72:	4638      	mov	r0, r7
 8000c74:	4639      	mov	r1, r7
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f783 	clz	r7, r3
 8000c7e:	2f00      	cmp	r7, #0
 8000c80:	d147      	bne.n	8000d12 <__udivmoddi4+0x156>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xd0>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80fa 	bhi.w	8000e80 <__udivmoddi4+0x2c4>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	4698      	mov	r8, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0e0      	beq.n	8000c5c <__udivmoddi4+0xa0>
 8000c9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9e:	e7dd      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xe8>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	f040 808f 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cae:	1b49      	subs	r1, r1, r5
 8000cb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb4:	fa1f f885 	uxth.w	r8, r5
 8000cb8:	2701      	movs	r7, #1
 8000cba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cd0:	18eb      	adds	r3, r5, r3
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	f200 80cd 	bhi.w	8000e78 <__udivmoddi4+0x2bc>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1a59      	subs	r1, r3, r1
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x14c>
 8000cf8:	192c      	adds	r4, r5, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x14a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80b6 	bhi.w	8000e72 <__udivmoddi4+0x2b6>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e79f      	b.n	8000c52 <__udivmoddi4+0x96>
 8000d12:	f1c7 0c20 	rsb	ip, r7, #32
 8000d16:	40bb      	lsls	r3, r7
 8000d18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d20:	fa01 f407 	lsl.w	r4, r1, r7
 8000d24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d30:	4325      	orrs	r5, r4
 8000d32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d36:	0c2c      	lsrs	r4, r5, #16
 8000d38:	fb08 3319 	mls	r3, r8, r9, r3
 8000d3c:	fa1f fa8e 	uxth.w	sl, lr
 8000d40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d44:	fb09 f40a 	mul.w	r4, r9, sl
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1e 0303 	adds.w	r3, lr, r3
 8000d58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d5c:	f080 8087 	bcs.w	8000e6e <__udivmoddi4+0x2b2>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f240 8084 	bls.w	8000e6e <__udivmoddi4+0x2b2>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4473      	add	r3, lr
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	b2ad      	uxth	r5, r5
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d80:	45a2      	cmp	sl, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1e 0404 	adds.w	r4, lr, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	d26b      	bcs.n	8000e66 <__udivmoddi4+0x2aa>
 8000d8e:	45a2      	cmp	sl, r4
 8000d90:	d969      	bls.n	8000e66 <__udivmoddi4+0x2aa>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4474      	add	r4, lr
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9e:	eba4 040a 	sub.w	r4, r4, sl
 8000da2:	454c      	cmp	r4, r9
 8000da4:	46c2      	mov	sl, r8
 8000da6:	464b      	mov	r3, r9
 8000da8:	d354      	bcc.n	8000e54 <__udivmoddi4+0x298>
 8000daa:	d051      	beq.n	8000e50 <__udivmoddi4+0x294>
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d069      	beq.n	8000e84 <__udivmoddi4+0x2c8>
 8000db0:	ebb1 050a 	subs.w	r5, r1, sl
 8000db4:	eb64 0403 	sbc.w	r4, r4, r3
 8000db8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dbc:	40fd      	lsrs	r5, r7
 8000dbe:	40fc      	lsrs	r4, r7
 8000dc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e747      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd4:	4095      	lsls	r5, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	fa21 f303 	lsr.w	r3, r1, r3
 8000dde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de2:	4338      	orrs	r0, r7
 8000de4:	0c01      	lsrs	r1, r0, #16
 8000de6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dea:	fa1f f885 	uxth.w	r8, r5
 8000dee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb07 f308 	mul.w	r3, r7, r8
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x256>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e08:	d22f      	bcs.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d92d      	bls.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0e:	3f02      	subs	r7, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	b281      	uxth	r1, r0
 8000e16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb00 f308 	mul.w	r3, r0, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x27e>
 8000e2a:	1869      	adds	r1, r5, r1
 8000e2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e30:	d217      	bcs.n	8000e62 <__udivmoddi4+0x2a6>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d915      	bls.n	8000e62 <__udivmoddi4+0x2a6>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4429      	add	r1, r5
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e40:	e73b      	b.n	8000cba <__udivmoddi4+0xfe>
 8000e42:	4637      	mov	r7, r6
 8000e44:	4630      	mov	r0, r6
 8000e46:	e709      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000e48:	4607      	mov	r7, r0
 8000e4a:	e6e7      	b.n	8000c1c <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fb      	b.n	8000c48 <__udivmoddi4+0x8c>
 8000e50:	4541      	cmp	r1, r8
 8000e52:	d2ab      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e58:	eb69 020e 	sbc.w	r2, r9, lr
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	4613      	mov	r3, r2
 8000e60:	e7a4      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e62:	4660      	mov	r0, ip
 8000e64:	e7e9      	b.n	8000e3a <__udivmoddi4+0x27e>
 8000e66:	4618      	mov	r0, r3
 8000e68:	e795      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6a:	4667      	mov	r7, ip
 8000e6c:	e7d1      	b.n	8000e12 <__udivmoddi4+0x256>
 8000e6e:	4681      	mov	r9, r0
 8000e70:	e77c      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	442c      	add	r4, r5
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0x14c>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	442b      	add	r3, r5
 8000e7e:	e72f      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e80:	4638      	mov	r0, r7
 8000e82:	e708      	b.n	8000c96 <__udivmoddi4+0xda>
 8000e84:	4637      	mov	r7, r6
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0xa0>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000e90:	f002 faf2 	bl	8003478 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8000e94:	f000 f9c0 	bl	8001218 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000e98:	f000 fbe4 	bl	8001664 <MX_GPIO_Init>
    MX_CRC_Init();
 8000e9c:	f000 fa46 	bl	800132c <MX_CRC_Init>
    MX_DMA2D_Init();
 8000ea0:	f000 fa58 	bl	8001354 <MX_DMA2D_Init>
    MX_FMC_Init();
 8000ea4:	f000 fb8e 	bl	80015c4 <MX_FMC_Init>
    //  MX_I2C3_Init();
    MX_LTDC_Init();
 8000ea8:	f000 fa86 	bl	80013b8 <MX_LTDC_Init>
    MX_SPI5_Init();
 8000eac:	f000 fb04 	bl	80014b8 <MX_SPI5_Init>
    MX_TIM1_Init();
 8000eb0:	f000 fb38 	bl	8001524 <MX_TIM1_Init>
    //  MX_USART1_UART_Init();

    initDisplay();
 8000eb4:	f000 f803 	bl	8000ebe <initDisplay>
    drawAxes();
 8000eb8:	f000 f836 	bl	8000f28 <drawAxes>

    while (1);
 8000ebc:	e7fe      	b.n	8000ebc <main+0x30>

08000ebe <initDisplay>:

/**
 * @brief Initialises, turns on and clears the display. It also sets the foreground layer to transparent and the 
 * background layer to white.
 */
void initDisplay(){
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
    BSP_LCD_Init();
 8000ec2:	f001 fc29 	bl	8002718 <BSP_LCD_Init>
    BSP_LCD_DisplayOn();
 8000ec6:	f001 ff0f 	bl	8002ce8 <BSP_LCD_DisplayOn>

    BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);   //intialize the layers using the buffer
 8000eca:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f001 fca4 	bl	800281c <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000ed4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f001 fc9f 	bl	800281c <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);  
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f001 fd00 	bl	80028e4 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_TRANSPARENT);       //make the front layer transparent
 8000ee4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000ee8:	f001 fd58 	bl	800299c <BSP_LCD_Clear>
    BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f001 fcf9 	bl	80028e4 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_WHITE);             //make the back layer white
 8000ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef6:	f001 fd51 	bl	800299c <BSP_LCD_Clear>

    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f001 fcf2 	bl	80028e4 <BSP_LCD_SelectLayer>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);      //make the background for text on the front layer white
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f001 fd16 	bl	8002934 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);      //make the text color black
 8000f08:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f0c:	f001 fcfa 	bl	8002904 <BSP_LCD_SetTextColor>

    BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f001 fce7 	bl	80028e4 <BSP_LCD_SelectLayer>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);      //make the background for text on the back layer white 
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	f001 fd0b 	bl	8002934 <BSP_LCD_SetBackColor>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	0000      	movs	r0, r0
 8000f24:	0000      	movs	r0, r0
	...

08000f28 <drawAxes>:

/**
 * @brief Draws the axes for the graph
 */
void drawAxes()
{ 
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b09a      	sub	sp, #104	; 0x68
 8000f2c:	af00      	add	r7, sp, #0
    int yAxisStart = 10;
 8000f2e:	230a      	movs	r3, #10
 8000f30:	65bb      	str	r3, [r7, #88]	; 0x58
    int yAxisLength = 201;
 8000f32:	23c9      	movs	r3, #201	; 0xc9
 8000f34:	657b      	str	r3, [r7, #84]	; 0x54
    int yAxisPos = 295;
 8000f36:	f240 1327 	movw	r3, #295	; 0x127
 8000f3a:	653b      	str	r3, [r7, #80]	; 0x50
    BSP_LCD_DrawHLine(yAxisStart, yAxisPos, yAxisLength);       //draw the y axis
 8000f3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f42:	b291      	uxth	r1, r2
 8000f44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f46:	b292      	uxth	r2, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 fe4d 	bl	8002be8 <BSP_LCD_DrawHLine>
    int xAxisStart = 210;
 8000f4e:	23d2      	movs	r3, #210	; 0xd2
 8000f50:	64fb      	str	r3, [r7, #76]	; 0x4c
    int xAxisLength = 285;
 8000f52:	f240 131d 	movw	r3, #285	; 0x11d
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
    int xAxisPos = 10;
 8000f58:	230a      	movs	r3, #10
 8000f5a:	647b      	str	r3, [r7, #68]	; 0x44
    BSP_LCD_DrawVLine(xAxisStart, xAxisPos, xAxisLength);       //draw the x axis
 8000f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f62:	b291      	uxth	r1, r2
 8000f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f66:	b292      	uxth	r2, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f001 fe7b 	bl	8002c64 <BSP_LCD_DrawVLine>

    char* ylabel = "Volt (V)";
 8000f6e:	4ba4      	ldr	r3, [pc, #656]	; (8001200 <drawAxes+0x2d8>)
 8000f70:	643b      	str	r3, [r7, #64]	; 0x40
    char* xlabel[11] = {"F", "r", "e", "q", " ", "i", "n", " ", "k", "H", "z"};
 8000f72:	4ba4      	ldr	r3, [pc, #656]	; (8001204 <drawAxes+0x2dc>)
 8000f74:	f107 0408 	add.w	r4, r7, #8
 8000f78:	461d      	mov	r5, r3
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    BSP_LCD_SetFont(&Font8);
 8000f8a:	489f      	ldr	r0, [pc, #636]	; (8001208 <drawAxes+0x2e0>)
 8000f8c:	f001 fcec 	bl	8002968 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(110, 310, ylabel, LEFT_MODE);       //Display the axis title 
 8000f90:	2303      	movs	r3, #3
 8000f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f94:	f44f 719b 	mov.w	r1, #310	; 0x136
 8000f98:	206e      	movs	r0, #110	; 0x6e
 8000f9a:	f001 fd6b 	bl	8002a74 <BSP_LCD_DisplayStringAt>

    for (int a = 0; a < 12; a++){
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	667b      	str	r3, [r7, #100]	; 0x64
 8000fa2:	e015      	b.n	8000fd0 <drawAxes+0xa8>
      BSP_LCD_DisplayStringAt(230, 15 + a * 9, xlabel[a], LEFT_MODE);
 8000fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	00d2      	lsls	r2, r2, #3
 8000fac:	4413      	add	r3, r2
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	330f      	adds	r3, #15
 8000fb2:	b299      	uxth	r1, r3
 8000fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f853 2c60 	ldr.w	r2, [r3, #-96]
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	20e6      	movs	r0, #230	; 0xe6
 8000fc6:	f001 fd55 	bl	8002a74 <BSP_LCD_DisplayStringAt>
    for (int a = 0; a < 12; a++){
 8000fca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fcc:	3301      	adds	r3, #1
 8000fce:	667b      	str	r3, [r7, #100]	; 0x64
 8000fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fd2:	2b0b      	cmp	r3, #11
 8000fd4:	dde6      	ble.n	8000fa4 <drawAxes+0x7c>
    }
    

    int interval = yAxisLength / 10;  
 8000fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fd8:	4a8c      	ldr	r2, [pc, #560]	; (800120c <drawAxes+0x2e4>)
 8000fda:	fb82 1203 	smull	r1, r2, r2, r3
 8000fde:	1092      	asrs	r2, r2, #2
 8000fe0:	17db      	asrs	r3, r3, #31
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
    float vInterval = maxVoltage / 10;
 8000fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000fea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ff2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    char caption[4];
    for (int a = 0; a < 11; a++){           //this loop makes little lines on the axis as well as the lines for the grid for the y-axis 
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	663b      	str	r3, [r7, #96]	; 0x60
 8000ffa:	e070      	b.n	80010de <drawAxes+0x1b6>
        if (a != 10){
 8000ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ffe:	2b0a      	cmp	r3, #10
 8001000:	d016      	beq.n	8001030 <drawAxes+0x108>
        BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 8001002:	4883      	ldr	r0, [pc, #524]	; (8001210 <drawAxes+0x2e8>)
 8001004:	f001 fc7e 	bl	8002904 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawVLine(yAxisStart + a * interval, xAxisPos, xAxisLength - 3);
 8001008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800100a:	b29a      	uxth	r2, r3
 800100c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800100e:	b29b      	uxth	r3, r3
 8001010:	fb12 f303 	smulbb	r3, r2, r3
 8001014:	b29a      	uxth	r2, r3
 8001016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001018:	b29b      	uxth	r3, r3
 800101a:	4413      	add	r3, r2
 800101c:	b298      	uxth	r0, r3
 800101e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001020:	b299      	uxth	r1, r3
 8001022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001024:	b29b      	uxth	r3, r3
 8001026:	3b03      	subs	r3, #3
 8001028:	b29b      	uxth	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	f001 fe1a 	bl	8002c64 <BSP_LCD_DrawVLine>
        }

        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001030:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001034:	f001 fc66 	bl	8002904 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawVLine(yAxisStart + a * interval, yAxisPos - 3, 7);
 8001038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800103a:	b29a      	uxth	r2, r3
 800103c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800103e:	b29b      	uxth	r3, r3
 8001040:	fb12 f303 	smulbb	r3, r2, r3
 8001044:	b29a      	uxth	r2, r3
 8001046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001048:	b29b      	uxth	r3, r3
 800104a:	4413      	add	r3, r2
 800104c:	b298      	uxth	r0, r3
 800104e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001050:	b29b      	uxth	r3, r3
 8001052:	3b03      	subs	r3, #3
 8001054:	b29b      	uxth	r3, r3
 8001056:	2207      	movs	r2, #7
 8001058:	4619      	mov	r1, r3
 800105a:	f001 fe03 	bl	8002c64 <BSP_LCD_DrawVLine>

        gcvt(maxVoltage - vInterval * a, 2, caption);
 800105e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001074:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001078:	ee17 0a90 	vmov	r0, s15
 800107c:	f7ff fa1c 	bl	80004b8 <__aeabi_f2d>
 8001080:	4604      	mov	r4, r0
 8001082:	460d      	mov	r5, r1
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4619      	mov	r1, r3
 8001088:	2002      	movs	r0, #2
 800108a:	ec45 4b10 	vmov	d0, r4, r5
 800108e:	f006 f8e7 	bl	8007260 <gcvt>
        if (a == 0){
 8001092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001094:	2b00      	cmp	r3, #0
 8001096:	d107      	bne.n	80010a8 <drawAxes+0x180>
          caption[0] = '1';
 8001098:	2331      	movs	r3, #49	; 0x31
 800109a:	713b      	strb	r3, [r7, #4]
          caption[1] = '.';
 800109c:	232e      	movs	r3, #46	; 0x2e
 800109e:	717b      	strb	r3, [r7, #5]
          caption[2] = '0';
 80010a0:	2330      	movs	r3, #48	; 0x30
 80010a2:	71bb      	strb	r3, [r7, #6]
          caption[3] = '\0';
 80010a4:	2300      	movs	r3, #0
 80010a6:	71fb      	strb	r3, [r7, #7]
        }
        BSP_LCD_DisplayStringAt(yAxisStart + a * interval - 4, yAxisPos + 2, caption, LEFT_MODE);   //display intervals next to the axis
 80010a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	fb12 f303 	smulbb	r3, r2, r3
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	4413      	add	r3, r2
 80010bc:	b29b      	uxth	r3, r3
 80010be:	3b04      	subs	r3, #4
 80010c0:	b298      	uxth	r0, r3
 80010c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	3302      	adds	r3, #2
 80010c8:	b299      	uxth	r1, r3
 80010ca:	1d3a      	adds	r2, r7, #4
 80010cc:	2303      	movs	r3, #3
 80010ce:	f001 fcd1 	bl	8002a74 <BSP_LCD_DisplayStringAt>
        HAL_Delay(30);          //the delay makes it look cool
 80010d2:	201e      	movs	r0, #30
 80010d4:	f002 fa12 	bl	80034fc <HAL_Delay>
    for (int a = 0; a < 11; a++){           //this loop makes little lines on the axis as well as the lines for the grid for the y-axis 
 80010d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010da:	3301      	adds	r3, #1
 80010dc:	663b      	str	r3, [r7, #96]	; 0x60
 80010de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010e0:	2b0a      	cmp	r3, #10
 80010e2:	dd8b      	ble.n	8000ffc <drawAxes+0xd4>
    }

    interval = xAxisLength / 15;
 80010e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e6:	4a4b      	ldr	r2, [pc, #300]	; (8001214 <drawAxes+0x2ec>)
 80010e8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ec:	441a      	add	r2, r3
 80010ee:	10d2      	asrs	r2, r2, #3
 80010f0:	17db      	asrs	r3, r3, #31
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    float fInterval = (maxFreq - minFreq) / 15000.0;
 80010f6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80010fa:	230a      	movs	r3, #10
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f9c8 	bl	8000494 <__aeabi_i2d>
 8001104:	a33c      	add	r3, pc, #240	; (adr r3, 80011f8 <drawAxes+0x2d0>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f7ff fb57 	bl	80007bc <__aeabi_ddiv>
 800110e:	4603      	mov	r3, r0
 8001110:	460c      	mov	r4, r1
 8001112:	4618      	mov	r0, r3
 8001114:	4621      	mov	r1, r4
 8001116:	f7ff fce9 	bl	8000aec <__aeabi_d2f>
 800111a:	4603      	mov	r3, r0
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
    for (int a = 0; a < 16; a++){           //this loop does the same as the previous loop, but for the x-axis
 800111e:	2300      	movs	r3, #0
 8001120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001122:	e061      	b.n	80011e8 <drawAxes+0x2c0>
        if (a != 0){
 8001124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001126:	2b00      	cmp	r3, #0
 8001128:	d016      	beq.n	8001158 <drawAxes+0x230>
        BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800112a:	4839      	ldr	r0, [pc, #228]	; (8001210 <drawAxes+0x2e8>)
 800112c:	f001 fbea 	bl	8002904 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawHLine(yAxisStart, yAxisPos - a * interval, yAxisLength - 3);
 8001130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001132:	b298      	uxth	r0, r3
 8001134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001136:	b29a      	uxth	r2, r3
 8001138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800113a:	b299      	uxth	r1, r3
 800113c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800113e:	b29b      	uxth	r3, r3
 8001140:	fb11 f303 	smulbb	r3, r1, r3
 8001144:	b29b      	uxth	r3, r3
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	b299      	uxth	r1, r3
 800114a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800114c:	b29b      	uxth	r3, r3
 800114e:	3b03      	subs	r3, #3
 8001150:	b29b      	uxth	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	f001 fd48 	bl	8002be8 <BSP_LCD_DrawHLine>
        }
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001158:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800115c:	f001 fbd2 	bl	8002904 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawHLine(xAxisStart - 3, yAxisPos - a * interval, 7);
 8001160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001162:	b29b      	uxth	r3, r3
 8001164:	3b03      	subs	r3, #3
 8001166:	b298      	uxth	r0, r3
 8001168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800116a:	b29a      	uxth	r2, r3
 800116c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800116e:	b299      	uxth	r1, r3
 8001170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001172:	b29b      	uxth	r3, r3
 8001174:	fb11 f303 	smulbb	r3, r1, r3
 8001178:	b29b      	uxth	r3, r3
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	b29b      	uxth	r3, r3
 800117e:	2207      	movs	r2, #7
 8001180:	4619      	mov	r1, r3
 8001182:	f001 fd31 	bl	8002be8 <BSP_LCD_DrawHLine>

        gcvt(fInterval * a, 2, caption);
 8001186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001190:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001198:	ee17 0a90 	vmov	r0, s15
 800119c:	f7ff f98c 	bl	80004b8 <__aeabi_f2d>
 80011a0:	4604      	mov	r4, r0
 80011a2:	460d      	mov	r5, r1
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	2002      	movs	r0, #2
 80011aa:	ec45 4b10 	vmov	d0, r4, r5
 80011ae:	f006 f857 	bl	8007260 <gcvt>
        BSP_LCD_DisplayStringAt(xAxisStart + 4, yAxisPos - a * interval - 2, caption, LEFT_MODE); //Display intervals next to the axis
 80011b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	3304      	adds	r3, #4
 80011b8:	b298      	uxth	r0, r3
 80011ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011bc:	b29a      	uxth	r2, r3
 80011be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011c0:	b299      	uxth	r1, r3
 80011c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	fb11 f303 	smulbb	r3, r1, r3
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	3b02      	subs	r3, #2
 80011d2:	b299      	uxth	r1, r3
 80011d4:	1d3a      	adds	r2, r7, #4
 80011d6:	2303      	movs	r3, #3
 80011d8:	f001 fc4c 	bl	8002a74 <BSP_LCD_DisplayStringAt>
        HAL_Delay(30);
 80011dc:	201e      	movs	r0, #30
 80011de:	f002 f98d 	bl	80034fc <HAL_Delay>
    for (int a = 0; a < 16; a++){           //this loop does the same as the previous loop, but for the x-axis
 80011e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011e4:	3301      	adds	r3, #1
 80011e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	dd9a      	ble.n	8001124 <drawAxes+0x1fc>
    }

}
 80011ee:	bf00      	nop
 80011f0:	3768      	adds	r7, #104	; 0x68
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bdb0      	pop	{r4, r5, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40cd4c00 	.word	0x40cd4c00
 8001200:	08008960 	.word	0x08008960
 8001204:	08008994 	.word	0x08008994
 8001208:	20000048 	.word	0x20000048
 800120c:	66666667 	.word	0x66666667
 8001210:	ffd3d3d3 	.word	0xffd3d3d3
 8001214:	88888889 	.word	0x88888889

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0a0      	sub	sp, #128	; 0x80
 800121c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001222:	2230      	movs	r2, #48	; 0x30
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f006 f870 	bl	800730c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2230      	movs	r2, #48	; 0x30
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f006 f861 	bl	800730c <memset>

    /** Configure the main internal regulator output voltage 
  */
    __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b35      	ldr	r3, [pc, #212]	; (8001324 <SystemClock_Config+0x10c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a34      	ldr	r2, [pc, #208]	; (8001324 <SystemClock_Config+0x10c>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b32      	ldr	r3, [pc, #200]	; (8001324 <SystemClock_Config+0x10c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <SystemClock_Config+0x110>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2e      	ldr	r2, [pc, #184]	; (8001328 <SystemClock_Config+0x110>)
 8001270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <SystemClock_Config+0x110>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
    /** Initializes the CPU, AHB and APB busses clocks 
  */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001282:	2301      	movs	r3, #1
 8001284:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128a:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128c:	2302      	movs	r3, #2
 800128e:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001290:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001294:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8001296:	2304      	movs	r3, #4
 8001298:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_OscInitStruct.PLL.PLLN = 180;
 800129a:	23b4      	movs	r3, #180	; 0xb4
 800129c:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129e:	2302      	movs	r3, #2
 80012a0:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.PLL.PLLQ = 3;
 80012a2:	2303      	movs	r3, #3
 80012a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 fe4e 	bl	8004f4c <HAL_RCC_OscConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xa2>
    {
        Error_Handler();
 80012b6:	f000 fb15 	bl	80018e4 <Error_Handler>
    }
    /** Activate the Over-Drive mode 
  */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012ba:	f003 fdf7 	bl	8004eac <HAL_PWREx_EnableOverDrive>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0xb0>
    {
        Error_Handler();
 80012c4:	f000 fb0e 	bl	80018e4 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks 
  */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012c8:	230f      	movs	r3, #15
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012cc:	2302      	movs	r3, #2
 80012ce:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d8:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80012da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012de:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012e4:	2105      	movs	r1, #5
 80012e6:	4618      	mov	r0, r3
 80012e8:	f004 f8a0 	bl	800542c <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xde>
    {
        Error_Handler();
 80012f2:	f000 faf7 	bl	80018e4 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012f6:	2308      	movs	r3, #8
 80012f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80012fa:	2332      	movs	r3, #50	; 0x32
 80012fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80012fe:	2302      	movs	r3, #2
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	4618      	mov	r0, r3
 800130c:	f004 fa9e 	bl	800584c <HAL_RCCEx_PeriphCLKConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x102>
    {
        Error_Handler();
 8001316:	f000 fae5 	bl	80018e4 <Error_Handler>
    }
}
 800131a:	bf00      	nop
 800131c:	3780      	adds	r7, #128	; 0x80
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
    /* USER CODE END CRC_Init 0 */

    /* USER CODE BEGIN CRC_Init 1 */

    /* USER CODE END CRC_Init 1 */
    hcrc.Instance = CRC;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_CRC_Init+0x20>)
 8001332:	4a07      	ldr	r2, [pc, #28]	; (8001350 <MX_CRC_Init+0x24>)
 8001334:	601a      	str	r2, [r3, #0]
    if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_CRC_Init+0x20>)
 8001338:	f002 f9e4 	bl	8003704 <HAL_CRC_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_CRC_Init+0x1a>
    {
        Error_Handler();
 8001342:	f000 facf 	bl	80018e4 <Error_Handler>
    }
    /* USER CODE BEGIN CRC_Init 2 */

    /* USER CODE END CRC_Init 2 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000340 	.word	0x20000340
 8001350:	40023000 	.word	0x40023000

08001354 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
    /* USER CODE END DMA2D_Init 0 */

    /* USER CODE BEGIN DMA2D_Init 1 */

    /* USER CODE END DMA2D_Init 1 */
    hdma2d.Instance = DMA2D;
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_DMA2D_Init+0x5c>)
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <MX_DMA2D_Init+0x60>)
 800135c:	601a      	str	r2, [r3, #0]
    hdma2d.Init.Mode = DMA2D_M2M;
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_DMA2D_Init+0x5c>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
    hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_DMA2D_Init+0x5c>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
    hdma2d.Init.OutputOffset = 0;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_DMA2D_Init+0x5c>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
    hdma2d.LayerCfg[1].InputOffset = 0;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_DMA2D_Init+0x5c>)
 8001372:	2200      	movs	r2, #0
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
    hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_DMA2D_Init+0x5c>)
 8001378:	2200      	movs	r2, #0
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_DMA2D_Init+0x5c>)
 800137e:	2200      	movs	r2, #0
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
    hdma2d.LayerCfg[1].InputAlpha = 0;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_DMA2D_Init+0x5c>)
 8001384:	2200      	movs	r2, #0
 8001386:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001388:	4809      	ldr	r0, [pc, #36]	; (80013b0 <MX_DMA2D_Init+0x5c>)
 800138a:	f002 fb93 	bl	8003ab4 <HAL_DMA2D_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_DMA2D_Init+0x44>
    {
        Error_Handler();
 8001394:	f000 faa6 	bl	80018e4 <Error_Handler>
    }
    if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001398:	2101      	movs	r1, #1
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_DMA2D_Init+0x5c>)
 800139c:	f002 fdf8 	bl	8003f90 <HAL_DMA2D_ConfigLayer>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_DMA2D_Init+0x56>
    {
        Error_Handler();
 80013a6:	f000 fa9d 	bl	80018e4 <Error_Handler>
    }
    /* USER CODE BEGIN DMA2D_Init 2 */

    /* USER CODE END DMA2D_Init 2 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000470 	.word	0x20000470
 80013b4:	4002b000 	.word	0x4002b000

080013b8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN LTDC_Init 0 */

    /* USER CODE END LTDC_Init 0 */

    LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2234      	movs	r2, #52	; 0x34
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f005 ffa1 	bl	800730c <memset>

    /* USER CODE BEGIN LTDC_Init 1 */

    /* USER CODE END LTDC_Init 1 */
    hltdc.Instance = LTDC;
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <MX_LTDC_Init+0xf8>)
 80013cc:	4a39      	ldr	r2, [pc, #228]	; (80014b4 <MX_LTDC_Init+0xfc>)
 80013ce:	601a      	str	r2, [r3, #0]
    hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013d0:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <MX_LTDC_Init+0xf8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
    hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <MX_LTDC_Init+0xf8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
    hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013dc:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <MX_LTDC_Init+0xf8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
    hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <MX_LTDC_Init+0xf8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
    hltdc.Init.HorizontalSync = 9;
 80013e8:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <MX_LTDC_Init+0xf8>)
 80013ea:	2209      	movs	r2, #9
 80013ec:	615a      	str	r2, [r3, #20]
    hltdc.Init.VerticalSync = 1;
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <MX_LTDC_Init+0xf8>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	619a      	str	r2, [r3, #24]
    hltdc.Init.AccumulatedHBP = 29;
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <MX_LTDC_Init+0xf8>)
 80013f6:	221d      	movs	r2, #29
 80013f8:	61da      	str	r2, [r3, #28]
    hltdc.Init.AccumulatedVBP = 3;
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <MX_LTDC_Init+0xf8>)
 80013fc:	2203      	movs	r2, #3
 80013fe:	621a      	str	r2, [r3, #32]
    hltdc.Init.AccumulatedActiveW = 269;
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <MX_LTDC_Init+0xf8>)
 8001402:	f240 120d 	movw	r2, #269	; 0x10d
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
    hltdc.Init.AccumulatedActiveH = 323;
 8001408:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <MX_LTDC_Init+0xf8>)
 800140a:	f240 1243 	movw	r2, #323	; 0x143
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
    hltdc.Init.TotalWidth = 279;
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <MX_LTDC_Init+0xf8>)
 8001412:	f240 1217 	movw	r2, #279	; 0x117
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
    hltdc.Init.TotalHeigh = 327;
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <MX_LTDC_Init+0xf8>)
 800141a:	f240 1247 	movw	r2, #327	; 0x147
 800141e:	631a      	str	r2, [r3, #48]	; 0x30
    hltdc.Init.Backcolor.Blue = 0;
 8001420:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <MX_LTDC_Init+0xf8>)
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hltdc.Init.Backcolor.Green = 0;
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <MX_LTDC_Init+0xf8>)
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hltdc.Init.Backcolor.Red = 0;
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <MX_LTDC_Init+0xf8>)
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001438:	481d      	ldr	r0, [pc, #116]	; (80014b0 <MX_LTDC_Init+0xf8>)
 800143a:	f003 f9a5 	bl	8004788 <HAL_LTDC_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_LTDC_Init+0x90>
    {
        Error_Handler();
 8001444:	f000 fa4e 	bl	80018e4 <Error_Handler>
    }
    pLayerCfg.WindowX0 = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
    pLayerCfg.WindowX1 = 240;
 800144c:	23f0      	movs	r3, #240	; 0xf0
 800144e:	60bb      	str	r3, [r7, #8]
    pLayerCfg.WindowY0 = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
    pLayerCfg.WindowY1 = 320;
 8001454:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001458:	613b      	str	r3, [r7, #16]
    pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800145a:	2302      	movs	r3, #2
 800145c:	617b      	str	r3, [r7, #20]
    pLayerCfg.Alpha = 255;
 800145e:	23ff      	movs	r3, #255	; 0xff
 8001460:	61bb      	str	r3, [r7, #24]
    pLayerCfg.Alpha0 = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001466:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800146a:	623b      	str	r3, [r7, #32]
    pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800146c:	2307      	movs	r3, #7
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    pLayerCfg.FBStartAdress = 0xD0000000;
 8001470:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
    pLayerCfg.ImageWidth = 240;
 8001476:	23f0      	movs	r3, #240	; 0xf0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
    pLayerCfg.ImageHeight = 320;
 800147a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
    pLayerCfg.Backcolor.Blue = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    pLayerCfg.Backcolor.Green = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    pLayerCfg.Backcolor.Red = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_LTDC_Init+0xf8>)
 800149a:	f003 fb07 	bl	8004aac <HAL_LTDC_ConfigLayer>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_LTDC_Init+0xf0>
    {
        Error_Handler();
 80014a4:	f000 fa1e 	bl	80018e4 <Error_Handler>
    }
    /* USER CODE BEGIN LTDC_Init 2 */

    /* USER CODE END LTDC_Init 2 */
}
 80014a8:	bf00      	nop
 80014aa:	3738      	adds	r7, #56	; 0x38
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000348 	.word	0x20000348
 80014b4:	40016800 	.word	0x40016800

080014b8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI5_Init 1 */

    /* USER CODE END SPI5_Init 1 */
    /* SPI5 parameter configuration*/
    hspi5.Instance = SPI5;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_SPI5_Init+0x64>)
 80014be:	4a18      	ldr	r2, [pc, #96]	; (8001520 <MX_SPI5_Init+0x68>)
 80014c0:	601a      	str	r2, [r3, #0]
    hspi5.Init.Mode = SPI_MODE_MASTER;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_SPI5_Init+0x64>)
 80014c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c8:	605a      	str	r2, [r3, #4]
    hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_SPI5_Init+0x64>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
    hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_SPI5_Init+0x64>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
    hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_SPI5_Init+0x64>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
    hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_SPI5_Init+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
    hspi5.Init.NSS = SPI_NSS_SOFT;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_SPI5_Init+0x64>)
 80014e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e8:	619a      	str	r2, [r3, #24]
    hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_SPI5_Init+0x64>)
 80014ec:	2218      	movs	r2, #24
 80014ee:	61da      	str	r2, [r3, #28]
    hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MX_SPI5_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	621a      	str	r2, [r3, #32]
    hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_SPI5_Init+0x64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
    hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <MX_SPI5_Init+0x64>)
 80014fe:	2200      	movs	r2, #0
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
    hspi5.Init.CRCPolynomial = 10;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_SPI5_Init+0x64>)
 8001504:	220a      	movs	r2, #10
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_SPI5_Init+0x64>)
 800150a:	f004 fbdc 	bl	8005cc6 <HAL_SPI_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_SPI5_Init+0x60>
    {
        Error_Handler();
 8001514:	f000 f9e6 	bl	80018e4 <Error_Handler>
    }
    /* USER CODE BEGIN SPI5_Init 2 */

    /* USER CODE END SPI5_Init 2 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200002e8 	.word	0x200002e8
 8001520:	40015000 	.word	0x40015000

08001524 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <MX_TIM1_Init+0x98>)
 8001542:	4a1f      	ldr	r2, [pc, #124]	; (80015c0 <MX_TIM1_Init+0x9c>)
 8001544:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <MX_TIM1_Init+0x98>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_TIM1_Init+0x98>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 0;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_TIM1_Init+0x98>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_TIM1_Init+0x98>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <MX_TIM1_Init+0x98>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_TIM1_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800156a:	4814      	ldr	r0, [pc, #80]	; (80015bc <MX_TIM1_Init+0x98>)
 800156c:	f005 f936 	bl	80067dc <HAL_TIM_Base_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0x56>
    {
        Error_Handler();
 8001576:	f000 f9b5 	bl	80018e4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157e:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4619      	mov	r1, r3
 8001586:	480d      	ldr	r0, [pc, #52]	; (80015bc <MX_TIM1_Init+0x98>)
 8001588:	f005 fa7f 	bl	8006a8a <HAL_TIM_ConfigClockSource>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0x72>
    {
        Error_Handler();
 8001592:	f000 f9a7 	bl	80018e4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800159e:	463b      	mov	r3, r7
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <MX_TIM1_Init+0x98>)
 80015a4:	f005 fc8a 	bl	8006ebc <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0x8e>
    {
        Error_Handler();
 80015ae:	f000 f999 	bl	80018e4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000430 	.word	0x20000430
 80015c0:	40010000 	.word	0x40010000

080015c4 <MX_FMC_Init>:
    /* USER CODE END USART1_Init 2 */
}

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN FMC_Init 0 */

    /* USER CODE END FMC_Init 0 */

    FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	619a      	str	r2, [r3, #24]

    /* USER CODE END FMC_Init 1 */

    /** Perform the SDRAM1 memory initialization sequence
  */
    hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_FMC_Init+0x98>)
 80015de:	4a20      	ldr	r2, [pc, #128]	; (8001660 <MX_FMC_Init+0x9c>)
 80015e0:	601a      	str	r2, [r3, #0]
    /* hsdram1.Init */
    hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_FMC_Init+0x98>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	605a      	str	r2, [r3, #4]
    hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_FMC_Init+0x98>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
    hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <MX_FMC_Init+0x98>)
 80015f0:	2204      	movs	r2, #4
 80015f2:	60da      	str	r2, [r3, #12]
    hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <MX_FMC_Init+0x98>)
 80015f6:	2210      	movs	r2, #16
 80015f8:	611a      	str	r2, [r3, #16]
    hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_FMC_Init+0x98>)
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	615a      	str	r2, [r3, #20]
    hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_FMC_Init+0x98>)
 8001602:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001606:	619a      	str	r2, [r3, #24]
    hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_FMC_Init+0x98>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
    hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <MX_FMC_Init+0x98>)
 8001610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001614:	621a      	str	r2, [r3, #32]
    hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_FMC_Init+0x98>)
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
    hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_FMC_Init+0x98>)
 800161e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
    /* SdramTiming */
    SdramTiming.LoadToActiveDelay = 2;
 8001624:	2302      	movs	r3, #2
 8001626:	607b      	str	r3, [r7, #4]
    SdramTiming.ExitSelfRefreshDelay = 7;
 8001628:	2307      	movs	r3, #7
 800162a:	60bb      	str	r3, [r7, #8]
    SdramTiming.SelfRefreshTime = 4;
 800162c:	2304      	movs	r3, #4
 800162e:	60fb      	str	r3, [r7, #12]
    SdramTiming.RowCycleDelay = 7;
 8001630:	2307      	movs	r3, #7
 8001632:	613b      	str	r3, [r7, #16]
    SdramTiming.WriteRecoveryTime = 3;
 8001634:	2303      	movs	r3, #3
 8001636:	617b      	str	r3, [r7, #20]
    SdramTiming.RPDelay = 2;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
    SdramTiming.RCDDelay = 2;
 800163c:	2302      	movs	r3, #2
 800163e:	61fb      	str	r3, [r7, #28]

    if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_FMC_Init+0x98>)
 8001646:	f004 fabf 	bl	8005bc8 <HAL_SDRAM_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_FMC_Init+0x90>
    {
        Error_Handler();
 8001650:	f000 f948 	bl	80018e4 <Error_Handler>
    }

    /* USER CODE BEGIN FMC_Init 2 */

    /* USER CODE END FMC_Init 2 */
}
 8001654:	bf00      	nop
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200004b0 	.word	0x200004b0
 8001660:	a0000140 	.word	0xa0000140

08001664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08e      	sub	sp, #56	; 0x38
 8001668:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
 800167e:	4b89      	ldr	r3, [pc, #548]	; (80018a4 <MX_GPIO_Init+0x240>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a88      	ldr	r2, [pc, #544]	; (80018a4 <MX_GPIO_Init+0x240>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b86      	ldr	r3, [pc, #536]	; (80018a4 <MX_GPIO_Init+0x240>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	623b      	str	r3, [r7, #32]
 8001694:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	4b82      	ldr	r3, [pc, #520]	; (80018a4 <MX_GPIO_Init+0x240>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a81      	ldr	r2, [pc, #516]	; (80018a4 <MX_GPIO_Init+0x240>)
 80016a0:	f043 0320 	orr.w	r3, r3, #32
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b7f      	ldr	r3, [pc, #508]	; (80018a4 <MX_GPIO_Init+0x240>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <MX_GPIO_Init+0x240>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a7a      	ldr	r2, [pc, #488]	; (80018a4 <MX_GPIO_Init+0x240>)
 80016bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b78      	ldr	r3, [pc, #480]	; (80018a4 <MX_GPIO_Init+0x240>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	4b74      	ldr	r3, [pc, #464]	; (80018a4 <MX_GPIO_Init+0x240>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a73      	ldr	r2, [pc, #460]	; (80018a4 <MX_GPIO_Init+0x240>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b71      	ldr	r3, [pc, #452]	; (80018a4 <MX_GPIO_Init+0x240>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b6d      	ldr	r3, [pc, #436]	; (80018a4 <MX_GPIO_Init+0x240>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a6c      	ldr	r2, [pc, #432]	; (80018a4 <MX_GPIO_Init+0x240>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b6a      	ldr	r3, [pc, #424]	; (80018a4 <MX_GPIO_Init+0x240>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <MX_GPIO_Init+0x240>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a65      	ldr	r2, [pc, #404]	; (80018a4 <MX_GPIO_Init+0x240>)
 8001710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <MX_GPIO_Init+0x240>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <MX_GPIO_Init+0x240>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a5e      	ldr	r2, [pc, #376]	; (80018a4 <MX_GPIO_Init+0x240>)
 800172c:	f043 0310 	orr.w	r3, r3, #16
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b5c      	ldr	r3, [pc, #368]	; (80018a4 <MX_GPIO_Init+0x240>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <MX_GPIO_Init+0x240>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a57      	ldr	r2, [pc, #348]	; (80018a4 <MX_GPIO_Init+0x240>)
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <MX_GPIO_Init+0x240>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2116      	movs	r1, #22
 800175e:	4852      	ldr	r0, [pc, #328]	; (80018a8 <MX_GPIO_Init+0x244>)
 8001760:	f002 fff8 	bl	8004754 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	2180      	movs	r1, #128	; 0x80
 8001768:	4850      	ldr	r0, [pc, #320]	; (80018ac <MX_GPIO_Init+0x248>)
 800176a:	f002 fff3 	bl	8004754 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, RDX_Pin | WRX_DCX_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001774:	484e      	ldr	r0, [pc, #312]	; (80018b0 <MX_GPIO_Init+0x24c>)
 8001776:	f002 ffed 	bl	8004754 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOG, LD3_Pin | LD4_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001780:	484c      	ldr	r0, [pc, #304]	; (80018b4 <MX_GPIO_Init+0x250>)
 8001782:	f002 ffe7 	bl	8004754 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
    GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 8001786:	2316      	movs	r3, #22
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	4842      	ldr	r0, [pc, #264]	; (80018a8 <MX_GPIO_Init+0x244>)
 800179e:	f002 fd25 	bl	80041ec <HAL_GPIO_Init>

    /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
    GPIO_InitStruct.Pin = B1_Pin | MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 80017a2:	f248 0307 	movw	r3, #32775	; 0x8007
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017a8:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <MX_GPIO_Init+0x254>)
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	483d      	ldr	r0, [pc, #244]	; (80018ac <MX_GPIO_Init+0x248>)
 80017b8:	f002 fd18 	bl	80041ec <HAL_GPIO_Init>

    /*Configure GPIO pin : ACP_RST_Pin */
    GPIO_InitStruct.Pin = ACP_RST_Pin;
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d0:	4619      	mov	r1, r3
 80017d2:	4836      	ldr	r0, [pc, #216]	; (80018ac <MX_GPIO_Init+0x248>)
 80017d4:	f002 fd0a 	bl	80041ec <HAL_GPIO_Init>

    /*Configure GPIO pin : OTG_FS_OC_Pin */
    GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80017d8:	2320      	movs	r3, #32
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017dc:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <MX_GPIO_Init+0x254>)
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	482f      	ldr	r0, [pc, #188]	; (80018a8 <MX_GPIO_Init+0x244>)
 80017ec:	f002 fcfe 	bl	80041ec <HAL_GPIO_Init>

    /*Configure GPIO pin : BOOT1_Pin */
    GPIO_InitStruct.Pin = BOOT1_Pin;
 80017f0:	2304      	movs	r3, #4
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001800:	4619      	mov	r1, r3
 8001802:	482e      	ldr	r0, [pc, #184]	; (80018bc <MX_GPIO_Init+0x258>)
 8001804:	f002 fcf2 	bl	80041ec <HAL_GPIO_Init>

    /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin | OTG_HS_DM_Pin | OTG_HS_DP_Pin;
 8001808:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800181a:	230c      	movs	r3, #12
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	4619      	mov	r1, r3
 8001824:	4825      	ldr	r0, [pc, #148]	; (80018bc <MX_GPIO_Init+0x258>)
 8001826:	f002 fce1 	bl	80041ec <HAL_GPIO_Init>

    /*Configure GPIO pin : VBUS_HS_Pin */
    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800182a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001830:	2300      	movs	r3, #0
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183c:	4619      	mov	r1, r3
 800183e:	481f      	ldr	r0, [pc, #124]	; (80018bc <MX_GPIO_Init+0x258>)
 8001840:	f002 fcd4 	bl	80041ec <HAL_GPIO_Init>

    /*Configure GPIO pin : TE_Pin */
    GPIO_InitStruct.Pin = TE_Pin;
 8001844:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184a:	2300      	movs	r3, #0
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	4815      	ldr	r0, [pc, #84]	; (80018b0 <MX_GPIO_Init+0x24c>)
 800185a:	f002 fcc7 	bl	80041ec <HAL_GPIO_Init>

    /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
    GPIO_InitStruct.Pin = RDX_Pin | WRX_DCX_Pin;
 800185e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	480e      	ldr	r0, [pc, #56]	; (80018b0 <MX_GPIO_Init+0x24c>)
 8001878:	f002 fcb8 	bl	80041ec <HAL_GPIO_Init>

    /*Configure GPIO pins : LD3_Pin LD4_Pin */
    GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin;
 800187c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <MX_GPIO_Init+0x250>)
 8001896:	f002 fca9 	bl	80041ec <HAL_GPIO_Init>
}
 800189a:	bf00      	nop
 800189c:	3738      	adds	r7, #56	; 0x38
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021800 	.word	0x40021800
 80018b8:	10120000 	.word	0x10120000
 80018bc:	40020400 	.word	0x40020400

080018c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM6)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 80018d2:	f001 fdf3 	bl	80034bc <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40001000 	.word	0x40001000

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_MspInit+0x4c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_MspInit+0x4c>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_MspInit+0x4c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_MspInit+0x4c>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_MspInit+0x4c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800

08001944 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_CRC_MspInit+0x3c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10d      	bne.n	8001972 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_CRC_MspInit+0x40>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <HAL_CRC_MspInit+0x40>)
 8001960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <HAL_CRC_MspInit+0x40>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023000 	.word	0x40023000
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_DMA2D_MspInit+0x48>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d115      	bne.n	80019c6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_DMA2D_MspInit+0x4c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <HAL_DMA2D_MspInit+0x4c>)
 80019a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_DMA2D_MspInit+0x4c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2105      	movs	r1, #5
 80019ba:	205a      	movs	r0, #90	; 0x5a
 80019bc:	f001 fe78 	bl	80036b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80019c0:	205a      	movs	r0, #90	; 0x5a
 80019c2:	f001 fe91 	bl	80036e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	4002b000 	.word	0x4002b000
 80019d4:	40023800 	.word	0x40023800

080019d8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a7b      	ldr	r2, [pc, #492]	; (8001be4 <HAL_LTDC_MspInit+0x20c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	f040 80f0 	bne.w	8001bdc <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
 8001a00:	4b79      	ldr	r3, [pc, #484]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	4a78      	ldr	r2, [pc, #480]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0c:	4b76      	ldr	r3, [pc, #472]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a14:	623b      	str	r3, [r7, #32]
 8001a16:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	4a71      	ldr	r2, [pc, #452]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a22:	f043 0320 	orr.w	r3, r3, #32
 8001a26:	6313      	str	r3, [r2, #48]	; 0x30
 8001a28:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	4b6b      	ldr	r3, [pc, #428]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	4a6a      	ldr	r2, [pc, #424]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6313      	str	r3, [r2, #48]	; 0x30
 8001a44:	4b68      	ldr	r3, [pc, #416]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	4b64      	ldr	r3, [pc, #400]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4a63      	ldr	r2, [pc, #396]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a60:	4b61      	ldr	r3, [pc, #388]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4a5c      	ldr	r2, [pc, #368]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7c:	4b5a      	ldr	r3, [pc, #360]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	4a55      	ldr	r2, [pc, #340]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	6313      	str	r3, [r2, #48]	; 0x30
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	4b4f      	ldr	r3, [pc, #316]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	4a4e      	ldr	r2, [pc, #312]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001aae:	f043 0308 	orr.w	r3, r3, #8
 8001ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab4:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <HAL_LTDC_MspInit+0x210>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ad2:	230e      	movs	r3, #14
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ada:	4619      	mov	r1, r3
 8001adc:	4843      	ldr	r0, [pc, #268]	; (8001bec <HAL_LTDC_MspInit+0x214>)
 8001ade:	f002 fb85 	bl	80041ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8001ae2:	f641 0358 	movw	r3, #6232	; 0x1858
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001af4:	230e      	movs	r3, #14
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afc:	4619      	mov	r1, r3
 8001afe:	483c      	ldr	r0, [pc, #240]	; (8001bf0 <HAL_LTDC_MspInit+0x218>)
 8001b00:	f002 fb74 	bl	80041ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001b04:	2303      	movs	r3, #3
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b14:	2309      	movs	r3, #9
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4835      	ldr	r0, [pc, #212]	; (8001bf4 <HAL_LTDC_MspInit+0x21c>)
 8001b20:	f002 fb64 	bl	80041ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001b24:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b36:	230e      	movs	r3, #14
 8001b38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3e:	4619      	mov	r1, r3
 8001b40:	482c      	ldr	r0, [pc, #176]	; (8001bf4 <HAL_LTDC_MspInit+0x21c>)
 8001b42:	f002 fb53 	bl	80041ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001b46:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b58:	230e      	movs	r3, #14
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	4619      	mov	r1, r3
 8001b62:	4825      	ldr	r0, [pc, #148]	; (8001bf8 <HAL_LTDC_MspInit+0x220>)
 8001b64:	f002 fb42 	bl	80041ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001b68:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b7a:	230e      	movs	r3, #14
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b82:	4619      	mov	r1, r3
 8001b84:	481d      	ldr	r0, [pc, #116]	; (8001bfc <HAL_LTDC_MspInit+0x224>)
 8001b86:	f002 fb31 	bl	80041ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001b8a:	2348      	movs	r3, #72	; 0x48
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b9a:	230e      	movs	r3, #14
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4816      	ldr	r0, [pc, #88]	; (8001c00 <HAL_LTDC_MspInit+0x228>)
 8001ba6:	f002 fb21 	bl	80041ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001baa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bbc:	2309      	movs	r3, #9
 8001bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <HAL_LTDC_MspInit+0x220>)
 8001bc8:	f002 fb10 	bl	80041ec <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2105      	movs	r1, #5
 8001bd0:	2058      	movs	r0, #88	; 0x58
 8001bd2:	f001 fd6d 	bl	80036b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001bd6:	2058      	movs	r0, #88	; 0x58
 8001bd8:	f001 fd86 	bl	80036e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	3738      	adds	r7, #56	; 0x38
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40016800 	.word	0x40016800
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40021400 	.word	0x40021400
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	40021800 	.word	0x40021800
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020c00 	.word	0x40020c00

08001c04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <HAL_SPI_MspInit+0x84>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d12c      	bne.n	8001c80 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_SPI_MspInit+0x88>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	4a17      	ldr	r2, [pc, #92]	; (8001c8c <HAL_SPI_MspInit+0x88>)
 8001c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c34:	6453      	str	r3, [r2, #68]	; 0x44
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_SPI_MspInit+0x88>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_SPI_MspInit+0x88>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <HAL_SPI_MspInit+0x88>)
 8001c4c:	f043 0320 	orr.w	r3, r3, #32
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_SPI_MspInit+0x88>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001c5e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c70:	2305      	movs	r3, #5
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <HAL_SPI_MspInit+0x8c>)
 8001c7c:	f002 fab6 	bl	80041ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001c80:	bf00      	nop
 8001c82:	3728      	adds	r7, #40	; 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40015000 	.word	0x40015000
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40021400 	.word	0x40021400

08001c94 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <HAL_SPI_MspDeInit+0x30>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d10a      	bne.n	8001cbc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_SPI_MspDeInit+0x34>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_SPI_MspDeInit+0x34>)
 8001cac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001cb2:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001cb6:	4805      	ldr	r0, [pc, #20]	; (8001ccc <HAL_SPI_MspDeInit+0x38>)
 8001cb8:	f002 fc42 	bl	8004540 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40015000 	.word	0x40015000
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40021400 	.word	0x40021400

08001cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_TIM_Base_MspInit+0x3c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10d      	bne.n	8001cfe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_TIM_Base_MspInit+0x40>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <HAL_TIM_Base_MspInit+0x40>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <HAL_TIM_Base_MspInit+0x40>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	40023800 	.word	0x40023800

08001d14 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001d28:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <HAL_FMC_MspInit+0x104>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d16f      	bne.n	8001e10 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001d30:	4b39      	ldr	r3, [pc, #228]	; (8001e18 <HAL_FMC_MspInit+0x104>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	4b38      	ldr	r3, [pc, #224]	; (8001e1c <HAL_FMC_MspInit+0x108>)
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	4a37      	ldr	r2, [pc, #220]	; (8001e1c <HAL_FMC_MspInit+0x108>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6393      	str	r3, [r2, #56]	; 0x38
 8001d46:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <HAL_FMC_MspInit+0x108>)
 8001d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8001d52:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001d56:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d64:	230c      	movs	r3, #12
 8001d66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	482c      	ldr	r0, [pc, #176]	; (8001e20 <HAL_FMC_MspInit+0x10c>)
 8001d6e:	f002 fa3d 	bl	80041ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001d72:	2301      	movs	r3, #1
 8001d74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d82:	230c      	movs	r3, #12
 8001d84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4826      	ldr	r0, [pc, #152]	; (8001e24 <HAL_FMC_MspInit+0x110>)
 8001d8c:	f002 fa2e 	bl	80041ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8001d90:	f248 1333 	movw	r3, #33075	; 0x8133
 8001d94:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001da2:	230c      	movs	r3, #12
 8001da4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	481f      	ldr	r0, [pc, #124]	; (8001e28 <HAL_FMC_MspInit+0x114>)
 8001dac:	f002 fa1e 	bl	80041ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8001db0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001db4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dc2:	230c      	movs	r3, #12
 8001dc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4818      	ldr	r0, [pc, #96]	; (8001e2c <HAL_FMC_MspInit+0x118>)
 8001dcc:	f002 fa0e 	bl	80041ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8001dd0:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001dd4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001de2:	230c      	movs	r3, #12
 8001de4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	4619      	mov	r1, r3
 8001dea:	4811      	ldr	r0, [pc, #68]	; (8001e30 <HAL_FMC_MspInit+0x11c>)
 8001dec:	f002 f9fe 	bl	80041ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001df0:	2360      	movs	r3, #96	; 0x60
 8001df2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e00:	230c      	movs	r3, #12
 8001e02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	480a      	ldr	r0, [pc, #40]	; (8001e34 <HAL_FMC_MspInit+0x120>)
 8001e0a:	f002 f9ef 	bl	80041ec <HAL_GPIO_Init>
 8001e0e:	e000      	b.n	8001e12 <HAL_FMC_MspInit+0xfe>
    return;
 8001e10:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200000dc 	.word	0x200000dc
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40021400 	.word	0x40021400
 8001e24:	40020800 	.word	0x40020800
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40020400 	.word	0x40020400

08001e38 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001e40:	f7ff ff68 	bl	8001d14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08c      	sub	sp, #48	; 0x30
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	2036      	movs	r0, #54	; 0x36
 8001e62:	f001 fc25 	bl	80036b0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001e66:	2036      	movs	r0, #54	; 0x36
 8001e68:	f001 fc3e 	bl	80036e8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <HAL_InitTick+0xa4>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <HAL_InitTick+0xa4>)
 8001e76:	f043 0310 	orr.w	r3, r3, #16
 8001e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <HAL_InitTick+0xa4>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e88:	f107 0210 	add.w	r2, r7, #16
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fca8 	bl	80057e8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e98:	f003 fc92 	bl	80057c0 <HAL_RCC_GetPCLK1Freq>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <HAL_InitTick+0xa8>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0c9b      	lsrs	r3, r3, #18
 8001eac:	3b01      	subs	r3, #1
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_InitTick+0xac>)
 8001eb2:	4a12      	ldr	r2, [pc, #72]	; (8001efc <HAL_InitTick+0xb0>)
 8001eb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_InitTick+0xac>)
 8001eb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ebc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <HAL_InitTick+0xac>)
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_InitTick+0xac>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_InitTick+0xac>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ed0:	4809      	ldr	r0, [pc, #36]	; (8001ef8 <HAL_InitTick+0xac>)
 8001ed2:	f004 fc83 	bl	80067dc <HAL_TIM_Base_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d104      	bne.n	8001ee6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001edc:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <HAL_InitTick+0xac>)
 8001ede:	f004 fca8 	bl	8006832 <HAL_TIM_Base_Start_IT>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3730      	adds	r7, #48	; 0x30
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	431bde83 	.word	0x431bde83
 8001ef8:	200004e4 	.word	0x200004e4
 8001efc:	40001000 	.word	0x40001000

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <HardFault_Handler+0x4>

08001f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <MemManage_Handler+0x4>

08001f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <BusFault_Handler+0x4>

08001f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <UsageFault_Handler+0x4>

08001f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <TIM6_DAC_IRQHandler+0x10>)
 8001f56:	f004 fc90 	bl	800687a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200004e4 	.word	0x200004e4

08001f64 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <LTDC_IRQHandler+0x10>)
 8001f6a:	f002 fcdd 	bl	8004928 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000348 	.word	0x20000348

08001f78 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <DMA2D_IRQHandler+0x10>)
 8001f7e:	f001 fef6 	bl	8003d6e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000470 	.word	0x20000470

08001f8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <_sbrk+0x50>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <_sbrk+0x16>
		heap_end = &end;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <_sbrk+0x50>)
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <_sbrk+0x54>)
 8001fa0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <_sbrk+0x50>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <_sbrk+0x50>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	466a      	mov	r2, sp
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d907      	bls.n	8001fc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001fb6:	f005 f97f 	bl	80072b8 <__errno>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	230c      	movs	r3, #12
 8001fbe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc4:	e006      	b.n	8001fd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <_sbrk+0x50>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <_sbrk+0x50>)
 8001fd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200000e0 	.word	0x200000e0
 8001fe0:	200005d8 	.word	0x200005d8

08001fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <SystemInit+0x28>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	4a07      	ldr	r2, [pc, #28]	; (800200c <SystemInit+0x28>)
 8001ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <SystemInit+0x28>)
 8001ffa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ffe:	609a      	str	r2, [r3, #8]
#endif
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002048 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002014:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002016:	e003      	b.n	8002020 <LoopCopyDataInit>

08002018 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800201a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800201c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800201e:	3104      	adds	r1, #4

08002020 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002020:	480b      	ldr	r0, [pc, #44]	; (8002050 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002024:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002026:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002028:	d3f6      	bcc.n	8002018 <CopyDataInit>
  ldr  r2, =_sbss
 800202a:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800202c:	e002      	b.n	8002034 <LoopFillZerobss>

0800202e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800202e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002030:	f842 3b04 	str.w	r3, [r2], #4

08002034 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002036:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002038:	d3f9      	bcc.n	800202e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800203a:	f7ff ffd3 	bl	8001fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203e:	f005 f941 	bl	80072c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002042:	f7fe ff23 	bl	8000e8c <main>
  bx  lr    
 8002046:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002048:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800204c:	0800a8ac 	.word	0x0800a8ac
  ldr  r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002054:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8002058:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 800205c:	200005d8 	.word	0x200005d8

08002060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <ADC_IRQHandler>

08002062 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002066:	f000 fa5d 	bl	8002524 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800206a:	20ca      	movs	r0, #202	; 0xca
 800206c:	f000 f95d 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002070:	20c3      	movs	r0, #195	; 0xc3
 8002072:	f000 f967 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002076:	2008      	movs	r0, #8
 8002078:	f000 f964 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800207c:	2050      	movs	r0, #80	; 0x50
 800207e:	f000 f961 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002082:	20cf      	movs	r0, #207	; 0xcf
 8002084:	f000 f951 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002088:	2000      	movs	r0, #0
 800208a:	f000 f95b 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800208e:	20c1      	movs	r0, #193	; 0xc1
 8002090:	f000 f958 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002094:	2030      	movs	r0, #48	; 0x30
 8002096:	f000 f955 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800209a:	20ed      	movs	r0, #237	; 0xed
 800209c:	f000 f945 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80020a0:	2064      	movs	r0, #100	; 0x64
 80020a2:	f000 f94f 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80020a6:	2003      	movs	r0, #3
 80020a8:	f000 f94c 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80020ac:	2012      	movs	r0, #18
 80020ae:	f000 f949 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80020b2:	2081      	movs	r0, #129	; 0x81
 80020b4:	f000 f946 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80020b8:	20e8      	movs	r0, #232	; 0xe8
 80020ba:	f000 f936 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80020be:	2085      	movs	r0, #133	; 0x85
 80020c0:	f000 f940 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f000 f93d 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80020ca:	2078      	movs	r0, #120	; 0x78
 80020cc:	f000 f93a 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80020d0:	20cb      	movs	r0, #203	; 0xcb
 80020d2:	f000 f92a 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80020d6:	2039      	movs	r0, #57	; 0x39
 80020d8:	f000 f934 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80020dc:	202c      	movs	r0, #44	; 0x2c
 80020de:	f000 f931 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f000 f92e 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80020e8:	2034      	movs	r0, #52	; 0x34
 80020ea:	f000 f92b 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80020ee:	2002      	movs	r0, #2
 80020f0:	f000 f928 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80020f4:	20f7      	movs	r0, #247	; 0xf7
 80020f6:	f000 f918 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80020fa:	2020      	movs	r0, #32
 80020fc:	f000 f922 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002100:	20ea      	movs	r0, #234	; 0xea
 8002102:	f000 f912 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002106:	2000      	movs	r0, #0
 8002108:	f000 f91c 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800210c:	2000      	movs	r0, #0
 800210e:	f000 f919 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002112:	20b1      	movs	r0, #177	; 0xb1
 8002114:	f000 f909 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002118:	2000      	movs	r0, #0
 800211a:	f000 f913 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800211e:	201b      	movs	r0, #27
 8002120:	f000 f910 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002124:	20b6      	movs	r0, #182	; 0xb6
 8002126:	f000 f900 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800212a:	200a      	movs	r0, #10
 800212c:	f000 f90a 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002130:	20a2      	movs	r0, #162	; 0xa2
 8002132:	f000 f907 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002136:	20c0      	movs	r0, #192	; 0xc0
 8002138:	f000 f8f7 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800213c:	2010      	movs	r0, #16
 800213e:	f000 f901 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002142:	20c1      	movs	r0, #193	; 0xc1
 8002144:	f000 f8f1 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002148:	2010      	movs	r0, #16
 800214a:	f000 f8fb 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800214e:	20c5      	movs	r0, #197	; 0xc5
 8002150:	f000 f8eb 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002154:	2045      	movs	r0, #69	; 0x45
 8002156:	f000 f8f5 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800215a:	2015      	movs	r0, #21
 800215c:	f000 f8f2 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002160:	20c7      	movs	r0, #199	; 0xc7
 8002162:	f000 f8e2 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002166:	2090      	movs	r0, #144	; 0x90
 8002168:	f000 f8ec 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800216c:	2036      	movs	r0, #54	; 0x36
 800216e:	f000 f8dc 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002172:	20c8      	movs	r0, #200	; 0xc8
 8002174:	f000 f8e6 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002178:	20f2      	movs	r0, #242	; 0xf2
 800217a:	f000 f8d6 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800217e:	2000      	movs	r0, #0
 8002180:	f000 f8e0 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002184:	20b0      	movs	r0, #176	; 0xb0
 8002186:	f000 f8d0 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800218a:	20c2      	movs	r0, #194	; 0xc2
 800218c:	f000 f8da 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002190:	20b6      	movs	r0, #182	; 0xb6
 8002192:	f000 f8ca 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002196:	200a      	movs	r0, #10
 8002198:	f000 f8d4 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800219c:	20a7      	movs	r0, #167	; 0xa7
 800219e:	f000 f8d1 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80021a2:	2027      	movs	r0, #39	; 0x27
 80021a4:	f000 f8ce 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80021a8:	2004      	movs	r0, #4
 80021aa:	f000 f8cb 	bl	8002344 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80021ae:	202a      	movs	r0, #42	; 0x2a
 80021b0:	f000 f8bb 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80021b4:	2000      	movs	r0, #0
 80021b6:	f000 f8c5 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80021ba:	2000      	movs	r0, #0
 80021bc:	f000 f8c2 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80021c0:	2000      	movs	r0, #0
 80021c2:	f000 f8bf 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80021c6:	20ef      	movs	r0, #239	; 0xef
 80021c8:	f000 f8bc 	bl	8002344 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80021cc:	202b      	movs	r0, #43	; 0x2b
 80021ce:	f000 f8ac 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f000 f8b6 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80021d8:	2000      	movs	r0, #0
 80021da:	f000 f8b3 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80021de:	2001      	movs	r0, #1
 80021e0:	f000 f8b0 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80021e4:	203f      	movs	r0, #63	; 0x3f
 80021e6:	f000 f8ad 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80021ea:	20f6      	movs	r0, #246	; 0xf6
 80021ec:	f000 f89d 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80021f0:	2001      	movs	r0, #1
 80021f2:	f000 f8a7 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f000 f8a4 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80021fc:	2006      	movs	r0, #6
 80021fe:	f000 f8a1 	bl	8002344 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002202:	202c      	movs	r0, #44	; 0x2c
 8002204:	f000 f891 	bl	800232a <ili9341_WriteReg>
  LCD_Delay(200);
 8002208:	20c8      	movs	r0, #200	; 0xc8
 800220a:	f000 fa79 	bl	8002700 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800220e:	2026      	movs	r0, #38	; 0x26
 8002210:	f000 f88b 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002214:	2001      	movs	r0, #1
 8002216:	f000 f895 	bl	8002344 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800221a:	20e0      	movs	r0, #224	; 0xe0
 800221c:	f000 f885 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002220:	200f      	movs	r0, #15
 8002222:	f000 f88f 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002226:	2029      	movs	r0, #41	; 0x29
 8002228:	f000 f88c 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800222c:	2024      	movs	r0, #36	; 0x24
 800222e:	f000 f889 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002232:	200c      	movs	r0, #12
 8002234:	f000 f886 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002238:	200e      	movs	r0, #14
 800223a:	f000 f883 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800223e:	2009      	movs	r0, #9
 8002240:	f000 f880 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002244:	204e      	movs	r0, #78	; 0x4e
 8002246:	f000 f87d 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800224a:	2078      	movs	r0, #120	; 0x78
 800224c:	f000 f87a 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002250:	203c      	movs	r0, #60	; 0x3c
 8002252:	f000 f877 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002256:	2009      	movs	r0, #9
 8002258:	f000 f874 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800225c:	2013      	movs	r0, #19
 800225e:	f000 f871 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002262:	2005      	movs	r0, #5
 8002264:	f000 f86e 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002268:	2017      	movs	r0, #23
 800226a:	f000 f86b 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800226e:	2011      	movs	r0, #17
 8002270:	f000 f868 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002274:	2000      	movs	r0, #0
 8002276:	f000 f865 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800227a:	20e1      	movs	r0, #225	; 0xe1
 800227c:	f000 f855 	bl	800232a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002280:	2000      	movs	r0, #0
 8002282:	f000 f85f 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002286:	2016      	movs	r0, #22
 8002288:	f000 f85c 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800228c:	201b      	movs	r0, #27
 800228e:	f000 f859 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002292:	2004      	movs	r0, #4
 8002294:	f000 f856 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002298:	2011      	movs	r0, #17
 800229a:	f000 f853 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800229e:	2007      	movs	r0, #7
 80022a0:	f000 f850 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80022a4:	2031      	movs	r0, #49	; 0x31
 80022a6:	f000 f84d 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80022aa:	2033      	movs	r0, #51	; 0x33
 80022ac:	f000 f84a 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80022b0:	2042      	movs	r0, #66	; 0x42
 80022b2:	f000 f847 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80022b6:	2005      	movs	r0, #5
 80022b8:	f000 f844 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80022bc:	200c      	movs	r0, #12
 80022be:	f000 f841 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80022c2:	200a      	movs	r0, #10
 80022c4:	f000 f83e 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80022c8:	2028      	movs	r0, #40	; 0x28
 80022ca:	f000 f83b 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80022ce:	202f      	movs	r0, #47	; 0x2f
 80022d0:	f000 f838 	bl	8002344 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80022d4:	200f      	movs	r0, #15
 80022d6:	f000 f835 	bl	8002344 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80022da:	2011      	movs	r0, #17
 80022dc:	f000 f825 	bl	800232a <ili9341_WriteReg>
  LCD_Delay(200);
 80022e0:	20c8      	movs	r0, #200	; 0xc8
 80022e2:	f000 fa0d 	bl	8002700 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80022e6:	2029      	movs	r0, #41	; 0x29
 80022e8:	f000 f81f 	bl	800232a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80022ec:	202c      	movs	r0, #44	; 0x2c
 80022ee:	f000 f81c 	bl	800232a <ili9341_WriteReg>
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80022fa:	f000 f913 	bl	8002524 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80022fe:	2103      	movs	r1, #3
 8002300:	20d3      	movs	r0, #211	; 0xd3
 8002302:	f000 f82c 	bl	800235e <ili9341_ReadData>
 8002306:	4603      	mov	r3, r0
 8002308:	b29b      	uxth	r3, r3
}
 800230a:	4618      	mov	r0, r3
 800230c:	bd80      	pop	{r7, pc}

0800230e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002312:	2029      	movs	r0, #41	; 0x29
 8002314:	f000 f809 	bl	800232a <ili9341_WriteReg>
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}

0800231c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002320:	2028      	movs	r0, #40	; 0x28
 8002322:	f000 f802 	bl	800232a <ili9341_WriteReg>
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}

0800232a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f98e 	bl	8002658 <LCD_IO_WriteReg>
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	4618      	mov	r0, r3
 8002352:	f000 f95f 	bl	8002614 <LCD_IO_WriteData>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	460a      	mov	r2, r1
 8002368:	80fb      	strh	r3, [r7, #6]
 800236a:	4613      	mov	r3, r2
 800236c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800236e:	797a      	ldrb	r2, [r7, #5]
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f991 	bl	800269c <LCD_IO_ReadData>
 800237a:	4603      	mov	r3, r0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002388:	23f0      	movs	r3, #240	; 0xf0
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002398:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80023ac:	4819      	ldr	r0, [pc, #100]	; (8002414 <SPIx_Init+0x6c>)
 80023ae:	f004 f8f5 	bl	800659c <HAL_SPI_GetState>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d12b      	bne.n	8002410 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80023b8:	4b16      	ldr	r3, [pc, #88]	; (8002414 <SPIx_Init+0x6c>)
 80023ba:	4a17      	ldr	r2, [pc, #92]	; (8002418 <SPIx_Init+0x70>)
 80023bc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <SPIx_Init+0x6c>)
 80023c0:	2218      	movs	r2, #24
 80023c2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <SPIx_Init+0x6c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <SPIx_Init+0x6c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <SPIx_Init+0x6c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <SPIx_Init+0x6c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <SPIx_Init+0x6c>)
 80023de:	2207      	movs	r2, #7
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <SPIx_Init+0x6c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <SPIx_Init+0x6c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <SPIx_Init+0x6c>)
 80023f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <SPIx_Init+0x6c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <SPIx_Init+0x6c>)
 80023fe:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002402:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002404:	4803      	ldr	r0, [pc, #12]	; (8002414 <SPIx_Init+0x6c>)
 8002406:	f000 f853 	bl	80024b0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800240a:	4802      	ldr	r0, [pc, #8]	; (8002414 <SPIx_Init+0x6c>)
 800240c:	f003 fc5b 	bl	8005cc6 <HAL_SPI_Init>
  } 
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	200000e4 	.word	0x200000e4
 8002418:	40015000 	.word	0x40015000

0800241c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	b29a      	uxth	r2, r3
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <SPIx_Read+0x38>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f107 0108 	add.w	r1, r7, #8
 8002436:	4808      	ldr	r0, [pc, #32]	; (8002458 <SPIx_Read+0x3c>)
 8002438:	f003 fe05 	bl	8006046 <HAL_SPI_Receive>
 800243c:	4603      	mov	r3, r0
 800243e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002446:	f000 f827 	bl	8002498 <SPIx_Error>
  }
  
  return readvalue;
 800244a:	68bb      	ldr	r3, [r7, #8]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	2000003c 	.word	0x2000003c
 8002458:	200000e4 	.word	0x200000e4

0800245c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <SPIx_Write+0x34>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1db9      	adds	r1, r7, #6
 8002470:	2201      	movs	r2, #1
 8002472:	4808      	ldr	r0, [pc, #32]	; (8002494 <SPIx_Write+0x38>)
 8002474:	f003 fcb3 	bl	8005dde <HAL_SPI_Transmit>
 8002478:	4603      	mov	r3, r0
 800247a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002482:	f000 f809 	bl	8002498 <SPIx_Error>
  }
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2000003c 	.word	0x2000003c
 8002494:	200000e4 	.word	0x200000e4

08002498 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800249c:	4803      	ldr	r0, [pc, #12]	; (80024ac <SPIx_Error+0x14>)
 800249e:	f003 fc76 	bl	8005d8e <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80024a2:	f7ff ff81 	bl	80023a8 <SPIx_Init>
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200000e4 	.word	0x200000e4

080024b0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	4b17      	ldr	r3, [pc, #92]	; (800251c <SPIx_MspInit+0x6c>)
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	4a16      	ldr	r2, [pc, #88]	; (800251c <SPIx_MspInit+0x6c>)
 80024c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c6:	6453      	str	r3, [r2, #68]	; 0x44
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <SPIx_MspInit+0x6c>)
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <SPIx_MspInit+0x6c>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	4a0f      	ldr	r2, [pc, #60]	; (800251c <SPIx_MspInit+0x6c>)
 80024de:	f043 0320 	orr.w	r3, r3, #32
 80024e2:	6313      	str	r3, [r2, #48]	; 0x30
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <SPIx_MspInit+0x6c>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80024f0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80024f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80024fe:	2301      	movs	r3, #1
 8002500:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002502:	2305      	movs	r3, #5
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <SPIx_MspInit+0x70>)
 800250e:	f001 fe6d 	bl	80041ec <HAL_GPIO_Init>
}
 8002512:	bf00      	nop
 8002514:	3728      	adds	r7, #40	; 0x28
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40021400 	.word	0x40021400

08002524 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800252a:	4b36      	ldr	r3, [pc, #216]	; (8002604 <LCD_IO_Init+0xe0>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d164      	bne.n	80025fc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002532:	4b34      	ldr	r3, [pc, #208]	; (8002604 <LCD_IO_Init+0xe0>)
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	4b32      	ldr	r3, [pc, #200]	; (8002608 <LCD_IO_Init+0xe4>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	4a31      	ldr	r2, [pc, #196]	; (8002608 <LCD_IO_Init+0xe4>)
 8002542:	f043 0308 	orr.w	r3, r3, #8
 8002546:	6313      	str	r3, [r2, #48]	; 0x30
 8002548:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <LCD_IO_Init+0xe4>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002558:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800255a:	2301      	movs	r3, #1
 800255c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002562:	2302      	movs	r3, #2
 8002564:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002566:	f107 030c 	add.w	r3, r7, #12
 800256a:	4619      	mov	r1, r3
 800256c:	4827      	ldr	r0, [pc, #156]	; (800260c <LCD_IO_Init+0xe8>)
 800256e:	f001 fe3d 	bl	80041ec <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	4b24      	ldr	r3, [pc, #144]	; (8002608 <LCD_IO_Init+0xe4>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a23      	ldr	r2, [pc, #140]	; (8002608 <LCD_IO_Init+0xe4>)
 800257c:	f043 0308 	orr.w	r3, r3, #8
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <LCD_IO_Init+0xe4>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800258e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002592:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002594:	2301      	movs	r3, #1
 8002596:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800259c:	2302      	movs	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	4619      	mov	r1, r3
 80025a6:	4819      	ldr	r0, [pc, #100]	; (800260c <LCD_IO_Init+0xe8>)
 80025a8:	f001 fe20 	bl	80041ec <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80025ac:	2300      	movs	r3, #0
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	4b15      	ldr	r3, [pc, #84]	; (8002608 <LCD_IO_Init+0xe4>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <LCD_IO_Init+0xe4>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	6313      	str	r3, [r2, #48]	; 0x30
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <LCD_IO_Init+0xe4>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80025c8:	2304      	movs	r3, #4
 80025ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80025cc:	2301      	movs	r3, #1
 80025ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80025d4:	2302      	movs	r3, #2
 80025d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	4619      	mov	r1, r3
 80025de:	480c      	ldr	r0, [pc, #48]	; (8002610 <LCD_IO_Init+0xec>)
 80025e0:	f001 fe04 	bl	80041ec <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80025e4:	2200      	movs	r2, #0
 80025e6:	2104      	movs	r1, #4
 80025e8:	4809      	ldr	r0, [pc, #36]	; (8002610 <LCD_IO_Init+0xec>)
 80025ea:	f002 f8b3 	bl	8004754 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80025ee:	2201      	movs	r2, #1
 80025f0:	2104      	movs	r1, #4
 80025f2:	4807      	ldr	r0, [pc, #28]	; (8002610 <LCD_IO_Init+0xec>)
 80025f4:	f002 f8ae 	bl	8004754 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80025f8:	f7ff fed6 	bl	80023a8 <SPIx_Init>
  }
}
 80025fc:	bf00      	nop
 80025fe:	3720      	adds	r7, #32
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2000013c 	.word	0x2000013c
 8002608:	40023800 	.word	0x40023800
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40020800 	.word	0x40020800

08002614 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800261e:	2201      	movs	r2, #1
 8002620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002624:	480a      	ldr	r0, [pc, #40]	; (8002650 <LCD_IO_WriteData+0x3c>)
 8002626:	f002 f895 	bl	8004754 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800262a:	2200      	movs	r2, #0
 800262c:	2104      	movs	r1, #4
 800262e:	4809      	ldr	r0, [pc, #36]	; (8002654 <LCD_IO_WriteData+0x40>)
 8002630:	f002 f890 	bl	8004754 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff10 	bl	800245c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800263c:	2201      	movs	r2, #1
 800263e:	2104      	movs	r1, #4
 8002640:	4804      	ldr	r0, [pc, #16]	; (8002654 <LCD_IO_WriteData+0x40>)
 8002642:	f002 f887 	bl	8004754 <HAL_GPIO_WritePin>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40020c00 	.word	0x40020c00
 8002654:	40020800 	.word	0x40020800

08002658 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002662:	2200      	movs	r2, #0
 8002664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002668:	480a      	ldr	r0, [pc, #40]	; (8002694 <LCD_IO_WriteReg+0x3c>)
 800266a:	f002 f873 	bl	8004754 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800266e:	2200      	movs	r2, #0
 8002670:	2104      	movs	r1, #4
 8002672:	4809      	ldr	r0, [pc, #36]	; (8002698 <LCD_IO_WriteReg+0x40>)
 8002674:	f002 f86e 	bl	8004754 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	b29b      	uxth	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff feed 	bl	800245c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002682:	2201      	movs	r2, #1
 8002684:	2104      	movs	r1, #4
 8002686:	4804      	ldr	r0, [pc, #16]	; (8002698 <LCD_IO_WriteReg+0x40>)
 8002688:	f002 f864 	bl	8004754 <HAL_GPIO_WritePin>
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40020c00 	.word	0x40020c00
 8002698:	40020800 	.word	0x40020800

0800269c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	460a      	mov	r2, r1
 80026a6:	80fb      	strh	r3, [r7, #6]
 80026a8:	4613      	mov	r3, r2
 80026aa:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80026b0:	2200      	movs	r2, #0
 80026b2:	2104      	movs	r1, #4
 80026b4:	4810      	ldr	r0, [pc, #64]	; (80026f8 <LCD_IO_ReadData+0x5c>)
 80026b6:	f002 f84d 	bl	8004754 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80026ba:	2200      	movs	r2, #0
 80026bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026c0:	480e      	ldr	r0, [pc, #56]	; (80026fc <LCD_IO_ReadData+0x60>)
 80026c2:	f002 f847 	bl	8004754 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fec7 	bl	800245c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80026ce:	797b      	ldrb	r3, [r7, #5]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fea3 	bl	800241c <SPIx_Read>
 80026d6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80026d8:	2201      	movs	r2, #1
 80026da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026de:	4807      	ldr	r0, [pc, #28]	; (80026fc <LCD_IO_ReadData+0x60>)
 80026e0:	f002 f838 	bl	8004754 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80026e4:	2201      	movs	r2, #1
 80026e6:	2104      	movs	r1, #4
 80026e8:	4803      	ldr	r0, [pc, #12]	; (80026f8 <LCD_IO_ReadData+0x5c>)
 80026ea:	f002 f833 	bl	8004754 <HAL_GPIO_WritePin>
  
  return readvalue;
 80026ee:	68fb      	ldr	r3, [r7, #12]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40020800 	.word	0x40020800
 80026fc:	40020c00 	.word	0x40020c00

08002700 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fef7 	bl	80034fc <HAL_Delay>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800271c:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <BSP_LCD_Init+0xbc>)
 800271e:	4a2e      	ldr	r2, [pc, #184]	; (80027d8 <BSP_LCD_Init+0xc0>)
 8002720:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002722:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <BSP_LCD_Init+0xbc>)
 8002724:	2209      	movs	r2, #9
 8002726:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002728:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <BSP_LCD_Init+0xbc>)
 800272a:	2201      	movs	r2, #1
 800272c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <BSP_LCD_Init+0xbc>)
 8002730:	221d      	movs	r2, #29
 8002732:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <BSP_LCD_Init+0xbc>)
 8002736:	2203      	movs	r2, #3
 8002738:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800273a:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <BSP_LCD_Init+0xbc>)
 800273c:	f240 120d 	movw	r2, #269	; 0x10d
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <BSP_LCD_Init+0xbc>)
 8002744:	f240 1243 	movw	r2, #323	; 0x143
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <BSP_LCD_Init+0xbc>)
 800274c:	f240 1217 	movw	r2, #279	; 0x117
 8002750:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <BSP_LCD_Init+0xbc>)
 8002754:	f240 1247 	movw	r2, #327	; 0x147
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <BSP_LCD_Init+0xbc>)
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002762:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <BSP_LCD_Init+0xbc>)
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800276a:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <BSP_LCD_Init+0xbc>)
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002772:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <BSP_LCD_Init+0xc4>)
 8002774:	2208      	movs	r2, #8
 8002776:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002778:	4b18      	ldr	r3, [pc, #96]	; (80027dc <BSP_LCD_Init+0xc4>)
 800277a:	22c0      	movs	r2, #192	; 0xc0
 800277c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <BSP_LCD_Init+0xc4>)
 8002780:	2204      	movs	r2, #4
 8002782:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <BSP_LCD_Init+0xc4>)
 8002786:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800278a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800278c:	4813      	ldr	r0, [pc, #76]	; (80027dc <BSP_LCD_Init+0xc4>)
 800278e:	f003 f85d 	bl	800584c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <BSP_LCD_Init+0xbc>)
 8002794:	2200      	movs	r2, #0
 8002796:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002798:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <BSP_LCD_Init+0xbc>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <BSP_LCD_Init+0xbc>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <BSP_LCD_Init+0xbc>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80027aa:	f000 faad 	bl	8002d08 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80027ae:	4809      	ldr	r0, [pc, #36]	; (80027d4 <BSP_LCD_Init+0xbc>)
 80027b0:	f001 ffea 	bl	8004788 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <BSP_LCD_Init+0xc8>)
 80027b6:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <BSP_LCD_Init+0xcc>)
 80027b8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <BSP_LCD_Init+0xc8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80027c2:	f000 fc8f 	bl	80030e4 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80027c6:	4808      	ldr	r0, [pc, #32]	; (80027e8 <BSP_LCD_Init+0xd0>)
 80027c8:	f000 f8ce 	bl	8002968 <BSP_LCD_SetFont>

  return LCD_OK;
 80027cc:	2300      	movs	r3, #0
}  
 80027ce:	4618      	mov	r0, r3
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000524 	.word	0x20000524
 80027d8:	40016800 	.word	0x40016800
 80027dc:	20000180 	.word	0x20000180
 80027e0:	200005cc 	.word	0x200005cc
 80027e4:	20000004 	.word	0x20000004
 80027e8:	20000040 	.word	0x20000040

080027ec <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <BSP_LCD_GetXSize+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	4798      	blx	r3
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200005cc 	.word	0x200005cc

08002804 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <BSP_LCD_GetYSize+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	4798      	blx	r3
 8002810:	4603      	mov	r3, r0
}
 8002812:	4618      	mov	r0, r3
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200005cc 	.word	0x200005cc

0800281c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800281c:	b580      	push	{r7, lr}
 800281e:	b090      	sub	sp, #64	; 0x40
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800282c:	f7ff ffde 	bl	80027ec <BSP_LCD_GetXSize>
 8002830:	4603      	mov	r3, r0
 8002832:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002838:	f7ff ffe4 	bl	8002804 <BSP_LCD_GetYSize>
 800283c:	4603      	mov	r3, r0
 800283e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002848:	23ff      	movs	r3, #255	; 0xff
 800284a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002868:	2307      	movs	r3, #7
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800286c:	f7ff ffbe 	bl	80027ec <BSP_LCD_GetXSize>
 8002870:	4603      	mov	r3, r0
 8002872:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002874:	f7ff ffc6 	bl	8002804 <BSP_LCD_GetYSize>
 8002878:	4603      	mov	r3, r0
 800287a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4619      	mov	r1, r3
 8002884:	4814      	ldr	r0, [pc, #80]	; (80028d8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002886:	f002 f911 	bl	8004aac <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800288a:	88fa      	ldrh	r2, [r7, #6]
 800288c:	4913      	ldr	r1, [pc, #76]	; (80028dc <BSP_LCD_LayerDefaultInit+0xc0>)
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3304      	adds	r3, #4
 800289a:	f04f 32ff 	mov.w	r2, #4294967295
 800289e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80028a0:	88fa      	ldrh	r2, [r7, #6]
 80028a2:	490e      	ldr	r1, [pc, #56]	; (80028dc <BSP_LCD_LayerDefaultInit+0xc0>)
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	3308      	adds	r3, #8
 80028b0:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <BSP_LCD_LayerDefaultInit+0xc4>)
 80028b2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	4909      	ldr	r1, [pc, #36]	; (80028dc <BSP_LCD_LayerDefaultInit+0xc0>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80028c6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80028c8:	4803      	ldr	r0, [pc, #12]	; (80028d8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80028ca:	f002 f92d 	bl	8004b28 <HAL_LTDC_EnableDither>
}
 80028ce:	bf00      	nop
 80028d0:	3740      	adds	r7, #64	; 0x40
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000524 	.word	0x20000524
 80028dc:	200001b4 	.word	0x200001b4
 80028e0:	20000040 	.word	0x20000040

080028e4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80028ec:	4a04      	ldr	r2, [pc, #16]	; (8002900 <BSP_LCD_SelectLayer+0x1c>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	200001b0 	.word	0x200001b0

08002904 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800290c:	4b07      	ldr	r3, [pc, #28]	; (800292c <BSP_LCD_SetTextColor+0x28>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4907      	ldr	r1, [pc, #28]	; (8002930 <BSP_LCD_SetTextColor+0x2c>)
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	200001b0 	.word	0x200001b0
 8002930:	200001b4 	.word	0x200001b4

08002934 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <BSP_LCD_SetBackColor+0x2c>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4908      	ldr	r1, [pc, #32]	; (8002964 <BSP_LCD_SetBackColor+0x30>)
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	3304      	adds	r3, #4
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	601a      	str	r2, [r3, #0]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	200001b0 	.word	0x200001b0
 8002964:	200001b4 	.word	0x200001b4

08002968 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <BSP_LCD_SetFont+0x2c>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4908      	ldr	r1, [pc, #32]	; (8002998 <BSP_LCD_SetFont+0x30>)
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3308      	adds	r3, #8
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	601a      	str	r2, [r3, #0]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	200001b0 	.word	0x200001b0
 8002998:	200001b4 	.word	0x200001b4

0800299c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800299c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299e:	b085      	sub	sp, #20
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <BSP_LCD_Clear+0x48>)
 80029a6:	681c      	ldr	r4, [r3, #0]
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <BSP_LCD_Clear+0x48>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <BSP_LCD_Clear+0x4c>)
 80029ae:	2134      	movs	r1, #52	; 0x34
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	335c      	adds	r3, #92	; 0x5c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	461d      	mov	r5, r3
 80029bc:	f7ff ff16 	bl	80027ec <BSP_LCD_GetXSize>
 80029c0:	4606      	mov	r6, r0
 80029c2:	f7ff ff1f 	bl	8002804 <BSP_LCD_GetYSize>
 80029c6:	4602      	mov	r2, r0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	2300      	movs	r3, #0
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	4632      	mov	r2, r6
 80029d4:	4629      	mov	r1, r5
 80029d6:	4620      	mov	r0, r4
 80029d8:	f000 fb4c 	bl	8003074 <FillBuffer>
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e4:	200001b0 	.word	0x200001b0
 80029e8:	20000524 	.word	0x20000524

080029ec <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
 80029f6:	460b      	mov	r3, r1
 80029f8:	80bb      	strh	r3, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <BSP_LCD_DisplayChar+0x80>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	491b      	ldr	r1, [pc, #108]	; (8002a70 <BSP_LCD_DisplayChar+0x84>)
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3308      	adds	r3, #8
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <BSP_LCD_DisplayChar+0x80>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4c14      	ldr	r4, [pc, #80]	; (8002a70 <BSP_LCD_DisplayChar+0x84>)
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4423      	add	r3, r4
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002a30:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002a34:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <BSP_LCD_DisplayChar+0x80>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4c0d      	ldr	r4, [pc, #52]	; (8002a70 <BSP_LCD_DisplayChar+0x84>)
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4423      	add	r3, r4
 8002a44:	3308      	adds	r3, #8
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	889b      	ldrh	r3, [r3, #4]
 8002a4a:	3307      	adds	r3, #7
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	da00      	bge.n	8002a52 <BSP_LCD_DisplayChar+0x66>
 8002a50:	3307      	adds	r3, #7
 8002a52:	10db      	asrs	r3, r3, #3
 8002a54:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002a58:	18ca      	adds	r2, r1, r3
 8002a5a:	88b9      	ldrh	r1, [r7, #4]
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fa4e 	bl	8002f00 <DrawChar>
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd90      	pop	{r4, r7, pc}
 8002a6c:	200001b0 	.word	0x200001b0
 8002a70:	200001b4 	.word	0x200001b4

08002a74 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002a74:	b5b0      	push	{r4, r5, r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60ba      	str	r2, [r7, #8]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	81fb      	strh	r3, [r7, #14]
 8002a82:	460b      	mov	r3, r1
 8002a84:	81bb      	strh	r3, [r7, #12]
 8002a86:	4613      	mov	r3, r2
 8002a88:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	83fb      	strh	r3, [r7, #30]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002a9e:	e002      	b.n	8002aa6 <BSP_LCD_DisplayStringAt+0x32>
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	617a      	str	r2, [r7, #20]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f6      	bne.n	8002aa0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002ab2:	f7ff fe9b 	bl	80027ec <BSP_LCD_GetXSize>
 8002ab6:	4b4a      	ldr	r3, [pc, #296]	; (8002be0 <BSP_LCD_DisplayStringAt+0x16c>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	494a      	ldr	r1, [pc, #296]	; (8002be4 <BSP_LCD_DisplayStringAt+0x170>)
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	889b      	ldrh	r3, [r3, #4]
 8002acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad0:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d01c      	beq.n	8002b12 <BSP_LCD_DisplayStringAt+0x9e>
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d017      	beq.n	8002b0c <BSP_LCD_DisplayStringAt+0x98>
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d12e      	bne.n	8002b3e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	1ad1      	subs	r1, r2, r3
 8002ae6:	4b3e      	ldr	r3, [pc, #248]	; (8002be0 <BSP_LCD_DisplayStringAt+0x16c>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	483e      	ldr	r0, [pc, #248]	; (8002be4 <BSP_LCD_DisplayStringAt+0x170>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4403      	add	r3, r0
 8002af6:	3308      	adds	r3, #8
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	889b      	ldrh	r3, [r3, #4]
 8002afc:	fb03 f301 	mul.w	r3, r3, r1
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	89fb      	ldrh	r3, [r7, #14]
 8002b06:	4413      	add	r3, r2
 8002b08:	83fb      	strh	r3, [r7, #30]
      break;
 8002b0a:	e01b      	b.n	8002b44 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002b0c:	89fb      	ldrh	r3, [r7, #14]
 8002b0e:	83fb      	strh	r3, [r7, #30]
      break;
 8002b10:	e018      	b.n	8002b44 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	b299      	uxth	r1, r3
 8002b1a:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <BSP_LCD_DisplayStringAt+0x16c>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4831      	ldr	r0, [pc, #196]	; (8002be4 <BSP_LCD_DisplayStringAt+0x170>)
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4403      	add	r3, r0
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	889b      	ldrh	r3, [r3, #4]
 8002b30:	fb11 f303 	smulbb	r3, r1, r3
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	89fb      	ldrh	r3, [r7, #14]
 8002b38:	4413      	add	r3, r2
 8002b3a:	83fb      	strh	r3, [r7, #30]
      break;
 8002b3c:	e002      	b.n	8002b44 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8002b3e:	89fb      	ldrh	r3, [r7, #14]
 8002b40:	83fb      	strh	r3, [r7, #30]
      break;
 8002b42:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002b44:	e01a      	b.n	8002b7c <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	89b9      	ldrh	r1, [r7, #12]
 8002b4c:	8bfb      	ldrh	r3, [r7, #30]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ff4c 	bl	80029ec <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002b54:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <BSP_LCD_DisplayStringAt+0x16c>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4922      	ldr	r1, [pc, #136]	; (8002be4 <BSP_LCD_DisplayStringAt+0x170>)
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	3308      	adds	r3, #8
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	889a      	ldrh	r2, [r3, #4]
 8002b6a:	8bfb      	ldrh	r3, [r7, #30]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	3301      	adds	r3, #1
 8002b74:	60bb      	str	r3, [r7, #8]
    i++;
 8002b76:	8bbb      	ldrh	r3, [r7, #28]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2dc      	uxtb	r4, r3
 8002b8a:	f7ff fe2f 	bl	80027ec <BSP_LCD_GetXSize>
 8002b8e:	4605      	mov	r5, r0
 8002b90:	8bb9      	ldrh	r1, [r7, #28]
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <BSP_LCD_DisplayStringAt+0x16c>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4813      	ldr	r0, [pc, #76]	; (8002be4 <BSP_LCD_DisplayStringAt+0x170>)
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4403      	add	r3, r0
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	889b      	ldrh	r3, [r3, #4]
 8002ba8:	fb03 f301 	mul.w	r3, r3, r1
 8002bac:	1aeb      	subs	r3, r5, r3
 8002bae:	b299      	uxth	r1, r3
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <BSP_LCD_DisplayStringAt+0x16c>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	480b      	ldr	r0, [pc, #44]	; (8002be4 <BSP_LCD_DisplayStringAt+0x170>)
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4403      	add	r3, r0
 8002bc0:	3308      	adds	r3, #8
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	889b      	ldrh	r3, [r3, #4]
 8002bc6:	4299      	cmp	r1, r3
 8002bc8:	bf2c      	ite	cs
 8002bca:	2301      	movcs	r3, #1
 8002bcc:	2300      	movcc	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	4023      	ands	r3, r4
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1b6      	bne.n	8002b46 <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8002bd8:	bf00      	nop
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bdb0      	pop	{r4, r5, r7, pc}
 8002be0:	200001b0 	.word	0x200001b0
 8002be4:	200001b4 	.word	0x200001b4

08002be8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80fb      	strh	r3, [r7, #6]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	80bb      	strh	r3, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <BSP_LCD_DrawHLine+0x70>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <BSP_LCD_DrawHLine+0x74>)
 8002c04:	2134      	movs	r1, #52	; 0x34
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	335c      	adds	r3, #92	; 0x5c
 8002c0e:	681c      	ldr	r4, [r3, #0]
 8002c10:	f7ff fdec 	bl	80027ec <BSP_LCD_GetXSize>
 8002c14:	4602      	mov	r2, r0
 8002c16:	88bb      	ldrh	r3, [r7, #4]
 8002c18:	fb03 f202 	mul.w	r2, r3, r2
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4423      	add	r3, r4
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <BSP_LCD_DrawHLine+0x70>)
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	68fc      	ldr	r4, [r7, #12]
 8002c2c:	887d      	ldrh	r5, [r7, #2]
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <BSP_LCD_DrawHLine+0x70>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	490b      	ldr	r1, [pc, #44]	; (8002c60 <BSP_LCD_DrawHLine+0x78>)
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	2300      	movs	r3, #0
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2301      	movs	r3, #1
 8002c48:	462a      	mov	r2, r5
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	f000 fa12 	bl	8003074 <FillBuffer>
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bdb0      	pop	{r4, r5, r7, pc}
 8002c58:	200001b0 	.word	0x200001b0
 8002c5c:	20000524 	.word	0x20000524
 8002c60:	200001b4 	.word	0x200001b4

08002c64 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	80fb      	strh	r3, [r7, #6]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	80bb      	strh	r3, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002c7a:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <BSP_LCD_DrawVLine+0x78>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <BSP_LCD_DrawVLine+0x7c>)
 8002c80:	2134      	movs	r1, #52	; 0x34
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	335c      	adds	r3, #92	; 0x5c
 8002c8a:	681c      	ldr	r4, [r3, #0]
 8002c8c:	f7ff fdae 	bl	80027ec <BSP_LCD_GetXSize>
 8002c90:	4602      	mov	r2, r0
 8002c92:	88bb      	ldrh	r3, [r7, #4]
 8002c94:	fb03 f202 	mul.w	r2, r3, r2
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4423      	add	r3, r4
 8002ca0:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <BSP_LCD_DrawVLine+0x78>)
 8002ca4:	681c      	ldr	r4, [r3, #0]
 8002ca6:	68fd      	ldr	r5, [r7, #12]
 8002ca8:	887e      	ldrh	r6, [r7, #2]
 8002caa:	f7ff fd9f 	bl	80027ec <BSP_LCD_GetXSize>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	1e59      	subs	r1, r3, #1
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <BSP_LCD_DrawVLine+0x78>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	480b      	ldr	r0, [pc, #44]	; (8002ce4 <BSP_LCD_DrawVLine+0x80>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4403      	add	r3, r0
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	9100      	str	r1, [sp, #0]
 8002cc8:	4633      	mov	r3, r6
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4629      	mov	r1, r5
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f000 f9d0 	bl	8003074 <FillBuffer>
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cdc:	200001b0 	.word	0x200001b0
 8002ce0:	20000524 	.word	0x20000524
 8002ce4:	200001b4 	.word	0x200001b4

08002ce8 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <BSP_LCD_DisplayOn+0x1c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002cf6:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <BSP_LCD_DisplayOn+0x1c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4798      	blx	r3
  }
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200005cc 	.word	0x200005cc

08002d08 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08e      	sub	sp, #56	; 0x38
 8002d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	4b61      	ldr	r3, [pc, #388]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4a60      	ldr	r2, [pc, #384]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	4b5e      	ldr	r3, [pc, #376]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d26:	623b      	str	r3, [r7, #32]
 8002d28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	4b5a      	ldr	r3, [pc, #360]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a59      	ldr	r2, [pc, #356]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b57      	ldr	r3, [pc, #348]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a52      	ldr	r2, [pc, #328]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	4b4c      	ldr	r3, [pc, #304]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a4b      	ldr	r2, [pc, #300]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	4b45      	ldr	r3, [pc, #276]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a44      	ldr	r2, [pc, #272]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b42      	ldr	r3, [pc, #264]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b3e      	ldr	r3, [pc, #248]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a3d      	ldr	r2, [pc, #244]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002da4:	f043 0308 	orr.w	r3, r3, #8
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a36      	ldr	r2, [pc, #216]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002dc0:	f043 0320 	orr.w	r3, r3, #32
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a2f      	ldr	r2, [pc, #188]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <BSP_LCD_MspInit+0x190>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002dee:	f641 0358 	movw	r3, #6232	; 0x1858
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002df4:	2302      	movs	r3, #2
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002e00:	230e      	movs	r3, #14
 8002e02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4824      	ldr	r0, [pc, #144]	; (8002e9c <BSP_LCD_MspInit+0x194>)
 8002e0c:	f001 f9ee 	bl	80041ec <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002e10:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4820      	ldr	r0, [pc, #128]	; (8002ea0 <BSP_LCD_MspInit+0x198>)
 8002e1e:	f001 f9e5 	bl	80041ec <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002e22:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	481d      	ldr	r0, [pc, #116]	; (8002ea4 <BSP_LCD_MspInit+0x19c>)
 8002e30:	f001 f9dc 	bl	80041ec <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002e34:	2348      	movs	r3, #72	; 0x48
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	481a      	ldr	r0, [pc, #104]	; (8002ea8 <BSP_LCD_MspInit+0x1a0>)
 8002e40:	f001 f9d4 	bl	80041ec <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4816      	ldr	r0, [pc, #88]	; (8002eac <BSP_LCD_MspInit+0x1a4>)
 8002e52:	f001 f9cb 	bl	80041ec <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002e56:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e60:	4619      	mov	r1, r3
 8002e62:	4813      	ldr	r0, [pc, #76]	; (8002eb0 <BSP_LCD_MspInit+0x1a8>)
 8002e64:	f001 f9c2 	bl	80041ec <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002e6c:	2309      	movs	r3, #9
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e74:	4619      	mov	r1, r3
 8002e76:	480a      	ldr	r0, [pc, #40]	; (8002ea0 <BSP_LCD_MspInit+0x198>)
 8002e78:	f001 f9b8 	bl	80041ec <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002e7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e86:	4619      	mov	r1, r3
 8002e88:	4809      	ldr	r0, [pc, #36]	; (8002eb0 <BSP_LCD_MspInit+0x1a8>)
 8002e8a:	f001 f9af 	bl	80041ec <HAL_GPIO_Init>
}
 8002e8e:	bf00      	nop
 8002e90:	3738      	adds	r7, #56	; 0x38
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40020000 	.word	0x40020000
 8002ea0:	40020400 	.word	0x40020400
 8002ea4:	40020800 	.word	0x40020800
 8002ea8:	40020c00 	.word	0x40020c00
 8002eac:	40021400 	.word	0x40021400
 8002eb0:	40021800 	.word	0x40021800

08002eb4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	603a      	str	r2, [r7, #0]
 8002ebe:	80fb      	strh	r3, [r7, #6]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <BSP_LCD_DrawPixel+0x44>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <BSP_LCD_DrawPixel+0x48>)
 8002eca:	2134      	movs	r1, #52	; 0x34
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	335c      	adds	r3, #92	; 0x5c
 8002ed4:	681c      	ldr	r4, [r3, #0]
 8002ed6:	88bd      	ldrh	r5, [r7, #4]
 8002ed8:	f7ff fc88 	bl	80027ec <BSP_LCD_GetXSize>
 8002edc:	4603      	mov	r3, r0
 8002ede:	fb03 f205 	mul.w	r2, r3, r5
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4423      	add	r3, r4
 8002eea:	461a      	mov	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6013      	str	r3, [r2, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ef8:	200001b0 	.word	0x200001b0
 8002efc:	20000524 	.word	0x20000524

08002f00 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	603a      	str	r2, [r7, #0]
 8002f0a:	80fb      	strh	r3, [r7, #6]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	2300      	movs	r3, #0
 8002f16:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002f1c:	4b53      	ldr	r3, [pc, #332]	; (800306c <DrawChar+0x16c>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4953      	ldr	r1, [pc, #332]	; (8003070 <DrawChar+0x170>)
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	88db      	ldrh	r3, [r3, #6]
 8002f32:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002f34:	4b4d      	ldr	r3, [pc, #308]	; (800306c <DrawChar+0x16c>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	494d      	ldr	r1, [pc, #308]	; (8003070 <DrawChar+0x170>)
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	3308      	adds	r3, #8
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	889b      	ldrh	r3, [r3, #4]
 8002f4a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002f4c:	8a3b      	ldrh	r3, [r7, #16]
 8002f4e:	3307      	adds	r3, #7
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	da00      	bge.n	8002f56 <DrawChar+0x56>
 8002f54:	3307      	adds	r3, #7
 8002f56:	10db      	asrs	r3, r3, #3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	8a3b      	ldrh	r3, [r7, #16]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e076      	b.n	800305a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002f6c:	8a3b      	ldrh	r3, [r7, #16]
 8002f6e:	3307      	adds	r3, #7
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	da00      	bge.n	8002f76 <DrawChar+0x76>
 8002f74:	3307      	adds	r3, #7
 8002f76:	10db      	asrs	r3, r3, #3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fb03 f302 	mul.w	r3, r3, r2
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002f86:	8a3b      	ldrh	r3, [r7, #16]
 8002f88:	3307      	adds	r3, #7
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	da00      	bge.n	8002f90 <DrawChar+0x90>
 8002f8e:	3307      	adds	r3, #7
 8002f90:	10db      	asrs	r3, r3, #3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d002      	beq.n	8002f9c <DrawChar+0x9c>
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d004      	beq.n	8002fa4 <DrawChar+0xa4>
 8002f9a:	e00c      	b.n	8002fb6 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	617b      	str	r3, [r7, #20]
      break;
 8002fa2:	e016      	b.n	8002fd2 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	3201      	adds	r2, #1
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
      break;
 8002fb4:	e00d      	b.n	8002fd2 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	041a      	lsls	r2, r3, #16
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	3202      	adds	r2, #2
 8002fca:	7812      	ldrb	r2, [r2, #0]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
      break;
 8002fd0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e036      	b.n	8003046 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002fd8:	8a3a      	ldrh	r2, [r7, #16]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	1ad2      	subs	r2, r2, r3
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d012      	beq.n	800301a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	b298      	uxth	r0, r3
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <DrawChar+0x16c>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	491b      	ldr	r1, [pc, #108]	; (8003070 <DrawChar+0x170>)
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	88bb      	ldrh	r3, [r7, #4]
 8003012:	4619      	mov	r1, r3
 8003014:	f7ff ff4e 	bl	8002eb4 <BSP_LCD_DrawPixel>
 8003018:	e012      	b.n	8003040 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	b29a      	uxth	r2, r3
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	4413      	add	r3, r2
 8003022:	b298      	uxth	r0, r3
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <DrawChar+0x16c>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4911      	ldr	r1, [pc, #68]	; (8003070 <DrawChar+0x170>)
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	3304      	adds	r3, #4
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	88bb      	ldrh	r3, [r7, #4]
 800303a:	4619      	mov	r1, r3
 800303c:	f7ff ff3a 	bl	8002eb4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	3301      	adds	r3, #1
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	8a3b      	ldrh	r3, [r7, #16]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	429a      	cmp	r2, r3
 800304c:	d3c4      	bcc.n	8002fd8 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800304e:	88bb      	ldrh	r3, [r7, #4]
 8003050:	3301      	adds	r3, #1
 8003052:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3301      	adds	r3, #1
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	8a7b      	ldrh	r3, [r7, #18]
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	429a      	cmp	r2, r3
 8003060:	d384      	bcc.n	8002f6c <DrawChar+0x6c>
  }
}
 8003062:	bf00      	nop
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	200001b0 	.word	0x200001b0
 8003070:	200001b4 	.word	0x200001b4

08003074 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <FillBuffer+0x68>)
 8003084:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003088:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800308a:	4b14      	ldr	r3, [pc, #80]	; (80030dc <FillBuffer+0x68>)
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003090:	4a12      	ldr	r2, [pc, #72]	; (80030dc <FillBuffer+0x68>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003096:	4b11      	ldr	r3, [pc, #68]	; (80030dc <FillBuffer+0x68>)
 8003098:	4a11      	ldr	r2, [pc, #68]	; (80030e0 <FillBuffer+0x6c>)
 800309a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800309c:	480f      	ldr	r0, [pc, #60]	; (80030dc <FillBuffer+0x68>)
 800309e:	f000 fd09 	bl	8003ab4 <HAL_DMA2D_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d115      	bne.n	80030d4 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80030a8:	68f9      	ldr	r1, [r7, #12]
 80030aa:	480c      	ldr	r0, [pc, #48]	; (80030dc <FillBuffer+0x68>)
 80030ac:	f000 ff70 	bl	8003f90 <HAL_DMA2D_ConfigLayer>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10e      	bne.n	80030d4 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69f9      	ldr	r1, [r7, #28]
 80030c0:	4806      	ldr	r0, [pc, #24]	; (80030dc <FillBuffer+0x68>)
 80030c2:	f000 fd40 	bl	8003b46 <HAL_DMA2D_Start>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d103      	bne.n	80030d4 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80030cc:	210a      	movs	r1, #10
 80030ce:	4803      	ldr	r0, [pc, #12]	; (80030dc <FillBuffer+0x68>)
 80030d0:	f000 fd64 	bl	8003b9c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000140 	.word	0x20000140
 80030e0:	4002b000 	.word	0x4002b000

080030e4 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80030e8:	4b29      	ldr	r3, [pc, #164]	; (8003190 <BSP_SDRAM_Init+0xac>)
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <BSP_SDRAM_Init+0xb0>)
 80030ec:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80030ee:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <BSP_SDRAM_Init+0xb4>)
 80030f0:	2202      	movs	r2, #2
 80030f2:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <BSP_SDRAM_Init+0xb4>)
 80030f6:	2207      	movs	r2, #7
 80030f8:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80030fa:	4b27      	ldr	r3, [pc, #156]	; (8003198 <BSP_SDRAM_Init+0xb4>)
 80030fc:	2204      	movs	r2, #4
 80030fe:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003100:	4b25      	ldr	r3, [pc, #148]	; (8003198 <BSP_SDRAM_Init+0xb4>)
 8003102:	2207      	movs	r2, #7
 8003104:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003106:	4b24      	ldr	r3, [pc, #144]	; (8003198 <BSP_SDRAM_Init+0xb4>)
 8003108:	2202      	movs	r2, #2
 800310a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800310c:	4b22      	ldr	r3, [pc, #136]	; (8003198 <BSP_SDRAM_Init+0xb4>)
 800310e:	2202      	movs	r2, #2
 8003110:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <BSP_SDRAM_Init+0xb4>)
 8003114:	2202      	movs	r2, #2
 8003116:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <BSP_SDRAM_Init+0xac>)
 800311a:	2201      	movs	r2, #1
 800311c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800311e:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <BSP_SDRAM_Init+0xac>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003124:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <BSP_SDRAM_Init+0xac>)
 8003126:	2204      	movs	r2, #4
 8003128:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800312a:	4b19      	ldr	r3, [pc, #100]	; (8003190 <BSP_SDRAM_Init+0xac>)
 800312c:	2210      	movs	r2, #16
 800312e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <BSP_SDRAM_Init+0xac>)
 8003132:	2240      	movs	r2, #64	; 0x40
 8003134:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <BSP_SDRAM_Init+0xac>)
 8003138:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800313c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <BSP_SDRAM_Init+0xac>)
 8003140:	2200      	movs	r2, #0
 8003142:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <BSP_SDRAM_Init+0xac>)
 8003146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800314a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800314c:	4b10      	ldr	r3, [pc, #64]	; (8003190 <BSP_SDRAM_Init+0xac>)
 800314e:	2200      	movs	r2, #0
 8003150:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003152:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <BSP_SDRAM_Init+0xac>)
 8003154:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003158:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800315a:	2100      	movs	r1, #0
 800315c:	480c      	ldr	r0, [pc, #48]	; (8003190 <BSP_SDRAM_Init+0xac>)
 800315e:	f000 f87f 	bl	8003260 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003162:	490d      	ldr	r1, [pc, #52]	; (8003198 <BSP_SDRAM_Init+0xb4>)
 8003164:	480a      	ldr	r0, [pc, #40]	; (8003190 <BSP_SDRAM_Init+0xac>)
 8003166:	f002 fd2f 	bl	8005bc8 <HAL_SDRAM_Init>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <BSP_SDRAM_Init+0xb8>)
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e002      	b.n	800317e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003178:	4b08      	ldr	r3, [pc, #32]	; (800319c <BSP_SDRAM_Init+0xb8>)
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800317e:	f240 506a 	movw	r0, #1386	; 0x56a
 8003182:	f000 f80d 	bl	80031a0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <BSP_SDRAM_Init+0xb8>)
 8003188:	781b      	ldrb	r3, [r3, #0]
}
 800318a:	4618      	mov	r0, r3
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200001cc 	.word	0x200001cc
 8003194:	a0000140 	.word	0xa0000140
 8003198:	20000200 	.word	0x20000200
 800319c:	20000050 	.word	0x20000050

080031a0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80031ac:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80031b2:	4b29      	ldr	r3, [pc, #164]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031b4:	2208      	movs	r2, #8
 80031b6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80031b8:	4b27      	ldr	r3, [pc, #156]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80031be:	4b26      	ldr	r3, [pc, #152]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80031c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c8:	4923      	ldr	r1, [pc, #140]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031ca:	4824      	ldr	r0, [pc, #144]	; (800325c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80031cc:	f002 fd30 	bl	8005c30 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80031d0:	2001      	movs	r0, #1
 80031d2:	f000 f993 	bl	80034fc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031d8:	2202      	movs	r2, #2
 80031da:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80031dc:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031de:	2208      	movs	r2, #8
 80031e0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80031ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031f2:	4919      	ldr	r1, [pc, #100]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031f4:	4819      	ldr	r0, [pc, #100]	; (800325c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80031f6:	f002 fd1b 	bl	8005c30 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80031fa:	4b17      	ldr	r3, [pc, #92]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031fc:	2203      	movs	r2, #3
 80031fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003200:	4b15      	ldr	r3, [pc, #84]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003202:	2208      	movs	r2, #8
 8003204:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003206:	4b14      	ldr	r3, [pc, #80]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003208:	2204      	movs	r2, #4
 800320a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800320e:	2200      	movs	r2, #0
 8003210:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003216:	4910      	ldr	r1, [pc, #64]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003218:	4810      	ldr	r0, [pc, #64]	; (800325c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800321a:	f002 fd09 	bl	8005c30 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800321e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003222:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003226:	2204      	movs	r2, #4
 8003228:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800322c:	2208      	movs	r2, #8
 800322e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003232:	2201      	movs	r2, #1
 8003234:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a07      	ldr	r2, [pc, #28]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800323a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800323c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003240:	4905      	ldr	r1, [pc, #20]	; (8003258 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003242:	4806      	ldr	r0, [pc, #24]	; (800325c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003244:	f002 fcf4 	bl	8005c30 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4804      	ldr	r0, [pc, #16]	; (800325c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800324c:	f002 fd1b 	bl	8005c86 <HAL_SDRAM_ProgramRefreshRate>
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	2000021c 	.word	0x2000021c
 800325c:	200001cc 	.word	0x200001cc

08003260 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b090      	sub	sp, #64	; 0x40
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80ec 	beq.w	800344a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	62bb      	str	r3, [r7, #40]	; 0x28
 8003276:	4b77      	ldr	r3, [pc, #476]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	4a76      	ldr	r2, [pc, #472]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6393      	str	r3, [r2, #56]	; 0x38
 8003282:	4b74      	ldr	r3, [pc, #464]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
 8003292:	4b70      	ldr	r3, [pc, #448]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a6f      	ldr	r2, [pc, #444]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 8003298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b6d      	ldr	r3, [pc, #436]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	623b      	str	r3, [r7, #32]
 80032ae:	4b69      	ldr	r3, [pc, #420]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a68      	ldr	r2, [pc, #416]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ba:	4b66      	ldr	r3, [pc, #408]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	623b      	str	r3, [r7, #32]
 80032c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	4b62      	ldr	r3, [pc, #392]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	4a61      	ldr	r2, [pc, #388]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 80032d0:	f043 0304 	orr.w	r3, r3, #4
 80032d4:	6313      	str	r3, [r2, #48]	; 0x30
 80032d6:	4b5f      	ldr	r3, [pc, #380]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	61fb      	str	r3, [r7, #28]
 80032e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	4b5b      	ldr	r3, [pc, #364]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a5a      	ldr	r2, [pc, #360]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 80032ec:	f043 0308 	orr.w	r3, r3, #8
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b58      	ldr	r3, [pc, #352]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	4b54      	ldr	r3, [pc, #336]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a53      	ldr	r2, [pc, #332]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 8003308:	f043 0310 	orr.w	r3, r3, #16
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b51      	ldr	r3, [pc, #324]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	4b4d      	ldr	r3, [pc, #308]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a4c      	ldr	r2, [pc, #304]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 8003324:	f043 0320 	orr.w	r3, r3, #32
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b46      	ldr	r3, [pc, #280]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	4a45      	ldr	r2, [pc, #276]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 8003340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
 8003346:	4b43      	ldr	r3, [pc, #268]	; (8003454 <BSP_SDRAM_MspInit+0x1f4>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003356:	2302      	movs	r3, #2
 8003358:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800335e:	230c      	movs	r3, #12
 8003360:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003362:	2360      	movs	r3, #96	; 0x60
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800336a:	4619      	mov	r1, r3
 800336c:	483a      	ldr	r0, [pc, #232]	; (8003458 <BSP_SDRAM_MspInit+0x1f8>)
 800336e:	f000 ff3d 	bl	80041ec <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003372:	2301      	movs	r3, #1
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800337a:	4619      	mov	r1, r3
 800337c:	4837      	ldr	r0, [pc, #220]	; (800345c <BSP_SDRAM_MspInit+0x1fc>)
 800337e:	f000 ff35 	bl	80041ec <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003382:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800338c:	4619      	mov	r1, r3
 800338e:	4834      	ldr	r0, [pc, #208]	; (8003460 <BSP_SDRAM_MspInit+0x200>)
 8003390:	f000 ff2c 	bl	80041ec <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003394:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800339a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800339e:	4619      	mov	r1, r3
 80033a0:	4830      	ldr	r0, [pc, #192]	; (8003464 <BSP_SDRAM_MspInit+0x204>)
 80033a2:	f000 ff23 	bl	80041ec <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80033a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80033ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033b0:	4619      	mov	r1, r3
 80033b2:	482d      	ldr	r0, [pc, #180]	; (8003468 <BSP_SDRAM_MspInit+0x208>)
 80033b4:	f000 ff1a 	bl	80041ec <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80033b8:	f248 1333 	movw	r3, #33075	; 0x8133
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80033be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033c2:	4619      	mov	r1, r3
 80033c4:	4829      	ldr	r0, [pc, #164]	; (800346c <BSP_SDRAM_MspInit+0x20c>)
 80033c6:	f000 ff11 	bl	80041ec <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80033ca:	4b29      	ldr	r3, [pc, #164]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80033d0:	4b27      	ldr	r3, [pc, #156]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80033d6:	4b26      	ldr	r3, [pc, #152]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 80033d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033dc:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 80033e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033e4:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 80033e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033ec:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 80033f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033f4:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80033fc:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 80033fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003402:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003404:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 8003406:	2200      	movs	r2, #0
 8003408:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800340a:	4b19      	ldr	r3, [pc, #100]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 800340c:	2203      	movs	r2, #3
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003410:	4b17      	ldr	r3, [pc, #92]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 8003412:	2200      	movs	r2, #0
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003416:	4b16      	ldr	r3, [pc, #88]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800341c:	4b14      	ldr	r3, [pc, #80]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 800341e:	4a15      	ldr	r2, [pc, #84]	; (8003474 <BSP_SDRAM_MspInit+0x214>)
 8003420:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a12      	ldr	r2, [pc, #72]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
 8003428:	4a11      	ldr	r2, [pc, #68]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800342e:	4810      	ldr	r0, [pc, #64]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 8003430:	f000 fa32 	bl	8003898 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003434:	480e      	ldr	r0, [pc, #56]	; (8003470 <BSP_SDRAM_MspInit+0x210>)
 8003436:	f000 f981 	bl	800373c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	210f      	movs	r1, #15
 800343e:	2038      	movs	r0, #56	; 0x38
 8003440:	f000 f936 	bl	80036b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003444:	2038      	movs	r0, #56	; 0x38
 8003446:	f000 f94f 	bl	80036e8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800344a:	bf00      	nop
 800344c:	3740      	adds	r7, #64	; 0x40
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	40020400 	.word	0x40020400
 800345c:	40020800 	.word	0x40020800
 8003460:	40020c00 	.word	0x40020c00
 8003464:	40021000 	.word	0x40021000
 8003468:	40021400 	.word	0x40021400
 800346c:	40021800 	.word	0x40021800
 8003470:	2000022c 	.word	0x2000022c
 8003474:	40026410 	.word	0x40026410

08003478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <HAL_Init+0x40>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a0d      	ldr	r2, [pc, #52]	; (80034b8 <HAL_Init+0x40>)
 8003482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_Init+0x40>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_Init+0x40>)
 800348e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <HAL_Init+0x40>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a07      	ldr	r2, [pc, #28]	; (80034b8 <HAL_Init+0x40>)
 800349a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a0:	2003      	movs	r0, #3
 80034a2:	f000 f8fa 	bl	800369a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7fe fcd0 	bl	8001e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034ac:	f7fe fa22 	bl	80018f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023c00 	.word	0x40023c00

080034bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_IncTick+0x20>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_IncTick+0x24>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4413      	add	r3, r2
 80034cc:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <HAL_IncTick+0x24>)
 80034ce:	6013      	str	r3, [r2, #0]
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000058 	.word	0x20000058
 80034e0:	200005d0 	.word	0x200005d0

080034e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return uwTick;
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_GetTick+0x14>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	200005d0 	.word	0x200005d0

080034fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003504:	f7ff ffee 	bl	80034e4 <HAL_GetTick>
 8003508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d005      	beq.n	8003522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_Delay+0x40>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003522:	bf00      	nop
 8003524:	f7ff ffde 	bl	80034e4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	429a      	cmp	r2, r3
 8003532:	d8f7      	bhi.n	8003524 <HAL_Delay+0x28>
  {
  }
}
 8003534:	bf00      	nop
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000058 	.word	0x20000058

08003540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800355c:	4013      	ands	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800356c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003572:	4a04      	ldr	r2, [pc, #16]	; (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	60d3      	str	r3, [r2, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <__NVIC_GetPriorityGrouping+0x18>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	f003 0307 	and.w	r3, r3, #7
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	db0b      	blt.n	80035ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	4907      	ldr	r1, [pc, #28]	; (80035dc <__NVIC_EnableIRQ+0x38>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	2001      	movs	r0, #1
 80035c6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000e100 	.word	0xe000e100

080035e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	db0a      	blt.n	800360a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	490c      	ldr	r1, [pc, #48]	; (800362c <__NVIC_SetPriority+0x4c>)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	0112      	lsls	r2, r2, #4
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	440b      	add	r3, r1
 8003604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003608:	e00a      	b.n	8003620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4908      	ldr	r1, [pc, #32]	; (8003630 <__NVIC_SetPriority+0x50>)
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	3b04      	subs	r3, #4
 8003618:	0112      	lsls	r2, r2, #4
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	440b      	add	r3, r1
 800361e:	761a      	strb	r2, [r3, #24]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000e100 	.word	0xe000e100
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	; 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f1c3 0307 	rsb	r3, r3, #7
 800364e:	2b04      	cmp	r3, #4
 8003650:	bf28      	it	cs
 8003652:	2304      	movcs	r3, #4
 8003654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3304      	adds	r3, #4
 800365a:	2b06      	cmp	r3, #6
 800365c:	d902      	bls.n	8003664 <NVIC_EncodePriority+0x30>
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3b03      	subs	r3, #3
 8003662:	e000      	b.n	8003666 <NVIC_EncodePriority+0x32>
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003668:	f04f 32ff 	mov.w	r2, #4294967295
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43da      	mvns	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	401a      	ands	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800367c:	f04f 31ff 	mov.w	r1, #4294967295
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	43d9      	mvns	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	4313      	orrs	r3, r2
         );
}
 800368e:	4618      	mov	r0, r3
 8003690:	3724      	adds	r7, #36	; 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ff4c 	bl	8003540 <__NVIC_SetPriorityGrouping>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036c2:	f7ff ff61 	bl	8003588 <__NVIC_GetPriorityGrouping>
 80036c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	6978      	ldr	r0, [r7, #20]
 80036ce:	f7ff ffb1 	bl	8003634 <NVIC_EncodePriority>
 80036d2:	4602      	mov	r2, r0
 80036d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff ff80 	bl	80035e0 <__NVIC_SetPriority>
}
 80036e0:	bf00      	nop
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff ff54 	bl	80035a4 <__NVIC_EnableIRQ>
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e00e      	b.n	8003734 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	795b      	ldrb	r3, [r3, #5]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fe f90c 	bl	8001944 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003748:	f7ff fecc 	bl	80034e4 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e099      	b.n	800388c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003778:	e00f      	b.n	800379a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800377a:	f7ff feb3 	bl	80034e4 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b05      	cmp	r3, #5
 8003786:	d908      	bls.n	800379a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2203      	movs	r2, #3
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e078      	b.n	800388c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e8      	bne.n	800377a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4b38      	ldr	r3, [pc, #224]	; (8003894 <HAL_DMA_Init+0x158>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d107      	bne.n	8003804 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	4313      	orrs	r3, r2
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0307 	bic.w	r3, r3, #7
 800381a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	2b04      	cmp	r3, #4
 800382c:	d117      	bne.n	800385e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00e      	beq.n	800385e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f8bd 	bl	80039c0 <DMA_CheckFifoParam>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2240      	movs	r2, #64	; 0x40
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800385a:	2301      	movs	r3, #1
 800385c:	e016      	b.n	800388c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f874 	bl	8003954 <DMA_CalcBaseAndBitshift>
 800386c:	4603      	mov	r3, r0
 800386e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003874:	223f      	movs	r2, #63	; 0x3f
 8003876:	409a      	lsls	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	f010803f 	.word	0xf010803f

08003898 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e050      	b.n	800394c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d101      	bne.n	80038ba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
 80038b8:	e048      	b.n	800394c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2200      	movs	r2, #0
 80038d8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2200      	movs	r2, #0
 80038e8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2221      	movs	r2, #33	; 0x21
 80038f8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f82a 	bl	8003954 <DMA_CalcBaseAndBitshift>
 8003900:	4603      	mov	r3, r0
 8003902:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	223f      	movs	r2, #63	; 0x3f
 800392e:	409a      	lsls	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	3b10      	subs	r3, #16
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800396e:	4a13      	ldr	r2, [pc, #76]	; (80039bc <DMA_CalcBaseAndBitshift+0x68>)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b03      	cmp	r3, #3
 8003980:	d909      	bls.n	8003996 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	1d1a      	adds	r2, r3, #4
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	659a      	str	r2, [r3, #88]	; 0x58
 8003994:	e007      	b.n	80039a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800399e:	f023 0303 	bic.w	r3, r3, #3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	aaaaaaab 	.word	0xaaaaaaab
 80039bc:	0800a788 	.word	0x0800a788

080039c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d11f      	bne.n	8003a1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d855      	bhi.n	8003a8c <DMA_CheckFifoParam+0xcc>
 80039e0:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <DMA_CheckFifoParam+0x28>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	080039f9 	.word	0x080039f9
 80039ec:	08003a0b 	.word	0x08003a0b
 80039f0:	080039f9 	.word	0x080039f9
 80039f4:	08003a8d 	.word	0x08003a8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d045      	beq.n	8003a90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a08:	e042      	b.n	8003a90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a12:	d13f      	bne.n	8003a94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a18:	e03c      	b.n	8003a94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a22:	d121      	bne.n	8003a68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d836      	bhi.n	8003a98 <DMA_CheckFifoParam+0xd8>
 8003a2a:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <DMA_CheckFifoParam+0x70>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a47 	.word	0x08003a47
 8003a38:	08003a41 	.word	0x08003a41
 8003a3c:	08003a59 	.word	0x08003a59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      break;
 8003a44:	e02f      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d024      	beq.n	8003a9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a56:	e021      	b.n	8003a9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a60:	d11e      	bne.n	8003aa0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a66:	e01b      	b.n	8003aa0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d902      	bls.n	8003a74 <DMA_CheckFifoParam+0xb4>
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d003      	beq.n	8003a7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a72:	e018      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      break;
 8003a78:	e015      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00e      	beq.n	8003aa4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8a:	e00b      	b.n	8003aa4 <DMA_CheckFifoParam+0xe4>
      break;
 8003a8c:	bf00      	nop
 8003a8e:	e00a      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003a90:	bf00      	nop
 8003a92:	e008      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003a94:	bf00      	nop
 8003a96:	e006      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003a98:	bf00      	nop
 8003a9a:	e004      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003a9c:	bf00      	nop
 8003a9e:	e002      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      break;   
 8003aa0:	bf00      	nop
 8003aa2:	e000      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003aa4:	bf00      	nop
    }
  } 
  
  return status; 
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e03b      	b.n	8003b3e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd ff54 	bl	8001988 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	f023 0107 	bic.w	r1, r3, #7
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68d1      	ldr	r1, [r2, #12]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b086      	sub	sp, #24
 8003b4a:	af02      	add	r7, sp, #8
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	607a      	str	r2, [r7, #4]
 8003b52:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_DMA2D_Start+0x1c>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e018      	b.n	8003b94 <HAL_DMA2D_Start+0x4e>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fa99 	bl	80040b4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d056      	beq.n	8003c66 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003bb8:	f7ff fc94 	bl	80034e4 <HAL_GetTick>
 8003bbc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003bbe:	e04b      	b.n	8003c58 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d023      	beq.n	8003c1a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	f043 0202 	orr.w	r2, r3, #2
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2221      	movs	r2, #33	; 0x21
 8003c04:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2204      	movs	r2, #4
 8003c0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0a5      	b.n	8003d66 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d01a      	beq.n	8003c58 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003c22:	f7ff fc5f 	bl	80034e4 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <HAL_DMA2D_PollForTransfer+0x9c>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10f      	bne.n	8003c58 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3c:	f043 0220 	orr.w	r2, r3, #32
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2203      	movs	r2, #3
 8003c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e086      	b.n	8003d66 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ac      	beq.n	8003bc0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d061      	beq.n	8003d4c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c88:	f7ff fc2c 	bl	80034e4 <HAL_GetTick>
 8003c8c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003c8e:	e056      	b.n	8003d3e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d02e      	beq.n	8003d00 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb0:	f043 0204 	orr.w	r2, r3, #4
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	f043 0202 	orr.w	r2, r3, #2
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	f043 0201 	orr.w	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2229      	movs	r2, #41	; 0x29
 8003cea:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2204      	movs	r2, #4
 8003cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e032      	b.n	8003d66 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d06:	d01a      	beq.n	8003d3e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003d08:	f7ff fbec 	bl	80034e4 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d302      	bcc.n	8003d1e <HAL_DMA2D_PollForTransfer+0x182>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10f      	bne.n	8003d3e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e013      	b.n	8003d66 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0a1      	beq.n	8003c90 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2212      	movs	r2, #18
 8003d52:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d026      	beq.n	8003dde <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d021      	beq.n	8003dde <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003da8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	f043 0201 	orr.w	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d026      	beq.n	8003e36 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d021      	beq.n	8003e36 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e00:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2220      	movs	r2, #32
 8003e08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	f043 0202 	orr.w	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2204      	movs	r2, #4
 8003e1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d026      	beq.n	8003e8e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d021      	beq.n	8003e8e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e58:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2208      	movs	r2, #8
 8003e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e66:	f043 0204 	orr.w	r2, r3, #4
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2204      	movs	r2, #4
 8003e72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00e      	beq.n	8003ec0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f853 	bl	8003f66 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d024      	beq.n	8003f14 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01f      	beq.n	8003f14 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ee2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01f      	beq.n	8003f5e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01a      	beq.n	8003f5e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f36:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f80e 	bl	8003f7a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_DMA2D_ConfigLayer+0x20>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e079      	b.n	80040a4 <HAL_DMA2D_ConfigLayer+0x114>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	3318      	adds	r3, #24
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4413      	add	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003fda:	4b35      	ldr	r3, [pc, #212]	; (80040b0 <HAL_DMA2D_ConfigLayer+0x120>)
 8003fdc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b0a      	cmp	r3, #10
 8003fe4:	d003      	beq.n	8003fee <HAL_DMA2D_ConfigLayer+0x5e>
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b09      	cmp	r3, #9
 8003fec:	d107      	bne.n	8003ffe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	e005      	b.n	800400a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	061b      	lsls	r3, r3, #24
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4313      	orrs	r3, r2
 8004008:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d120      	bne.n	8004052 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	43db      	mvns	r3, r3
 800401a:	ea02 0103 	and.w	r1, r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	430a      	orrs	r2, r1
 8004026:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b0a      	cmp	r3, #10
 8004038:	d003      	beq.n	8004042 <HAL_DMA2D_ConfigLayer+0xb2>
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b09      	cmp	r3, #9
 8004040:	d127      	bne.n	8004092 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800404e:	629a      	str	r2, [r3, #40]	; 0x28
 8004050:	e01f      	b.n	8004092 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	43db      	mvns	r3, r3
 800405c:	ea02 0103 	and.w	r1, r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	430a      	orrs	r2, r1
 8004068:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b0a      	cmp	r3, #10
 800407a:	d003      	beq.n	8004084 <HAL_DMA2D_ConfigLayer+0xf4>
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b09      	cmp	r3, #9
 8004082:	d106      	bne.n	8004092 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004090:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	ff03000f 	.word	0xff03000f

080040b4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b08b      	sub	sp, #44	; 0x2c
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	041a      	lsls	r2, r3, #16
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	431a      	orrs	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040ec:	d174      	bne.n	80041d8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80040f4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040fc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004104:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d108      	bne.n	8004126 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	431a      	orrs	r2, r3
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	4313      	orrs	r3, r2
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
 8004124:	e053      	b.n	80041ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d106      	bne.n	800413c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	4313      	orrs	r3, r2
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
 800413a:	e048      	b.n	80041ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d111      	bne.n	8004168 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	0cdb      	lsrs	r3, r3, #19
 8004148:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	0a9b      	lsrs	r3, r3, #10
 800414e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	08db      	lsrs	r3, r3, #3
 8004154:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	02db      	lsls	r3, r3, #11
 800415e:	4313      	orrs	r3, r2
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
 8004166:	e032      	b.n	80041ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d117      	bne.n	80041a0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	0fdb      	lsrs	r3, r3, #31
 8004174:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	0cdb      	lsrs	r3, r3, #19
 800417a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	0adb      	lsrs	r3, r3, #11
 8004180:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	08db      	lsrs	r3, r3, #3
 8004186:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	029b      	lsls	r3, r3, #10
 8004190:	431a      	orrs	r2, r3
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	03db      	lsls	r3, r3, #15
 8004196:	4313      	orrs	r3, r2
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
 800419e:	e016      	b.n	80041ce <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	0f1b      	lsrs	r3, r3, #28
 80041a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	0d1b      	lsrs	r3, r3, #20
 80041aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	0b1b      	lsrs	r3, r3, #12
 80041b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	011a      	lsls	r2, r3, #4
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	431a      	orrs	r2, r3
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	031b      	lsls	r3, r3, #12
 80041c6:	4313      	orrs	r3, r2
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80041d6:	e003      	b.n	80041e0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	60da      	str	r2, [r3, #12]
}
 80041e0:	bf00      	nop
 80041e2:	372c      	adds	r7, #44	; 0x2c
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b089      	sub	sp, #36	; 0x24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	e177      	b.n	80044f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004208:	2201      	movs	r2, #1
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4013      	ands	r3, r2
 800421a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	429a      	cmp	r2, r3
 8004222:	f040 8166 	bne.w	80044f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d00b      	beq.n	8004246 <HAL_GPIO_Init+0x5a>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d007      	beq.n	8004246 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800423a:	2b11      	cmp	r3, #17
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b12      	cmp	r3, #18
 8004244:	d130      	bne.n	80042a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	2203      	movs	r2, #3
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800427c:	2201      	movs	r2, #1
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43db      	mvns	r3, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 0201 	and.w	r2, r3, #1
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	2203      	movs	r2, #3
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d003      	beq.n	80042e8 <HAL_GPIO_Init+0xfc>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b12      	cmp	r3, #18
 80042e6:	d123      	bne.n	8004330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	08da      	lsrs	r2, r3, #3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3208      	adds	r2, #8
 80042f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	220f      	movs	r2, #15
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	08da      	lsrs	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3208      	adds	r2, #8
 800432a:	69b9      	ldr	r1, [r7, #24]
 800432c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	2203      	movs	r2, #3
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 0203 	and.w	r2, r3, #3
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80c0 	beq.w	80044f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	4b65      	ldr	r3, [pc, #404]	; (800450c <HAL_GPIO_Init+0x320>)
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	4a64      	ldr	r2, [pc, #400]	; (800450c <HAL_GPIO_Init+0x320>)
 800437c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004380:	6453      	str	r3, [r2, #68]	; 0x44
 8004382:	4b62      	ldr	r3, [pc, #392]	; (800450c <HAL_GPIO_Init+0x320>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800438e:	4a60      	ldr	r2, [pc, #384]	; (8004510 <HAL_GPIO_Init+0x324>)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	089b      	lsrs	r3, r3, #2
 8004394:	3302      	adds	r3, #2
 8004396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	220f      	movs	r2, #15
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a57      	ldr	r2, [pc, #348]	; (8004514 <HAL_GPIO_Init+0x328>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d037      	beq.n	800442a <HAL_GPIO_Init+0x23e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a56      	ldr	r2, [pc, #344]	; (8004518 <HAL_GPIO_Init+0x32c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d031      	beq.n	8004426 <HAL_GPIO_Init+0x23a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a55      	ldr	r2, [pc, #340]	; (800451c <HAL_GPIO_Init+0x330>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d02b      	beq.n	8004422 <HAL_GPIO_Init+0x236>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a54      	ldr	r2, [pc, #336]	; (8004520 <HAL_GPIO_Init+0x334>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d025      	beq.n	800441e <HAL_GPIO_Init+0x232>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a53      	ldr	r2, [pc, #332]	; (8004524 <HAL_GPIO_Init+0x338>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01f      	beq.n	800441a <HAL_GPIO_Init+0x22e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a52      	ldr	r2, [pc, #328]	; (8004528 <HAL_GPIO_Init+0x33c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d019      	beq.n	8004416 <HAL_GPIO_Init+0x22a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a51      	ldr	r2, [pc, #324]	; (800452c <HAL_GPIO_Init+0x340>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_GPIO_Init+0x226>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a50      	ldr	r2, [pc, #320]	; (8004530 <HAL_GPIO_Init+0x344>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00d      	beq.n	800440e <HAL_GPIO_Init+0x222>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a4f      	ldr	r2, [pc, #316]	; (8004534 <HAL_GPIO_Init+0x348>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <HAL_GPIO_Init+0x21e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a4e      	ldr	r2, [pc, #312]	; (8004538 <HAL_GPIO_Init+0x34c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d101      	bne.n	8004406 <HAL_GPIO_Init+0x21a>
 8004402:	2309      	movs	r3, #9
 8004404:	e012      	b.n	800442c <HAL_GPIO_Init+0x240>
 8004406:	230a      	movs	r3, #10
 8004408:	e010      	b.n	800442c <HAL_GPIO_Init+0x240>
 800440a:	2308      	movs	r3, #8
 800440c:	e00e      	b.n	800442c <HAL_GPIO_Init+0x240>
 800440e:	2307      	movs	r3, #7
 8004410:	e00c      	b.n	800442c <HAL_GPIO_Init+0x240>
 8004412:	2306      	movs	r3, #6
 8004414:	e00a      	b.n	800442c <HAL_GPIO_Init+0x240>
 8004416:	2305      	movs	r3, #5
 8004418:	e008      	b.n	800442c <HAL_GPIO_Init+0x240>
 800441a:	2304      	movs	r3, #4
 800441c:	e006      	b.n	800442c <HAL_GPIO_Init+0x240>
 800441e:	2303      	movs	r3, #3
 8004420:	e004      	b.n	800442c <HAL_GPIO_Init+0x240>
 8004422:	2302      	movs	r3, #2
 8004424:	e002      	b.n	800442c <HAL_GPIO_Init+0x240>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <HAL_GPIO_Init+0x240>
 800442a:	2300      	movs	r3, #0
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	f002 0203 	and.w	r2, r2, #3
 8004432:	0092      	lsls	r2, r2, #2
 8004434:	4093      	lsls	r3, r2
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4313      	orrs	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800443c:	4934      	ldr	r1, [pc, #208]	; (8004510 <HAL_GPIO_Init+0x324>)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	089b      	lsrs	r3, r3, #2
 8004442:	3302      	adds	r3, #2
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800444a:	4b3c      	ldr	r3, [pc, #240]	; (800453c <HAL_GPIO_Init+0x350>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	43db      	mvns	r3, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4013      	ands	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800446e:	4a33      	ldr	r2, [pc, #204]	; (800453c <HAL_GPIO_Init+0x350>)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004474:	4b31      	ldr	r3, [pc, #196]	; (800453c <HAL_GPIO_Init+0x350>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	43db      	mvns	r3, r3
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	4013      	ands	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004498:	4a28      	ldr	r2, [pc, #160]	; (800453c <HAL_GPIO_Init+0x350>)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800449e:	4b27      	ldr	r3, [pc, #156]	; (800453c <HAL_GPIO_Init+0x350>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	43db      	mvns	r3, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4013      	ands	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044c2:	4a1e      	ldr	r2, [pc, #120]	; (800453c <HAL_GPIO_Init+0x350>)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044c8:	4b1c      	ldr	r3, [pc, #112]	; (800453c <HAL_GPIO_Init+0x350>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <HAL_GPIO_Init+0x350>)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3301      	adds	r3, #1
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	2b0f      	cmp	r3, #15
 80044fc:	f67f ae84 	bls.w	8004208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004500:	bf00      	nop
 8004502:	3724      	adds	r7, #36	; 0x24
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	40023800 	.word	0x40023800
 8004510:	40013800 	.word	0x40013800
 8004514:	40020000 	.word	0x40020000
 8004518:	40020400 	.word	0x40020400
 800451c:	40020800 	.word	0x40020800
 8004520:	40020c00 	.word	0x40020c00
 8004524:	40021000 	.word	0x40021000
 8004528:	40021400 	.word	0x40021400
 800452c:	40021800 	.word	0x40021800
 8004530:	40021c00 	.word	0x40021c00
 8004534:	40022000 	.word	0x40022000
 8004538:	40022400 	.word	0x40022400
 800453c:	40013c00 	.word	0x40013c00

08004540 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004552:	2300      	movs	r3, #0
 8004554:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	e0d9      	b.n	8004710 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800455c:	2201      	movs	r2, #1
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4013      	ands	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	429a      	cmp	r2, r3
 8004574:	f040 80c9 	bne.w	800470a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004578:	4a6a      	ldr	r2, [pc, #424]	; (8004724 <HAL_GPIO_DeInit+0x1e4>)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	089b      	lsrs	r3, r3, #2
 800457e:	3302      	adds	r3, #2
 8004580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004584:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	220f      	movs	r2, #15
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	4013      	ands	r3, r2
 8004598:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a62      	ldr	r2, [pc, #392]	; (8004728 <HAL_GPIO_DeInit+0x1e8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d037      	beq.n	8004612 <HAL_GPIO_DeInit+0xd2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a61      	ldr	r2, [pc, #388]	; (800472c <HAL_GPIO_DeInit+0x1ec>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d031      	beq.n	800460e <HAL_GPIO_DeInit+0xce>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a60      	ldr	r2, [pc, #384]	; (8004730 <HAL_GPIO_DeInit+0x1f0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d02b      	beq.n	800460a <HAL_GPIO_DeInit+0xca>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a5f      	ldr	r2, [pc, #380]	; (8004734 <HAL_GPIO_DeInit+0x1f4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d025      	beq.n	8004606 <HAL_GPIO_DeInit+0xc6>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a5e      	ldr	r2, [pc, #376]	; (8004738 <HAL_GPIO_DeInit+0x1f8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01f      	beq.n	8004602 <HAL_GPIO_DeInit+0xc2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a5d      	ldr	r2, [pc, #372]	; (800473c <HAL_GPIO_DeInit+0x1fc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d019      	beq.n	80045fe <HAL_GPIO_DeInit+0xbe>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a5c      	ldr	r2, [pc, #368]	; (8004740 <HAL_GPIO_DeInit+0x200>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <HAL_GPIO_DeInit+0xba>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a5b      	ldr	r2, [pc, #364]	; (8004744 <HAL_GPIO_DeInit+0x204>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00d      	beq.n	80045f6 <HAL_GPIO_DeInit+0xb6>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a5a      	ldr	r2, [pc, #360]	; (8004748 <HAL_GPIO_DeInit+0x208>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d007      	beq.n	80045f2 <HAL_GPIO_DeInit+0xb2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a59      	ldr	r2, [pc, #356]	; (800474c <HAL_GPIO_DeInit+0x20c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <HAL_GPIO_DeInit+0xae>
 80045ea:	2309      	movs	r3, #9
 80045ec:	e012      	b.n	8004614 <HAL_GPIO_DeInit+0xd4>
 80045ee:	230a      	movs	r3, #10
 80045f0:	e010      	b.n	8004614 <HAL_GPIO_DeInit+0xd4>
 80045f2:	2308      	movs	r3, #8
 80045f4:	e00e      	b.n	8004614 <HAL_GPIO_DeInit+0xd4>
 80045f6:	2307      	movs	r3, #7
 80045f8:	e00c      	b.n	8004614 <HAL_GPIO_DeInit+0xd4>
 80045fa:	2306      	movs	r3, #6
 80045fc:	e00a      	b.n	8004614 <HAL_GPIO_DeInit+0xd4>
 80045fe:	2305      	movs	r3, #5
 8004600:	e008      	b.n	8004614 <HAL_GPIO_DeInit+0xd4>
 8004602:	2304      	movs	r3, #4
 8004604:	e006      	b.n	8004614 <HAL_GPIO_DeInit+0xd4>
 8004606:	2303      	movs	r3, #3
 8004608:	e004      	b.n	8004614 <HAL_GPIO_DeInit+0xd4>
 800460a:	2302      	movs	r3, #2
 800460c:	e002      	b.n	8004614 <HAL_GPIO_DeInit+0xd4>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <HAL_GPIO_DeInit+0xd4>
 8004612:	2300      	movs	r3, #0
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	f002 0203 	and.w	r2, r2, #3
 800461a:	0092      	lsls	r2, r2, #2
 800461c:	4093      	lsls	r3, r2
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	429a      	cmp	r2, r3
 8004622:	d132      	bne.n	800468a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004624:	4b4a      	ldr	r3, [pc, #296]	; (8004750 <HAL_GPIO_DeInit+0x210>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	43db      	mvns	r3, r3
 800462c:	4948      	ldr	r1, [pc, #288]	; (8004750 <HAL_GPIO_DeInit+0x210>)
 800462e:	4013      	ands	r3, r2
 8004630:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004632:	4b47      	ldr	r3, [pc, #284]	; (8004750 <HAL_GPIO_DeInit+0x210>)
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	43db      	mvns	r3, r3
 800463a:	4945      	ldr	r1, [pc, #276]	; (8004750 <HAL_GPIO_DeInit+0x210>)
 800463c:	4013      	ands	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004640:	4b43      	ldr	r3, [pc, #268]	; (8004750 <HAL_GPIO_DeInit+0x210>)
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	43db      	mvns	r3, r3
 8004648:	4941      	ldr	r1, [pc, #260]	; (8004750 <HAL_GPIO_DeInit+0x210>)
 800464a:	4013      	ands	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800464e:	4b40      	ldr	r3, [pc, #256]	; (8004750 <HAL_GPIO_DeInit+0x210>)
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	43db      	mvns	r3, r3
 8004656:	493e      	ldr	r1, [pc, #248]	; (8004750 <HAL_GPIO_DeInit+0x210>)
 8004658:	4013      	ands	r3, r2
 800465a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	220f      	movs	r2, #15
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800466c:	4a2d      	ldr	r2, [pc, #180]	; (8004724 <HAL_GPIO_DeInit+0x1e4>)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	3302      	adds	r3, #2
 8004674:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	43da      	mvns	r2, r3
 800467c:	4829      	ldr	r0, [pc, #164]	; (8004724 <HAL_GPIO_DeInit+0x1e4>)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	089b      	lsrs	r3, r3, #2
 8004682:	400a      	ands	r2, r1
 8004684:	3302      	adds	r3, #2
 8004686:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	2103      	movs	r1, #3
 8004694:	fa01 f303 	lsl.w	r3, r1, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	401a      	ands	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	08da      	lsrs	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3208      	adds	r2, #8
 80046a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	220f      	movs	r2, #15
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	08d2      	lsrs	r2, r2, #3
 80046c0:	4019      	ands	r1, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3208      	adds	r2, #8
 80046c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	2103      	movs	r1, #3
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	401a      	ands	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	2101      	movs	r1, #1
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	401a      	ands	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	2103      	movs	r1, #3
 80046fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004702:	43db      	mvns	r3, r3
 8004704:	401a      	ands	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	3301      	adds	r3, #1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b0f      	cmp	r3, #15
 8004714:	f67f af22 	bls.w	800455c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40013800 	.word	0x40013800
 8004728:	40020000 	.word	0x40020000
 800472c:	40020400 	.word	0x40020400
 8004730:	40020800 	.word	0x40020800
 8004734:	40020c00 	.word	0x40020c00
 8004738:	40021000 	.word	0x40021000
 800473c:	40021400 	.word	0x40021400
 8004740:	40021800 	.word	0x40021800
 8004744:	40021c00 	.word	0x40021c00
 8004748:	40022000 	.word	0x40022000
 800474c:	40022400 	.word	0x40022400
 8004750:	40013c00 	.word	0x40013c00

08004754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]
 8004760:	4613      	mov	r3, r2
 8004762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004764:	787b      	ldrb	r3, [r7, #1]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800476a:	887a      	ldrh	r2, [r7, #2]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004770:	e003      	b.n	800477a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004772:	887b      	ldrh	r3, [r7, #2]
 8004774:	041a      	lsls	r2, r3, #16
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	619a      	str	r2, [r3, #24]
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e0bf      	b.n	800491a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fd f912 	bl	80019d8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80047ca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6999      	ldr	r1, [r3, #24]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047e0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6899      	ldr	r1, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b4a      	ldr	r3, [pc, #296]	; (8004924 <HAL_LTDC_Init+0x19c>)
 80047fc:	400b      	ands	r3, r1
 80047fe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6899      	ldr	r1, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68d9      	ldr	r1, [r3, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4b3e      	ldr	r3, [pc, #248]	; (8004924 <HAL_LTDC_Init+0x19c>)
 800482a:	400b      	ands	r3, r1
 800482c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68d9      	ldr	r1, [r3, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1a      	ldr	r2, [r3, #32]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6919      	ldr	r1, [r3, #16]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b33      	ldr	r3, [pc, #204]	; (8004924 <HAL_LTDC_Init+0x19c>)
 8004858:	400b      	ands	r3, r1
 800485a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	041b      	lsls	r3, r3, #16
 8004862:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6919      	ldr	r1, [r3, #16]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6959      	ldr	r1, [r3, #20]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4b27      	ldr	r3, [pc, #156]	; (8004924 <HAL_LTDC_Init+0x19c>)
 8004886:	400b      	ands	r3, r1
 8004888:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	041b      	lsls	r3, r3, #16
 8004890:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6959      	ldr	r1, [r3, #20]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80048ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0206 	orr.w	r2, r2, #6
 80048f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	f000f800 	.word	0xf000f800

08004928 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	d023      	beq.n	8004992 <HAL_LTDC_IRQHandler+0x6a>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01e      	beq.n	8004992 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0204 	bic.w	r2, r2, #4
 8004962:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2204      	movs	r2, #4
 800496a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004972:	f043 0201 	orr.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2204      	movs	r2, #4
 8004980:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f86f 	bl	8004a70 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d023      	beq.n	80049e4 <HAL_LTDC_IRQHandler+0xbc>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01e      	beq.n	80049e4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0202 	bic.w	r2, r2, #2
 80049b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2202      	movs	r2, #2
 80049bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049c4:	f043 0202 	orr.w	r2, r3, #2
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2204      	movs	r2, #4
 80049d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f846 	bl	8004a70 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01b      	beq.n	8004a26 <HAL_LTDC_IRQHandler+0xfe>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d016      	beq.n	8004a26 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f82f 	bl	8004a84 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01b      	beq.n	8004a68 <HAL_LTDC_IRQHandler+0x140>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d016      	beq.n	8004a68 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0208 	bic.w	r2, r2, #8
 8004a48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2208      	movs	r2, #8
 8004a50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f818 	bl	8004a98 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004aac:	b5b0      	push	{r4, r5, r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_LTDC_ConfigLayer+0x1a>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e02c      	b.n	8004b20 <HAL_LTDC_ConfigLayer+0x74>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2134      	movs	r1, #52	; 0x34
 8004adc:	fb01 f303 	mul.w	r3, r1, r3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4614      	mov	r4, r2
 8004aea:	461d      	mov	r5, r3
 8004aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f83b 	bl	8004b7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bdb0      	pop	{r4, r5, r7, pc}

08004b28 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_LTDC_EnableDither+0x16>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e016      	b.n	8004b6c <HAL_LTDC_EnableDither+0x44>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <HAL_LTDC_EnableDither+0x50>)
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	4a09      	ldr	r2, [pc, #36]	; (8004b78 <HAL_LTDC_EnableDither+0x50>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b58:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	40016800 	.word	0x40016800

08004b7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b089      	sub	sp, #36	; 0x24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	0c1b      	lsrs	r3, r3, #16
 8004b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b98:	4413      	add	r3, r2
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	01db      	lsls	r3, r3, #7
 8004ba8:	4413      	add	r3, r2
 8004baa:	3384      	adds	r3, #132	; 0x84
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	01d2      	lsls	r2, r2, #7
 8004bb8:	440a      	add	r2, r1
 8004bba:	3284      	adds	r2, #132	; 0x84
 8004bbc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004bc0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd2:	4413      	add	r3, r2
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	01db      	lsls	r3, r3, #7
 8004be0:	440b      	add	r3, r1
 8004be2:	3384      	adds	r3, #132	; 0x84
 8004be4:	4619      	mov	r1, r3
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bfa:	4413      	add	r3, r2
 8004bfc:	041b      	lsls	r3, r3, #16
 8004bfe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	01db      	lsls	r3, r3, #7
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3384      	adds	r3, #132	; 0x84
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	4611      	mov	r1, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	01d2      	lsls	r2, r2, #7
 8004c1a:	440a      	add	r2, r1
 8004c1c:	3284      	adds	r2, #132	; 0x84
 8004c1e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004c22:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c32:	4413      	add	r3, r2
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	01db      	lsls	r3, r3, #7
 8004c40:	440b      	add	r3, r1
 8004c42:	3384      	adds	r3, #132	; 0x84
 8004c44:	4619      	mov	r1, r3
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	01db      	lsls	r3, r3, #7
 8004c56:	4413      	add	r3, r2
 8004c58:	3384      	adds	r3, #132	; 0x84
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	4611      	mov	r1, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	01d2      	lsls	r2, r2, #7
 8004c66:	440a      	add	r2, r1
 8004c68:	3284      	adds	r2, #132	; 0x84
 8004c6a:	f023 0307 	bic.w	r3, r3, #7
 8004c6e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	01db      	lsls	r3, r3, #7
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3384      	adds	r3, #132	; 0x84
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	061b      	lsls	r3, r3, #24
 8004ca0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	01db      	lsls	r3, r3, #7
 8004cac:	4413      	add	r3, r2
 8004cae:	3384      	adds	r3, #132	; 0x84
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	01db      	lsls	r3, r3, #7
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3384      	adds	r3, #132	; 0x84
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ccc:	461a      	mov	r2, r3
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	01db      	lsls	r3, r3, #7
 8004ce0:	440b      	add	r3, r1
 8004ce2:	3384      	adds	r3, #132	; 0x84
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	01db      	lsls	r3, r3, #7
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3384      	adds	r3, #132	; 0x84
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	4611      	mov	r1, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	01d2      	lsls	r2, r2, #7
 8004d06:	440a      	add	r2, r1
 8004d08:	3284      	adds	r2, #132	; 0x84
 8004d0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d0e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	01db      	lsls	r3, r3, #7
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3384      	adds	r3, #132	; 0x84
 8004d1e:	461a      	mov	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	01db      	lsls	r3, r3, #7
 8004d30:	4413      	add	r3, r2
 8004d32:	3384      	adds	r3, #132	; 0x84
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	01d2      	lsls	r2, r2, #7
 8004d40:	440a      	add	r2, r1
 8004d42:	3284      	adds	r2, #132	; 0x84
 8004d44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d48:	f023 0307 	bic.w	r3, r3, #7
 8004d4c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	6809      	ldr	r1, [r1, #0]
 8004d5a:	4608      	mov	r0, r1
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	01c9      	lsls	r1, r1, #7
 8004d60:	4401      	add	r1, r0
 8004d62:	3184      	adds	r1, #132	; 0x84
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	01db      	lsls	r3, r3, #7
 8004d72:	4413      	add	r3, r2
 8004d74:	3384      	adds	r3, #132	; 0x84
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	01db      	lsls	r3, r3, #7
 8004d82:	4413      	add	r3, r2
 8004d84:	3384      	adds	r3, #132	; 0x84
 8004d86:	461a      	mov	r2, r3
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	01db      	lsls	r3, r3, #7
 8004d96:	4413      	add	r3, r2
 8004d98:	3384      	adds	r3, #132	; 0x84
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004daa:	2304      	movs	r3, #4
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	e01b      	b.n	8004de8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d102      	bne.n	8004dbe <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004db8:	2303      	movs	r3, #3
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	e014      	b.n	8004de8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d00b      	beq.n	8004dde <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d007      	beq.n	8004dde <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d003      	beq.n	8004dde <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004dda:	2b07      	cmp	r3, #7
 8004ddc:	d102      	bne.n	8004de4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004dde:	2302      	movs	r3, #2
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	e001      	b.n	8004de8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004de4:	2301      	movs	r3, #1
 8004de6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	01db      	lsls	r3, r3, #7
 8004df2:	4413      	add	r3, r2
 8004df4:	3384      	adds	r3, #132	; 0x84
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	6812      	ldr	r2, [r2, #0]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	01d2      	lsls	r2, r2, #7
 8004e02:	440a      	add	r2, r1
 8004e04:	3284      	adds	r2, #132	; 0x84
 8004e06:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	041a      	lsls	r2, r3, #16
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	6859      	ldr	r1, [r3, #4]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	1acb      	subs	r3, r1, r3
 8004e22:	69f9      	ldr	r1, [r7, #28]
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	3303      	adds	r3, #3
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	6809      	ldr	r1, [r1, #0]
 8004e2e:	4608      	mov	r0, r1
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	01c9      	lsls	r1, r1, #7
 8004e34:	4401      	add	r1, r0
 8004e36:	3184      	adds	r1, #132	; 0x84
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	01db      	lsls	r3, r3, #7
 8004e46:	4413      	add	r3, r2
 8004e48:	3384      	adds	r3, #132	; 0x84
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	4611      	mov	r1, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	01d2      	lsls	r2, r2, #7
 8004e56:	440a      	add	r2, r1
 8004e58:	3284      	adds	r2, #132	; 0x84
 8004e5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e5e:	f023 0307 	bic.w	r3, r3, #7
 8004e62:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	01db      	lsls	r3, r3, #7
 8004e6e:	4413      	add	r3, r2
 8004e70:	3384      	adds	r3, #132	; 0x84
 8004e72:	461a      	mov	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	01db      	lsls	r3, r3, #7
 8004e84:	4413      	add	r3, r2
 8004e86:	3384      	adds	r3, #132	; 0x84
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	01d2      	lsls	r2, r2, #7
 8004e94:	440a      	add	r2, r1
 8004e96:	3284      	adds	r2, #132	; 0x84
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6013      	str	r3, [r2, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	3724      	adds	r7, #36	; 0x24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	603b      	str	r3, [r7, #0]
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <HAL_PWREx_EnableOverDrive+0x90>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	4a1f      	ldr	r2, [pc, #124]	; (8004f3c <HAL_PWREx_EnableOverDrive+0x90>)
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <HAL_PWREx_EnableOverDrive+0x90>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	; (8004f40 <HAL_PWREx_EnableOverDrive+0x94>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ed8:	f7fe fb04 	bl	80034e4 <HAL_GetTick>
 8004edc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ede:	e009      	b.n	8004ef4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ee0:	f7fe fb00 	bl	80034e4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eee:	d901      	bls.n	8004ef4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e01f      	b.n	8004f34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ef4:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f00:	d1ee      	bne.n	8004ee0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f08:	f7fe faec 	bl	80034e4 <HAL_GetTick>
 8004f0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f0e:	e009      	b.n	8004f24 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f10:	f7fe fae8 	bl	80034e4 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f1e:	d901      	bls.n	8004f24 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e007      	b.n	8004f34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f24:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f30:	d1ee      	bne.n	8004f10 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	420e0040 	.word	0x420e0040
 8004f44:	40007000 	.word	0x40007000
 8004f48:	420e0044 	.word	0x420e0044

08004f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e25b      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d075      	beq.n	8005056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f6a:	4ba3      	ldr	r3, [pc, #652]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d00c      	beq.n	8004f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f76:	4ba0      	ldr	r3, [pc, #640]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d112      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f82:	4b9d      	ldr	r3, [pc, #628]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f8e:	d10b      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f90:	4b99      	ldr	r3, [pc, #612]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d05b      	beq.n	8005054 <HAL_RCC_OscConfig+0x108>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d157      	bne.n	8005054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e236      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb0:	d106      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x74>
 8004fb2:	4b91      	ldr	r3, [pc, #580]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a90      	ldr	r2, [pc, #576]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	e01d      	b.n	8004ffc <HAL_RCC_OscConfig+0xb0>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x98>
 8004fca:	4b8b      	ldr	r3, [pc, #556]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a8a      	ldr	r2, [pc, #552]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	4b88      	ldr	r3, [pc, #544]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a87      	ldr	r2, [pc, #540]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	e00b      	b.n	8004ffc <HAL_RCC_OscConfig+0xb0>
 8004fe4:	4b84      	ldr	r3, [pc, #528]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a83      	ldr	r2, [pc, #524]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	4b81      	ldr	r3, [pc, #516]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a80      	ldr	r2, [pc, #512]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d013      	beq.n	800502c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005004:	f7fe fa6e 	bl	80034e4 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800500c:	f7fe fa6a 	bl	80034e4 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b64      	cmp	r3, #100	; 0x64
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e1fb      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501e:	4b76      	ldr	r3, [pc, #472]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f0      	beq.n	800500c <HAL_RCC_OscConfig+0xc0>
 800502a:	e014      	b.n	8005056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502c:	f7fe fa5a 	bl	80034e4 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005034:	f7fe fa56 	bl	80034e4 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b64      	cmp	r3, #100	; 0x64
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e1e7      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005046:	4b6c      	ldr	r3, [pc, #432]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f0      	bne.n	8005034 <HAL_RCC_OscConfig+0xe8>
 8005052:	e000      	b.n	8005056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d063      	beq.n	800512a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005062:	4b65      	ldr	r3, [pc, #404]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800506e:	4b62      	ldr	r3, [pc, #392]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005076:	2b08      	cmp	r3, #8
 8005078:	d11c      	bne.n	80050b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800507a:	4b5f      	ldr	r3, [pc, #380]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d116      	bne.n	80050b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005086:	4b5c      	ldr	r3, [pc, #368]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <HAL_RCC_OscConfig+0x152>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d001      	beq.n	800509e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e1bb      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800509e:	4b56      	ldr	r3, [pc, #344]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4952      	ldr	r1, [pc, #328]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b2:	e03a      	b.n	800512a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d020      	beq.n	80050fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050bc:	4b4f      	ldr	r3, [pc, #316]	; (80051fc <HAL_RCC_OscConfig+0x2b0>)
 80050be:	2201      	movs	r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c2:	f7fe fa0f 	bl	80034e4 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ca:	f7fe fa0b 	bl	80034e4 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e19c      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050dc:	4b46      	ldr	r3, [pc, #280]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e8:	4b43      	ldr	r3, [pc, #268]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	4940      	ldr	r1, [pc, #256]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	600b      	str	r3, [r1, #0]
 80050fc:	e015      	b.n	800512a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050fe:	4b3f      	ldr	r3, [pc, #252]	; (80051fc <HAL_RCC_OscConfig+0x2b0>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fe f9ee 	bl	80034e4 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800510c:	f7fe f9ea 	bl	80034e4 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e17b      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800511e:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d030      	beq.n	8005198 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d016      	beq.n	800516c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800513e:	4b30      	ldr	r3, [pc, #192]	; (8005200 <HAL_RCC_OscConfig+0x2b4>)
 8005140:	2201      	movs	r2, #1
 8005142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005144:	f7fe f9ce 	bl	80034e4 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800514c:	f7fe f9ca 	bl	80034e4 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e15b      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800515e:	4b26      	ldr	r3, [pc, #152]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0x200>
 800516a:	e015      	b.n	8005198 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800516c:	4b24      	ldr	r3, [pc, #144]	; (8005200 <HAL_RCC_OscConfig+0x2b4>)
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005172:	f7fe f9b7 	bl	80034e4 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800517a:	f7fe f9b3 	bl	80034e4 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e144      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800518c:	4b1a      	ldr	r3, [pc, #104]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 800518e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f0      	bne.n	800517a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 80a0 	beq.w	80052e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051aa:	4b13      	ldr	r3, [pc, #76]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10f      	bne.n	80051d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b6:	2300      	movs	r3, #0
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	4a0e      	ldr	r2, [pc, #56]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6413      	str	r3, [r2, #64]	; 0x40
 80051c6:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <HAL_RCC_OscConfig+0x2b8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d121      	bne.n	8005226 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <HAL_RCC_OscConfig+0x2b8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a07      	ldr	r2, [pc, #28]	; (8005204 <HAL_RCC_OscConfig+0x2b8>)
 80051e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ee:	f7fe f979 	bl	80034e4 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	e011      	b.n	800521a <HAL_RCC_OscConfig+0x2ce>
 80051f6:	bf00      	nop
 80051f8:	40023800 	.word	0x40023800
 80051fc:	42470000 	.word	0x42470000
 8005200:	42470e80 	.word	0x42470e80
 8005204:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005208:	f7fe f96c 	bl	80034e4 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e0fd      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521a:	4b81      	ldr	r3, [pc, #516]	; (8005420 <HAL_RCC_OscConfig+0x4d4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d106      	bne.n	800523c <HAL_RCC_OscConfig+0x2f0>
 800522e:	4b7d      	ldr	r3, [pc, #500]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005232:	4a7c      	ldr	r2, [pc, #496]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	6713      	str	r3, [r2, #112]	; 0x70
 800523a:	e01c      	b.n	8005276 <HAL_RCC_OscConfig+0x32a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b05      	cmp	r3, #5
 8005242:	d10c      	bne.n	800525e <HAL_RCC_OscConfig+0x312>
 8005244:	4b77      	ldr	r3, [pc, #476]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	4a76      	ldr	r2, [pc, #472]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 800524a:	f043 0304 	orr.w	r3, r3, #4
 800524e:	6713      	str	r3, [r2, #112]	; 0x70
 8005250:	4b74      	ldr	r3, [pc, #464]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005254:	4a73      	ldr	r2, [pc, #460]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	6713      	str	r3, [r2, #112]	; 0x70
 800525c:	e00b      	b.n	8005276 <HAL_RCC_OscConfig+0x32a>
 800525e:	4b71      	ldr	r3, [pc, #452]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	4a70      	ldr	r2, [pc, #448]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	6713      	str	r3, [r2, #112]	; 0x70
 800526a:	4b6e      	ldr	r3, [pc, #440]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 800526c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526e:	4a6d      	ldr	r2, [pc, #436]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005270:	f023 0304 	bic.w	r3, r3, #4
 8005274:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d015      	beq.n	80052aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527e:	f7fe f931 	bl	80034e4 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005284:	e00a      	b.n	800529c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005286:	f7fe f92d 	bl	80034e4 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	f241 3288 	movw	r2, #5000	; 0x1388
 8005294:	4293      	cmp	r3, r2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e0bc      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529c:	4b61      	ldr	r3, [pc, #388]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 800529e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0ee      	beq.n	8005286 <HAL_RCC_OscConfig+0x33a>
 80052a8:	e014      	b.n	80052d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052aa:	f7fe f91b 	bl	80034e4 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b0:	e00a      	b.n	80052c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b2:	f7fe f917 	bl	80034e4 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e0a6      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c8:	4b56      	ldr	r3, [pc, #344]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 80052ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1ee      	bne.n	80052b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d105      	bne.n	80052e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052da:	4b52      	ldr	r3, [pc, #328]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	4a51      	ldr	r2, [pc, #324]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 80052e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 8092 	beq.w	8005414 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052f0:	4b4c      	ldr	r3, [pc, #304]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 030c 	and.w	r3, r3, #12
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d05c      	beq.n	80053b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	2b02      	cmp	r3, #2
 8005302:	d141      	bne.n	8005388 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005304:	4b48      	ldr	r3, [pc, #288]	; (8005428 <HAL_RCC_OscConfig+0x4dc>)
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530a:	f7fe f8eb 	bl	80034e4 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005310:	e008      	b.n	8005324 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005312:	f7fe f8e7 	bl	80034e4 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e078      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005324:	4b3f      	ldr	r3, [pc, #252]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f0      	bne.n	8005312 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	019b      	lsls	r3, r3, #6
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	3b01      	subs	r3, #1
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	061b      	lsls	r3, r3, #24
 8005354:	4933      	ldr	r1, [pc, #204]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005356:	4313      	orrs	r3, r2
 8005358:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800535a:	4b33      	ldr	r3, [pc, #204]	; (8005428 <HAL_RCC_OscConfig+0x4dc>)
 800535c:	2201      	movs	r2, #1
 800535e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005360:	f7fe f8c0 	bl	80034e4 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005368:	f7fe f8bc 	bl	80034e4 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e04d      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537a:	4b2a      	ldr	r3, [pc, #168]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0f0      	beq.n	8005368 <HAL_RCC_OscConfig+0x41c>
 8005386:	e045      	b.n	8005414 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005388:	4b27      	ldr	r3, [pc, #156]	; (8005428 <HAL_RCC_OscConfig+0x4dc>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538e:	f7fe f8a9 	bl	80034e4 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005396:	f7fe f8a5 	bl	80034e4 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e036      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a8:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f0      	bne.n	8005396 <HAL_RCC_OscConfig+0x44a>
 80053b4:	e02e      	b.n	8005414 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e029      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053c2:	4b18      	ldr	r3, [pc, #96]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d11c      	bne.n	8005410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d115      	bne.n	8005410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053ea:	4013      	ands	r3, r2
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d10d      	bne.n	8005410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053fe:	429a      	cmp	r2, r3
 8005400:	d106      	bne.n	8005410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40007000 	.word	0x40007000
 8005424:	40023800 	.word	0x40023800
 8005428:	42470060 	.word	0x42470060

0800542c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e0cc      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005440:	4b68      	ldr	r3, [pc, #416]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d90c      	bls.n	8005468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	4b65      	ldr	r3, [pc, #404]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	4b63      	ldr	r3, [pc, #396]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0b8      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d020      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005480:	4b59      	ldr	r3, [pc, #356]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4a58      	ldr	r2, [pc, #352]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800548a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005498:	4b53      	ldr	r3, [pc, #332]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	4a52      	ldr	r2, [pc, #328]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a4:	4b50      	ldr	r3, [pc, #320]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	494d      	ldr	r1, [pc, #308]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d044      	beq.n	800554c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d107      	bne.n	80054da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ca:	4b47      	ldr	r3, [pc, #284]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d119      	bne.n	800550a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e07f      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d003      	beq.n	80054ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d107      	bne.n	80054fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ea:	4b3f      	ldr	r3, [pc, #252]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e06f      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fa:	4b3b      	ldr	r3, [pc, #236]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e067      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800550a:	4b37      	ldr	r3, [pc, #220]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f023 0203 	bic.w	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	4934      	ldr	r1, [pc, #208]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005518:	4313      	orrs	r3, r2
 800551a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800551c:	f7fd ffe2 	bl	80034e4 <HAL_GetTick>
 8005520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005522:	e00a      	b.n	800553a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005524:	f7fd ffde 	bl	80034e4 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e04f      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553a:	4b2b      	ldr	r3, [pc, #172]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 020c 	and.w	r2, r3, #12
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	429a      	cmp	r2, r3
 800554a:	d1eb      	bne.n	8005524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800554c:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d20c      	bcs.n	8005574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555a:	4b22      	ldr	r3, [pc, #136]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005562:	4b20      	ldr	r3, [pc, #128]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e032      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005580:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	4916      	ldr	r1, [pc, #88]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800559e:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	490e      	ldr	r1, [pc, #56]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055b2:	f000 f821 	bl	80055f8 <HAL_RCC_GetSysClockFreq>
 80055b6:	4601      	mov	r1, r0
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <HAL_RCC_ClockConfig+0x1c0>)
 80055c4:	5cd3      	ldrb	r3, [r2, r3]
 80055c6:	fa21 f303 	lsr.w	r3, r1, r3
 80055ca:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <HAL_RCC_ClockConfig+0x1c4>)
 80055cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055ce:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fc fc3a 	bl	8001e4c <HAL_InitTick>

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40023c00 	.word	0x40023c00
 80055e8:	40023800 	.word	0x40023800
 80055ec:	080089c0 	.word	0x080089c0
 80055f0:	20000000 	.word	0x20000000
 80055f4:	20000054 	.word	0x20000054

080055f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	607b      	str	r3, [r7, #4]
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	2300      	movs	r3, #0
 8005608:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800560e:	4b63      	ldr	r3, [pc, #396]	; (800579c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	2b04      	cmp	r3, #4
 8005618:	d007      	beq.n	800562a <HAL_RCC_GetSysClockFreq+0x32>
 800561a:	2b08      	cmp	r3, #8
 800561c:	d008      	beq.n	8005630 <HAL_RCC_GetSysClockFreq+0x38>
 800561e:	2b00      	cmp	r3, #0
 8005620:	f040 80b4 	bne.w	800578c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005624:	4b5e      	ldr	r3, [pc, #376]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005626:	60bb      	str	r3, [r7, #8]
       break;
 8005628:	e0b3      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800562a:	4b5e      	ldr	r3, [pc, #376]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800562c:	60bb      	str	r3, [r7, #8]
      break;
 800562e:	e0b0      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005630:	4b5a      	ldr	r3, [pc, #360]	; (800579c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005638:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800563a:	4b58      	ldr	r3, [pc, #352]	; (800579c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d04a      	beq.n	80056dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005646:	4b55      	ldr	r3, [pc, #340]	; (800579c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	099b      	lsrs	r3, r3, #6
 800564c:	f04f 0400 	mov.w	r4, #0
 8005650:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	ea03 0501 	and.w	r5, r3, r1
 800565c:	ea04 0602 	and.w	r6, r4, r2
 8005660:	4629      	mov	r1, r5
 8005662:	4632      	mov	r2, r6
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	f04f 0400 	mov.w	r4, #0
 800566c:	0154      	lsls	r4, r2, #5
 800566e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005672:	014b      	lsls	r3, r1, #5
 8005674:	4619      	mov	r1, r3
 8005676:	4622      	mov	r2, r4
 8005678:	1b49      	subs	r1, r1, r5
 800567a:	eb62 0206 	sbc.w	r2, r2, r6
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	f04f 0400 	mov.w	r4, #0
 8005686:	0194      	lsls	r4, r2, #6
 8005688:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800568c:	018b      	lsls	r3, r1, #6
 800568e:	1a5b      	subs	r3, r3, r1
 8005690:	eb64 0402 	sbc.w	r4, r4, r2
 8005694:	f04f 0100 	mov.w	r1, #0
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	00e2      	lsls	r2, r4, #3
 800569e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80056a2:	00d9      	lsls	r1, r3, #3
 80056a4:	460b      	mov	r3, r1
 80056a6:	4614      	mov	r4, r2
 80056a8:	195b      	adds	r3, r3, r5
 80056aa:	eb44 0406 	adc.w	r4, r4, r6
 80056ae:	f04f 0100 	mov.w	r1, #0
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	0262      	lsls	r2, r4, #9
 80056b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80056bc:	0259      	lsls	r1, r3, #9
 80056be:	460b      	mov	r3, r1
 80056c0:	4614      	mov	r4, r2
 80056c2:	4618      	mov	r0, r3
 80056c4:	4621      	mov	r1, r4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f04f 0400 	mov.w	r4, #0
 80056cc:	461a      	mov	r2, r3
 80056ce:	4623      	mov	r3, r4
 80056d0:	f7fb fa5c 	bl	8000b8c <__aeabi_uldivmod>
 80056d4:	4603      	mov	r3, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	e049      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056dc:	4b2f      	ldr	r3, [pc, #188]	; (800579c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	099b      	lsrs	r3, r3, #6
 80056e2:	f04f 0400 	mov.w	r4, #0
 80056e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	ea03 0501 	and.w	r5, r3, r1
 80056f2:	ea04 0602 	and.w	r6, r4, r2
 80056f6:	4629      	mov	r1, r5
 80056f8:	4632      	mov	r2, r6
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	f04f 0400 	mov.w	r4, #0
 8005702:	0154      	lsls	r4, r2, #5
 8005704:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005708:	014b      	lsls	r3, r1, #5
 800570a:	4619      	mov	r1, r3
 800570c:	4622      	mov	r2, r4
 800570e:	1b49      	subs	r1, r1, r5
 8005710:	eb62 0206 	sbc.w	r2, r2, r6
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	f04f 0400 	mov.w	r4, #0
 800571c:	0194      	lsls	r4, r2, #6
 800571e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005722:	018b      	lsls	r3, r1, #6
 8005724:	1a5b      	subs	r3, r3, r1
 8005726:	eb64 0402 	sbc.w	r4, r4, r2
 800572a:	f04f 0100 	mov.w	r1, #0
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	00e2      	lsls	r2, r4, #3
 8005734:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005738:	00d9      	lsls	r1, r3, #3
 800573a:	460b      	mov	r3, r1
 800573c:	4614      	mov	r4, r2
 800573e:	195b      	adds	r3, r3, r5
 8005740:	eb44 0406 	adc.w	r4, r4, r6
 8005744:	f04f 0100 	mov.w	r1, #0
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	02a2      	lsls	r2, r4, #10
 800574e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005752:	0299      	lsls	r1, r3, #10
 8005754:	460b      	mov	r3, r1
 8005756:	4614      	mov	r4, r2
 8005758:	4618      	mov	r0, r3
 800575a:	4621      	mov	r1, r4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f04f 0400 	mov.w	r4, #0
 8005762:	461a      	mov	r2, r3
 8005764:	4623      	mov	r3, r4
 8005766:	f7fb fa11 	bl	8000b8c <__aeabi_uldivmod>
 800576a:	4603      	mov	r3, r0
 800576c:	460c      	mov	r4, r1
 800576e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005770:	4b0a      	ldr	r3, [pc, #40]	; (800579c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	0c1b      	lsrs	r3, r3, #16
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	3301      	adds	r3, #1
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	60bb      	str	r3, [r7, #8]
      break;
 800578a:	e002      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800578c:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800578e:	60bb      	str	r3, [r7, #8]
      break;
 8005790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005792:	68bb      	ldr	r3, [r7, #8]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800579c:	40023800 	.word	0x40023800
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	007a1200 	.word	0x007a1200

080057a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ac:	4b03      	ldr	r3, [pc, #12]	; (80057bc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ae:	681b      	ldr	r3, [r3, #0]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	20000000 	.word	0x20000000

080057c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057c4:	f7ff fff0 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80057c8:	4601      	mov	r1, r0
 80057ca:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	0a9b      	lsrs	r3, r3, #10
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	4a03      	ldr	r2, [pc, #12]	; (80057e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057d6:	5cd3      	ldrb	r3, [r2, r3]
 80057d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40023800 	.word	0x40023800
 80057e4:	080089d0 	.word	0x080089d0

080057e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	220f      	movs	r2, #15
 80057f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057f8:	4b12      	ldr	r3, [pc, #72]	; (8005844 <HAL_RCC_GetClockConfig+0x5c>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0203 	and.w	r2, r3, #3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005804:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <HAL_RCC_GetClockConfig+0x5c>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005810:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <HAL_RCC_GetClockConfig+0x5c>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800581c:	4b09      	ldr	r3, [pc, #36]	; (8005844 <HAL_RCC_GetClockConfig+0x5c>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	08db      	lsrs	r3, r3, #3
 8005822:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800582a:	4b07      	ldr	r3, [pc, #28]	; (8005848 <HAL_RCC_GetClockConfig+0x60>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 020f 	and.w	r2, r3, #15
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	601a      	str	r2, [r3, #0]
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40023800 	.word	0x40023800
 8005848:	40023c00 	.word	0x40023c00

0800584c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005870:	2b00      	cmp	r3, #0
 8005872:	d105      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800587c:	2b00      	cmp	r3, #0
 800587e:	d075      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005880:	4bad      	ldr	r3, [pc, #692]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005886:	f7fd fe2d 	bl	80034e4 <HAL_GetTick>
 800588a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800588c:	e008      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800588e:	f7fd fe29 	bl	80034e4 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e18b      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058a0:	4ba6      	ldr	r3, [pc, #664]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1f0      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	019a      	lsls	r2, r3, #6
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	071b      	lsls	r3, r3, #28
 80058c4:	499d      	ldr	r1, [pc, #628]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01f      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058d8:	4b98      	ldr	r3, [pc, #608]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058de:	0f1b      	lsrs	r3, r3, #28
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	019a      	lsls	r2, r3, #6
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	061b      	lsls	r3, r3, #24
 80058f2:	431a      	orrs	r2, r3
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	071b      	lsls	r3, r3, #28
 80058f8:	4990      	ldr	r1, [pc, #576]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005900:	4b8e      	ldr	r3, [pc, #568]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005906:	f023 021f 	bic.w	r2, r3, #31
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	3b01      	subs	r3, #1
 8005910:	498a      	ldr	r1, [pc, #552]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00d      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	019a      	lsls	r2, r3, #6
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	061b      	lsls	r3, r3, #24
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	071b      	lsls	r3, r3, #28
 8005938:	4980      	ldr	r1, [pc, #512]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005940:	4b7d      	ldr	r3, [pc, #500]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005942:	2201      	movs	r2, #1
 8005944:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005946:	f7fd fdcd 	bl	80034e4 <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800594c:	e008      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800594e:	f7fd fdc9 	bl	80034e4 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e12b      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005960:	4b76      	ldr	r3, [pc, #472]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0f0      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d105      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005980:	2b00      	cmp	r3, #0
 8005982:	d079      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005984:	4b6e      	ldr	r3, [pc, #440]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800598a:	f7fd fdab 	bl	80034e4 <HAL_GetTick>
 800598e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005990:	e008      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005992:	f7fd fda7 	bl	80034e4 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e109      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059a4:	4b65      	ldr	r3, [pc, #404]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059b0:	d0ef      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d020      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059be:	4b5f      	ldr	r3, [pc, #380]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	0f1b      	lsrs	r3, r3, #28
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	019a      	lsls	r2, r3, #6
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	061b      	lsls	r3, r3, #24
 80059d8:	431a      	orrs	r2, r3
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	071b      	lsls	r3, r3, #28
 80059de:	4957      	ldr	r1, [pc, #348]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80059e6:	4b55      	ldr	r3, [pc, #340]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	4950      	ldr	r1, [pc, #320]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01e      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a0c:	4b4b      	ldr	r3, [pc, #300]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a12:	0e1b      	lsrs	r3, r3, #24
 8005a14:	f003 030f 	and.w	r3, r3, #15
 8005a18:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	019a      	lsls	r2, r3, #6
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	061b      	lsls	r3, r3, #24
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	071b      	lsls	r3, r3, #28
 8005a2c:	4943      	ldr	r1, [pc, #268]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a34:	4b41      	ldr	r3, [pc, #260]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	493e      	ldr	r1, [pc, #248]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a4a:	4b3d      	ldr	r3, [pc, #244]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a50:	f7fd fd48 	bl	80034e4 <HAL_GetTick>
 8005a54:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a56:	e008      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a58:	f7fd fd44 	bl	80034e4 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e0a6      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a6a:	4b34      	ldr	r3, [pc, #208]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a76:	d1ef      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 808d 	beq.w	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	4b2c      	ldr	r3, [pc, #176]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	4a2b      	ldr	r2, [pc, #172]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a94:	6413      	str	r3, [r2, #64]	; 0x40
 8005a96:	4b29      	ldr	r3, [pc, #164]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005aa2:	4b28      	ldr	r3, [pc, #160]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a27      	ldr	r2, [pc, #156]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aae:	f7fd fd19 	bl	80034e4 <HAL_GetTick>
 8005ab2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ab6:	f7fd fd15 	bl	80034e4 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e077      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ac8:	4b1e      	ldr	r3, [pc, #120]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f0      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ad4:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005adc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d039      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d032      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005af2:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005afc:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005afe:	2201      	movs	r2, #1
 8005b00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b02:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b08:	4a0c      	ldr	r2, [pc, #48]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b0e:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d11e      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b1a:	f7fd fce3 	bl	80034e4 <HAL_GetTick>
 8005b1e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b20:	e014      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b22:	f7fd fcdf 	bl	80034e4 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d90b      	bls.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e03f      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005b38:	42470068 	.word	0x42470068
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	42470070 	.word	0x42470070
 8005b44:	40007000 	.word	0x40007000
 8005b48:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b4c:	4b1c      	ldr	r3, [pc, #112]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0e4      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b64:	d10d      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005b66:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7a:	4911      	ldr	r1, [pc, #68]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	608b      	str	r3, [r1, #8]
 8005b80:	e005      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005b82:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	4a0e      	ldr	r2, [pc, #56]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b8c:	6093      	str	r3, [r2, #8]
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9a:	4909      	ldr	r1, [pc, #36]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005bb2:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005bb4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	424711e0 	.word	0x424711e0

08005bc8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e025      	b.n	8005c28 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d106      	bne.n	8005bf6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7fc f921 	bl	8001e38 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3304      	adds	r3, #4
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f001 f9e7 	bl	8006fdc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	461a      	mov	r2, r3
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	f001 fa52 	bl	80070c2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d101      	bne.n	8005c4c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e018      	b.n	8005c7e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 faaf 	bl	80071c0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d104      	bne.n	8005c74 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2205      	movs	r2, #5
 8005c6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005c72:	e003      	b.n	8005c7c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d101      	bne.n	8005ca0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e00e      	b.n	8005cbe <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f001 fac2 	bl	8007238 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e056      	b.n	8005d86 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fb ff86 	bl	8001c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	ea42 0103 	orr.w	r1, r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	0c1b      	lsrs	r3, r3, #16
 8005d56:	f003 0104 	and.w	r1, r3, #4
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e01a      	b.n	8005dd6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005db6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7fb ff6b 	bl	8001c94 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b088      	sub	sp, #32
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	603b      	str	r3, [r7, #0]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_SPI_Transmit+0x22>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e11e      	b.n	800603e <HAL_SPI_Transmit+0x260>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e08:	f7fd fb6c 	bl	80034e4 <HAL_GetTick>
 8005e0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d002      	beq.n	8005e24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
 8005e20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e22:	e103      	b.n	800602c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_SPI_Transmit+0x52>
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e34:	e0fa      	b.n	800602c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2203      	movs	r2, #3
 8005e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	88fa      	ldrh	r2, [r7, #6]
 8005e4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	88fa      	ldrh	r2, [r7, #6]
 8005e54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e7c:	d107      	bne.n	8005e8e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d007      	beq.n	8005eac <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb4:	d14b      	bne.n	8005f4e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <HAL_SPI_Transmit+0xe6>
 8005ebe:	8afb      	ldrh	r3, [r7, #22]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d13e      	bne.n	8005f42 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	881a      	ldrh	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	1c9a      	adds	r2, r3, #2
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ee8:	e02b      	b.n	8005f42 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d112      	bne.n	8005f1e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	881a      	ldrh	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	1c9a      	adds	r2, r3, #2
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f1c:	e011      	b.n	8005f42 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f1e:	f7fd fae1 	bl	80034e4 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d803      	bhi.n	8005f36 <HAL_SPI_Transmit+0x158>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f34:	d102      	bne.n	8005f3c <HAL_SPI_Transmit+0x15e>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f40:	e074      	b.n	800602c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1ce      	bne.n	8005eea <HAL_SPI_Transmit+0x10c>
 8005f4c:	e04c      	b.n	8005fe8 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_SPI_Transmit+0x17e>
 8005f56:	8afb      	ldrh	r3, [r7, #22]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d140      	bne.n	8005fde <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	330c      	adds	r3, #12
 8005f66:	7812      	ldrb	r2, [r2, #0]
 8005f68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f82:	e02c      	b.n	8005fde <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d113      	bne.n	8005fba <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	7812      	ldrb	r2, [r2, #0]
 8005f9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fb8:	e011      	b.n	8005fde <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fba:	f7fd fa93 	bl	80034e4 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d803      	bhi.n	8005fd2 <HAL_SPI_Transmit+0x1f4>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d102      	bne.n	8005fd8 <HAL_SPI_Transmit+0x1fa>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d102      	bne.n	8005fde <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fdc:	e026      	b.n	800602c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1cd      	bne.n	8005f84 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	6839      	ldr	r1, [r7, #0]
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 fbb3 	bl	8006758 <SPI_EndRxTxTransaction>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006006:	2300      	movs	r3, #0
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e000      	b.n	800602c <HAL_SPI_Transmit+0x24e>
  }

error:
 800602a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800603c:	7ffb      	ldrb	r3, [r7, #31]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3720      	adds	r7, #32
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b088      	sub	sp, #32
 800604a:	af02      	add	r7, sp, #8
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	603b      	str	r3, [r7, #0]
 8006052:	4613      	mov	r3, r2
 8006054:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006062:	d112      	bne.n	800608a <HAL_SPI_Receive+0x44>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10e      	bne.n	800608a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2204      	movs	r2, #4
 8006070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006074:	88fa      	ldrh	r2, [r7, #6]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	4613      	mov	r3, r2
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f8e9 	bl	8006258 <HAL_SPI_TransmitReceive>
 8006086:	4603      	mov	r3, r0
 8006088:	e0e2      	b.n	8006250 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_SPI_Receive+0x52>
 8006094:	2302      	movs	r3, #2
 8006096:	e0db      	b.n	8006250 <HAL_SPI_Receive+0x20a>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060a0:	f7fd fa20 	bl	80034e4 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d002      	beq.n	80060b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80060b2:	2302      	movs	r3, #2
 80060b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060b6:	e0c2      	b.n	800623e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <HAL_SPI_Receive+0x7e>
 80060be:	88fb      	ldrh	r3, [r7, #6]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060c8:	e0b9      	b.n	800623e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2204      	movs	r2, #4
 80060ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	88fa      	ldrh	r2, [r7, #6]
 80060e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	88fa      	ldrh	r2, [r7, #6]
 80060e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006110:	d107      	bne.n	8006122 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006120:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d007      	beq.n	8006140 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800613e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d162      	bne.n	800620e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006148:	e02e      	b.n	80061a8 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b01      	cmp	r3, #1
 8006156:	d115      	bne.n	8006184 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f103 020c 	add.w	r2, r3, #12
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006164:	7812      	ldrb	r2, [r2, #0]
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006182:	e011      	b.n	80061a8 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006184:	f7fd f9ae 	bl	80034e4 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d803      	bhi.n	800619c <HAL_SPI_Receive+0x156>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619a:	d102      	bne.n	80061a2 <HAL_SPI_Receive+0x15c>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d102      	bne.n	80061a8 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061a6:	e04a      	b.n	800623e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1cb      	bne.n	800614a <HAL_SPI_Receive+0x104>
 80061b2:	e031      	b.n	8006218 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d113      	bne.n	80061ea <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	b292      	uxth	r2, r2
 80061ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d4:	1c9a      	adds	r2, r3, #2
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061e8:	e011      	b.n	800620e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ea:	f7fd f97b 	bl	80034e4 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d803      	bhi.n	8006202 <HAL_SPI_Receive+0x1bc>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d102      	bne.n	8006208 <HAL_SPI_Receive+0x1c2>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d102      	bne.n	800620e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800620c:	e017      	b.n	800623e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006212:	b29b      	uxth	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1cd      	bne.n	80061b4 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 fa35 	bl	800668c <SPI_EndRxTransaction>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	75fb      	strb	r3, [r7, #23]
 800623a:	e000      	b.n	800623e <HAL_SPI_Receive+0x1f8>
  }

error :
 800623c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800624e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08c      	sub	sp, #48	; 0x30
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006266:	2301      	movs	r3, #1
 8006268:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_SPI_TransmitReceive+0x26>
 800627a:	2302      	movs	r3, #2
 800627c:	e18a      	b.n	8006594 <HAL_SPI_TransmitReceive+0x33c>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006286:	f7fd f92d 	bl	80034e4 <HAL_GetTick>
 800628a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800629c:	887b      	ldrh	r3, [r7, #2]
 800629e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d00f      	beq.n	80062c8 <HAL_SPI_TransmitReceive+0x70>
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ae:	d107      	bne.n	80062c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d103      	bne.n	80062c0 <HAL_SPI_TransmitReceive+0x68>
 80062b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062bc:	2b04      	cmp	r3, #4
 80062be:	d003      	beq.n	80062c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
 80062c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062c6:	e15b      	b.n	8006580 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_SPI_TransmitReceive+0x82>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <HAL_SPI_TransmitReceive+0x82>
 80062d4:	887b      	ldrh	r3, [r7, #2]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d103      	bne.n	80062e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062e0:	e14e      	b.n	8006580 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d003      	beq.n	80062f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2205      	movs	r2, #5
 80062f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	887a      	ldrh	r2, [r7, #2]
 8006306:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	887a      	ldrh	r2, [r7, #2]
 800630c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	887a      	ldrh	r2, [r7, #2]
 8006318:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	887a      	ldrh	r2, [r7, #2]
 800631e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006336:	2b40      	cmp	r3, #64	; 0x40
 8006338:	d007      	beq.n	800634a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006348:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006352:	d178      	bne.n	8006446 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <HAL_SPI_TransmitReceive+0x10a>
 800635c:	8b7b      	ldrh	r3, [r7, #26]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d166      	bne.n	8006430 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	881a      	ldrh	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	1c9a      	adds	r2, r3, #2
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006386:	e053      	b.n	8006430 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b02      	cmp	r3, #2
 8006394:	d11b      	bne.n	80063ce <HAL_SPI_TransmitReceive+0x176>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d016      	beq.n	80063ce <HAL_SPI_TransmitReceive+0x176>
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d113      	bne.n	80063ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	881a      	ldrh	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	1c9a      	adds	r2, r3, #2
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d119      	bne.n	8006410 <HAL_SPI_TransmitReceive+0x1b8>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d014      	beq.n	8006410 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	b292      	uxth	r2, r2
 80063f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	1c9a      	adds	r2, r3, #2
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800640c:	2301      	movs	r3, #1
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006410:	f7fd f868 	bl	80034e4 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800641c:	429a      	cmp	r2, r3
 800641e:	d807      	bhi.n	8006430 <HAL_SPI_TransmitReceive+0x1d8>
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d003      	beq.n	8006430 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800642e:	e0a7      	b.n	8006580 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006434:	b29b      	uxth	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1a6      	bne.n	8006388 <HAL_SPI_TransmitReceive+0x130>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1a1      	bne.n	8006388 <HAL_SPI_TransmitReceive+0x130>
 8006444:	e07c      	b.n	8006540 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_SPI_TransmitReceive+0x1fc>
 800644e:	8b7b      	ldrh	r3, [r7, #26]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d16b      	bne.n	800652c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	330c      	adds	r3, #12
 800645e:	7812      	ldrb	r2, [r2, #0]
 8006460:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800647a:	e057      	b.n	800652c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b02      	cmp	r3, #2
 8006488:	d11c      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x26c>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d017      	beq.n	80064c4 <HAL_SPI_TransmitReceive+0x26c>
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	2b01      	cmp	r3, #1
 8006498:	d114      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	330c      	adds	r3, #12
 80064a4:	7812      	ldrb	r2, [r2, #0]
 80064a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d119      	bne.n	8006506 <HAL_SPI_TransmitReceive+0x2ae>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d014      	beq.n	8006506 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006502:	2301      	movs	r3, #1
 8006504:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006506:	f7fc ffed 	bl	80034e4 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006512:	429a      	cmp	r2, r3
 8006514:	d803      	bhi.n	800651e <HAL_SPI_TransmitReceive+0x2c6>
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d102      	bne.n	8006524 <HAL_SPI_TransmitReceive+0x2cc>
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006520:	2b00      	cmp	r3, #0
 8006522:	d103      	bne.n	800652c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800652a:	e029      	b.n	8006580 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006530:	b29b      	uxth	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1a2      	bne.n	800647c <HAL_SPI_TransmitReceive+0x224>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d19d      	bne.n	800647c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006542:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f907 	bl	8006758 <SPI_EndRxTxTransaction>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d006      	beq.n	800655e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800655c:	e010      	b.n	8006580 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10b      	bne.n	800657e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006566:	2300      	movs	r3, #0
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	e000      	b.n	8006580 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800657e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006590:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006594:	4618      	mov	r0, r3
 8006596:	3730      	adds	r7, #48	; 0x30
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065aa:	b2db      	uxtb	r3, r3
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	603b      	str	r3, [r7, #0]
 80065c4:	4613      	mov	r3, r2
 80065c6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065c8:	e04c      	b.n	8006664 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d0:	d048      	beq.n	8006664 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80065d2:	f7fc ff87 	bl	80034e4 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d902      	bls.n	80065e8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d13d      	bne.n	8006664 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006600:	d111      	bne.n	8006626 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800660a:	d004      	beq.n	8006616 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006614:	d107      	bne.n	8006626 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006624:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800662e:	d10f      	bne.n	8006650 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800664e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e00f      	b.n	8006684 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	4013      	ands	r3, r2
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	429a      	cmp	r2, r3
 8006672:	bf0c      	ite	eq
 8006674:	2301      	moveq	r3, #1
 8006676:	2300      	movne	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	461a      	mov	r2, r3
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	429a      	cmp	r2, r3
 8006680:	d1a3      	bne.n	80065ca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a0:	d111      	bne.n	80066c6 <SPI_EndRxTransaction+0x3a>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066aa:	d004      	beq.n	80066b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b4:	d107      	bne.n	80066c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ce:	d12a      	bne.n	8006726 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d8:	d012      	beq.n	8006700 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2180      	movs	r1, #128	; 0x80
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff ff67 	bl	80065b8 <SPI_WaitFlagStateUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d02d      	beq.n	800674c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f4:	f043 0220 	orr.w	r2, r3, #32
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e026      	b.n	800674e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2200      	movs	r2, #0
 8006708:	2101      	movs	r1, #1
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff ff54 	bl	80065b8 <SPI_WaitFlagStateUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01a      	beq.n	800674c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	f043 0220 	orr.w	r2, r3, #32
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e013      	b.n	800674e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2200      	movs	r2, #0
 800672e:	2101      	movs	r1, #1
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff ff41 	bl	80065b8 <SPI_WaitFlagStateUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006740:	f043 0220 	orr.w	r2, r3, #32
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e000      	b.n	800674e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006764:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <SPI_EndRxTxTransaction+0x7c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1b      	ldr	r2, [pc, #108]	; (80067d8 <SPI_EndRxTxTransaction+0x80>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	0d5b      	lsrs	r3, r3, #21
 8006770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006774:	fb02 f303 	mul.w	r3, r2, r3
 8006778:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006782:	d112      	bne.n	80067aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2200      	movs	r2, #0
 800678c:	2180      	movs	r1, #128	; 0x80
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7ff ff12 	bl	80065b8 <SPI_WaitFlagStateUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d016      	beq.n	80067c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	f043 0220 	orr.w	r2, r3, #32
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e00f      	b.n	80067ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c0:	2b80      	cmp	r3, #128	; 0x80
 80067c2:	d0f2      	beq.n	80067aa <SPI_EndRxTxTransaction+0x52>
 80067c4:	e000      	b.n	80067c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80067c6:	bf00      	nop
  }

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000000 	.word	0x20000000
 80067d8:	165e9f81 	.word	0x165e9f81

080067dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e01d      	b.n	800682a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fb fa64 	bl	8001cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3304      	adds	r3, #4
 8006818:	4619      	mov	r1, r3
 800681a:	4610      	mov	r0, r2
 800681c:	f000 fa14 	bl	8006c48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006832:	b480      	push	{r7}
 8006834:	b085      	sub	sp, #20
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0201 	orr.w	r2, r2, #1
 8006848:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b06      	cmp	r3, #6
 800685a:	d007      	beq.n	800686c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f042 0201 	orr.w	r2, r2, #1
 800686a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b02      	cmp	r3, #2
 800688e:	d122      	bne.n	80068d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b02      	cmp	r3, #2
 800689c:	d11b      	bne.n	80068d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f06f 0202 	mvn.w	r2, #2
 80068a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f003 0303 	and.w	r3, r3, #3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f9a5 	bl	8006c0c <HAL_TIM_IC_CaptureCallback>
 80068c2:	e005      	b.n	80068d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f997 	bl	8006bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f9a8 	bl	8006c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d122      	bne.n	800692a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d11b      	bne.n	800692a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f06f 0204 	mvn.w	r2, #4
 80068fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f97b 	bl	8006c0c <HAL_TIM_IC_CaptureCallback>
 8006916:	e005      	b.n	8006924 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f96d 	bl	8006bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f97e 	bl	8006c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b08      	cmp	r3, #8
 8006936:	d122      	bne.n	800697e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b08      	cmp	r3, #8
 8006944:	d11b      	bne.n	800697e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f06f 0208 	mvn.w	r2, #8
 800694e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2204      	movs	r2, #4
 8006954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	f003 0303 	and.w	r3, r3, #3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f951 	bl	8006c0c <HAL_TIM_IC_CaptureCallback>
 800696a:	e005      	b.n	8006978 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f943 	bl	8006bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f954 	bl	8006c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f003 0310 	and.w	r3, r3, #16
 8006988:	2b10      	cmp	r3, #16
 800698a:	d122      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f003 0310 	and.w	r3, r3, #16
 8006996:	2b10      	cmp	r3, #16
 8006998:	d11b      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f06f 0210 	mvn.w	r2, #16
 80069a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2208      	movs	r2, #8
 80069a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f927 	bl	8006c0c <HAL_TIM_IC_CaptureCallback>
 80069be:	e005      	b.n	80069cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f919 	bl	8006bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f92a 	bl	8006c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d10e      	bne.n	80069fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d107      	bne.n	80069fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f06f 0201 	mvn.w	r2, #1
 80069f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7fa ff61 	bl	80018c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a08:	2b80      	cmp	r3, #128	; 0x80
 8006a0a:	d10e      	bne.n	8006a2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a16:	2b80      	cmp	r3, #128	; 0x80
 8006a18:	d107      	bne.n	8006a2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 facf 	bl	8006fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a34:	2b40      	cmp	r3, #64	; 0x40
 8006a36:	d10e      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b40      	cmp	r3, #64	; 0x40
 8006a44:	d107      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f8ef 	bl	8006c34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	d10e      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d107      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f06f 0220 	mvn.w	r2, #32
 8006a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fa99 	bl	8006fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a82:	bf00      	nop
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_TIM_ConfigClockSource+0x18>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e0a6      	b.n	8006bf0 <HAL_TIM_ConfigClockSource+0x166>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2202      	movs	r2, #2
 8006aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ac0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ac8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b40      	cmp	r3, #64	; 0x40
 8006ad8:	d067      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0x120>
 8006ada:	2b40      	cmp	r3, #64	; 0x40
 8006adc:	d80b      	bhi.n	8006af6 <HAL_TIM_ConfigClockSource+0x6c>
 8006ade:	2b10      	cmp	r3, #16
 8006ae0:	d073      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x140>
 8006ae2:	2b10      	cmp	r3, #16
 8006ae4:	d802      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x62>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d06f      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006aea:	e078      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	d06c      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x140>
 8006af0:	2b30      	cmp	r3, #48	; 0x30
 8006af2:	d06a      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006af4:	e073      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006af6:	2b70      	cmp	r3, #112	; 0x70
 8006af8:	d00d      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x8c>
 8006afa:	2b70      	cmp	r3, #112	; 0x70
 8006afc:	d804      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x7e>
 8006afe:	2b50      	cmp	r3, #80	; 0x50
 8006b00:	d033      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0xe0>
 8006b02:	2b60      	cmp	r3, #96	; 0x60
 8006b04:	d041      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006b06:	e06a      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0c:	d066      	beq.n	8006bdc <HAL_TIM_ConfigClockSource+0x152>
 8006b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b12:	d017      	beq.n	8006b44 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006b14:	e063      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6899      	ldr	r1, [r3, #8]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f000 f9a9 	bl	8006e7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	609a      	str	r2, [r3, #8]
      break;
 8006b42:	e04c      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	6899      	ldr	r1, [r3, #8]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f000 f992 	bl	8006e7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b66:	609a      	str	r2, [r3, #8]
      break;
 8006b68:	e039      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6859      	ldr	r1, [r3, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f000 f906 	bl	8006d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2150      	movs	r1, #80	; 0x50
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 f95f 	bl	8006e46 <TIM_ITRx_SetConfig>
      break;
 8006b88:	e029      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6859      	ldr	r1, [r3, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	461a      	mov	r2, r3
 8006b98:	f000 f925 	bl	8006de6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2160      	movs	r1, #96	; 0x60
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 f94f 	bl	8006e46 <TIM_ITRx_SetConfig>
      break;
 8006ba8:	e019      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6859      	ldr	r1, [r3, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f000 f8e6 	bl	8006d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2140      	movs	r1, #64	; 0x40
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 f93f 	bl	8006e46 <TIM_ITRx_SetConfig>
      break;
 8006bc8:	e009      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f000 f936 	bl	8006e46 <TIM_ITRx_SetConfig>
      break;
 8006bda:	e000      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006bdc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a40      	ldr	r2, [pc, #256]	; (8006d5c <TIM_Base_SetConfig+0x114>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d013      	beq.n	8006c88 <TIM_Base_SetConfig+0x40>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c66:	d00f      	beq.n	8006c88 <TIM_Base_SetConfig+0x40>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a3d      	ldr	r2, [pc, #244]	; (8006d60 <TIM_Base_SetConfig+0x118>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <TIM_Base_SetConfig+0x40>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a3c      	ldr	r2, [pc, #240]	; (8006d64 <TIM_Base_SetConfig+0x11c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d007      	beq.n	8006c88 <TIM_Base_SetConfig+0x40>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a3b      	ldr	r2, [pc, #236]	; (8006d68 <TIM_Base_SetConfig+0x120>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_Base_SetConfig+0x40>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a3a      	ldr	r2, [pc, #232]	; (8006d6c <TIM_Base_SetConfig+0x124>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d108      	bne.n	8006c9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a2f      	ldr	r2, [pc, #188]	; (8006d5c <TIM_Base_SetConfig+0x114>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d02b      	beq.n	8006cfa <TIM_Base_SetConfig+0xb2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca8:	d027      	beq.n	8006cfa <TIM_Base_SetConfig+0xb2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a2c      	ldr	r2, [pc, #176]	; (8006d60 <TIM_Base_SetConfig+0x118>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d023      	beq.n	8006cfa <TIM_Base_SetConfig+0xb2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a2b      	ldr	r2, [pc, #172]	; (8006d64 <TIM_Base_SetConfig+0x11c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d01f      	beq.n	8006cfa <TIM_Base_SetConfig+0xb2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a2a      	ldr	r2, [pc, #168]	; (8006d68 <TIM_Base_SetConfig+0x120>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d01b      	beq.n	8006cfa <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a29      	ldr	r2, [pc, #164]	; (8006d6c <TIM_Base_SetConfig+0x124>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d017      	beq.n	8006cfa <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a28      	ldr	r2, [pc, #160]	; (8006d70 <TIM_Base_SetConfig+0x128>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d013      	beq.n	8006cfa <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a27      	ldr	r2, [pc, #156]	; (8006d74 <TIM_Base_SetConfig+0x12c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d00f      	beq.n	8006cfa <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a26      	ldr	r2, [pc, #152]	; (8006d78 <TIM_Base_SetConfig+0x130>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00b      	beq.n	8006cfa <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a25      	ldr	r2, [pc, #148]	; (8006d7c <TIM_Base_SetConfig+0x134>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d007      	beq.n	8006cfa <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a24      	ldr	r2, [pc, #144]	; (8006d80 <TIM_Base_SetConfig+0x138>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d003      	beq.n	8006cfa <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a23      	ldr	r2, [pc, #140]	; (8006d84 <TIM_Base_SetConfig+0x13c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d108      	bne.n	8006d0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <TIM_Base_SetConfig+0x114>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_Base_SetConfig+0xf8>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a0c      	ldr	r2, [pc, #48]	; (8006d6c <TIM_Base_SetConfig+0x124>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d103      	bne.n	8006d48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	615a      	str	r2, [r3, #20]
}
 8006d4e:	bf00      	nop
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	40010000 	.word	0x40010000
 8006d60:	40000400 	.word	0x40000400
 8006d64:	40000800 	.word	0x40000800
 8006d68:	40000c00 	.word	0x40000c00
 8006d6c:	40010400 	.word	0x40010400
 8006d70:	40014000 	.word	0x40014000
 8006d74:	40014400 	.word	0x40014400
 8006d78:	40014800 	.word	0x40014800
 8006d7c:	40001800 	.word	0x40001800
 8006d80:	40001c00 	.word	0x40001c00
 8006d84:	40002000 	.word	0x40002000

08006d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	f023 0201 	bic.w	r2, r3, #1
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f023 030a 	bic.w	r3, r3, #10
 8006dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b087      	sub	sp, #28
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	f023 0210 	bic.w	r2, r3, #16
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	031b      	lsls	r3, r3, #12
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	621a      	str	r2, [r3, #32]
}
 8006e3a:	bf00      	nop
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f043 0307 	orr.w	r3, r3, #7
 8006e68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	609a      	str	r2, [r3, #8]
}
 8006e70:	bf00      	nop
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	021a      	lsls	r2, r3, #8
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	609a      	str	r2, [r3, #8]
}
 8006eb0:	bf00      	nop
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e05a      	b.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a21      	ldr	r2, [pc, #132]	; (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d022      	beq.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f20:	d01d      	beq.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a1d      	ldr	r2, [pc, #116]	; (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d018      	beq.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1b      	ldr	r2, [pc, #108]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d013      	beq.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1a      	ldr	r2, [pc, #104]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00e      	beq.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a18      	ldr	r2, [pc, #96]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d009      	beq.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a17      	ldr	r2, [pc, #92]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d004      	beq.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a15      	ldr	r2, [pc, #84]	; (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d10c      	bne.n	8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	40010000 	.word	0x40010000
 8006f9c:	40000400 	.word	0x40000400
 8006fa0:	40000800 	.word	0x40000800
 8006fa4:	40000c00 	.word	0x40000c00
 8006fa8:	40010400 	.word	0x40010400
 8006fac:	40014000 	.word	0x40014000
 8006fb0:	40001800 	.word	0x40001800

08006fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d029      	beq.n	800704a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007002:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007006:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007010:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007016:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800701c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007022:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007028:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800702e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007034:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800703a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	e034      	b.n	80070b4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007056:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007060:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007066:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800707a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800707e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007088:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800708e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007094:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800709a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80070a0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b087      	sub	sp, #28
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d02e      	beq.n	800713a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80070e8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80070f8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	3b01      	subs	r3, #1
 8007100:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007102:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	3b01      	subs	r3, #1
 800710a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800710c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	3b01      	subs	r3, #1
 8007114:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007116:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	3b01      	subs	r3, #1
 800711e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007120:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	3b01      	subs	r3, #1
 8007128:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800712a:	4313      	orrs	r3, r2
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	609a      	str	r2, [r3, #8]
 8007138:	e03b      	b.n	80071b2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007146:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800714a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	3b01      	subs	r3, #1
 8007152:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	3b01      	subs	r3, #1
 800715a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800715c:	4313      	orrs	r3, r2
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007170:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	3b01      	subs	r3, #1
 800717e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007180:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	3b01      	subs	r3, #1
 8007188:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800718a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	3b01      	subs	r3, #1
 8007192:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007194:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	3b01      	subs	r3, #1
 800719c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800719e:	4313      	orrs	r3, r2
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	371c      	adds	r7, #28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80071dc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80071e6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80071ee:	4313      	orrs	r3, r2
 80071f0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80071f8:	f7fc f974 	bl	80034e4 <HAL_GetTick>
 80071fc:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80071fe:	e010      	b.n	8007222 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007206:	d00c      	beq.n	8007222 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d007      	beq.n	800721e <FMC_SDRAM_SendCommand+0x5e>
 800720e:	f7fc f969 	bl	80034e4 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	429a      	cmp	r2, r3
 800721c:	d201      	bcs.n	8007222 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e006      	b.n	8007230 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b20      	cmp	r3, #32
 800722c:	d0e8      	beq.n	8007200 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	695a      	ldr	r2, [r3, #20]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <gcvt>:
 8007260:	b530      	push	{r4, r5, lr}
 8007262:	ed2d 8b02 	vpush	{d8}
 8007266:	eeb0 8a40 	vmov.f32	s16, s0
 800726a:	eef0 8a60 	vmov.f32	s17, s1
 800726e:	460c      	mov	r4, r1
 8007270:	2200      	movs	r2, #0
 8007272:	b083      	sub	sp, #12
 8007274:	4605      	mov	r5, r0
 8007276:	2300      	movs	r3, #0
 8007278:	ec51 0b10 	vmov	r0, r1, d0
 800727c:	f7f9 fbe6 	bl	8000a4c <__aeabi_dcmplt>
 8007280:	4622      	mov	r2, r4
 8007282:	b118      	cbz	r0, 800728c <gcvt+0x2c>
 8007284:	232d      	movs	r3, #45	; 0x2d
 8007286:	f802 3b01 	strb.w	r3, [r2], #1
 800728a:	3d01      	subs	r5, #1
 800728c:	2300      	movs	r3, #0
 800728e:	4809      	ldr	r0, [pc, #36]	; (80072b4 <gcvt+0x54>)
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	4629      	mov	r1, r5
 8007294:	2367      	movs	r3, #103	; 0x67
 8007296:	eeb0 0a48 	vmov.f32	s0, s16
 800729a:	eef0 0a68 	vmov.f32	s1, s17
 800729e:	6800      	ldr	r0, [r0, #0]
 80072a0:	f000 f8b2 	bl	8007408 <_gcvt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	bf14      	ite	ne
 80072a8:	4620      	movne	r0, r4
 80072aa:	2000      	moveq	r0, #0
 80072ac:	b003      	add	sp, #12
 80072ae:	ecbd 8b02 	vpop	{d8}
 80072b2:	bd30      	pop	{r4, r5, pc}
 80072b4:	2000005c 	.word	0x2000005c

080072b8 <__errno>:
 80072b8:	4b01      	ldr	r3, [pc, #4]	; (80072c0 <__errno+0x8>)
 80072ba:	6818      	ldr	r0, [r3, #0]
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	2000005c 	.word	0x2000005c

080072c4 <__libc_init_array>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	4e0d      	ldr	r6, [pc, #52]	; (80072fc <__libc_init_array+0x38>)
 80072c8:	4c0d      	ldr	r4, [pc, #52]	; (8007300 <__libc_init_array+0x3c>)
 80072ca:	1ba4      	subs	r4, r4, r6
 80072cc:	10a4      	asrs	r4, r4, #2
 80072ce:	2500      	movs	r5, #0
 80072d0:	42a5      	cmp	r5, r4
 80072d2:	d109      	bne.n	80072e8 <__libc_init_array+0x24>
 80072d4:	4e0b      	ldr	r6, [pc, #44]	; (8007304 <__libc_init_array+0x40>)
 80072d6:	4c0c      	ldr	r4, [pc, #48]	; (8007308 <__libc_init_array+0x44>)
 80072d8:	f001 fb34 	bl	8008944 <_init>
 80072dc:	1ba4      	subs	r4, r4, r6
 80072de:	10a4      	asrs	r4, r4, #2
 80072e0:	2500      	movs	r5, #0
 80072e2:	42a5      	cmp	r5, r4
 80072e4:	d105      	bne.n	80072f2 <__libc_init_array+0x2e>
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072ec:	4798      	blx	r3
 80072ee:	3501      	adds	r5, #1
 80072f0:	e7ee      	b.n	80072d0 <__libc_init_array+0xc>
 80072f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072f6:	4798      	blx	r3
 80072f8:	3501      	adds	r5, #1
 80072fa:	e7f2      	b.n	80072e2 <__libc_init_array+0x1e>
 80072fc:	0800a8a4 	.word	0x0800a8a4
 8007300:	0800a8a4 	.word	0x0800a8a4
 8007304:	0800a8a4 	.word	0x0800a8a4
 8007308:	0800a8a8 	.word	0x0800a8a8

0800730c <memset>:
 800730c:	4402      	add	r2, r0
 800730e:	4603      	mov	r3, r0
 8007310:	4293      	cmp	r3, r2
 8007312:	d100      	bne.n	8007316 <memset+0xa>
 8007314:	4770      	bx	lr
 8007316:	f803 1b01 	strb.w	r1, [r3], #1
 800731a:	e7f9      	b.n	8007310 <memset+0x4>

0800731c <print_e>:
 800731c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800731e:	b087      	sub	sp, #28
 8007320:	ec43 2b10 	vmov	d0, r2, r3
 8007324:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007326:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800732a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800732c:	ab04      	add	r3, sp, #16
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	ab03      	add	r3, sp, #12
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	460f      	mov	r7, r1
 8007336:	ab05      	add	r3, sp, #20
 8007338:	2102      	movs	r1, #2
 800733a:	1c62      	adds	r2, r4, #1
 800733c:	f000 fd34 	bl	8007da8 <_dtoa_r>
 8007340:	4601      	mov	r1, r0
 8007342:	9805      	ldr	r0, [sp, #20]
 8007344:	f242 730f 	movw	r3, #9999	; 0x270f
 8007348:	4298      	cmp	r0, r3
 800734a:	d104      	bne.n	8007356 <print_e+0x3a>
 800734c:	4638      	mov	r0, r7
 800734e:	f000 fc97 	bl	8007c80 <strcpy>
 8007352:	b007      	add	sp, #28
 8007354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007356:	780b      	ldrb	r3, [r1, #0]
 8007358:	703b      	strb	r3, [r7, #0]
 800735a:	2d00      	cmp	r5, #0
 800735c:	d143      	bne.n	80073e6 <print_e+0xca>
 800735e:	2c00      	cmp	r4, #0
 8007360:	d141      	bne.n	80073e6 <print_e+0xca>
 8007362:	1c7b      	adds	r3, r7, #1
 8007364:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007368:	b10a      	cbz	r2, 800736e <print_e+0x52>
 800736a:	2c00      	cmp	r4, #0
 800736c:	dc3f      	bgt.n	80073ee <print_e+0xd2>
 800736e:	2e67      	cmp	r6, #103	; 0x67
 8007370:	d044      	beq.n	80073fc <print_e+0xe0>
 8007372:	2e47      	cmp	r6, #71	; 0x47
 8007374:	d044      	beq.n	8007400 <print_e+0xe4>
 8007376:	461a      	mov	r2, r3
 8007378:	191d      	adds	r5, r3, r4
 800737a:	2730      	movs	r7, #48	; 0x30
 800737c:	1aa9      	subs	r1, r5, r2
 800737e:	2900      	cmp	r1, #0
 8007380:	dc39      	bgt.n	80073f6 <print_e+0xda>
 8007382:	2c00      	cmp	r4, #0
 8007384:	bfa8      	it	ge
 8007386:	191b      	addge	r3, r3, r4
 8007388:	1e41      	subs	r1, r0, #1
 800738a:	2900      	cmp	r1, #0
 800738c:	bfb8      	it	lt
 800738e:	f1c0 0001 	rsblt	r0, r0, #1
 8007392:	9105      	str	r1, [sp, #20]
 8007394:	bfb8      	it	lt
 8007396:	9005      	strlt	r0, [sp, #20]
 8007398:	461a      	mov	r2, r3
 800739a:	9805      	ldr	r0, [sp, #20]
 800739c:	f802 6b02 	strb.w	r6, [r2], #2
 80073a0:	bfb5      	itete	lt
 80073a2:	212d      	movlt	r1, #45	; 0x2d
 80073a4:	212b      	movge	r1, #43	; 0x2b
 80073a6:	7059      	strblt	r1, [r3, #1]
 80073a8:	7059      	strbge	r1, [r3, #1]
 80073aa:	2863      	cmp	r0, #99	; 0x63
 80073ac:	dd0b      	ble.n	80073c6 <print_e+0xaa>
 80073ae:	2164      	movs	r1, #100	; 0x64
 80073b0:	fb90 f1f1 	sdiv	r1, r0, r1
 80073b4:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80073b8:	1cda      	adds	r2, r3, #3
 80073ba:	709c      	strb	r4, [r3, #2]
 80073bc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80073c0:	fb03 0101 	mla	r1, r3, r1, r0
 80073c4:	9105      	str	r1, [sp, #20]
 80073c6:	9905      	ldr	r1, [sp, #20]
 80073c8:	230a      	movs	r3, #10
 80073ca:	fb91 f3f3 	sdiv	r3, r1, r3
 80073ce:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80073d2:	7010      	strb	r0, [r2, #0]
 80073d4:	f06f 0009 	mvn.w	r0, #9
 80073d8:	fb00 1303 	mla	r3, r0, r3, r1
 80073dc:	3330      	adds	r3, #48	; 0x30
 80073de:	7053      	strb	r3, [r2, #1]
 80073e0:	2300      	movs	r3, #0
 80073e2:	7093      	strb	r3, [r2, #2]
 80073e4:	e7b5      	b.n	8007352 <print_e+0x36>
 80073e6:	222e      	movs	r2, #46	; 0x2e
 80073e8:	1cbb      	adds	r3, r7, #2
 80073ea:	707a      	strb	r2, [r7, #1]
 80073ec:	e7ba      	b.n	8007364 <print_e+0x48>
 80073ee:	f803 2b01 	strb.w	r2, [r3], #1
 80073f2:	3c01      	subs	r4, #1
 80073f4:	e7b6      	b.n	8007364 <print_e+0x48>
 80073f6:	f802 7b01 	strb.w	r7, [r2], #1
 80073fa:	e7bf      	b.n	800737c <print_e+0x60>
 80073fc:	2665      	movs	r6, #101	; 0x65
 80073fe:	e7c3      	b.n	8007388 <print_e+0x6c>
 8007400:	2645      	movs	r6, #69	; 0x45
 8007402:	e7c1      	b.n	8007388 <print_e+0x6c>
 8007404:	0000      	movs	r0, r0
	...

08007408 <_gcvt>:
 8007408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800740c:	ec55 4b10 	vmov	r4, r5, d0
 8007410:	b088      	sub	sp, #32
 8007412:	4681      	mov	r9, r0
 8007414:	460f      	mov	r7, r1
 8007416:	4616      	mov	r6, r2
 8007418:	469a      	mov	sl, r3
 800741a:	2200      	movs	r2, #0
 800741c:	2300      	movs	r3, #0
 800741e:	ee10 0a10 	vmov	r0, s0
 8007422:	4629      	mov	r1, r5
 8007424:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8007428:	f7f9 fb10 	bl	8000a4c <__aeabi_dcmplt>
 800742c:	b110      	cbz	r0, 8007434 <_gcvt+0x2c>
 800742e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007432:	461d      	mov	r5, r3
 8007434:	2200      	movs	r2, #0
 8007436:	2300      	movs	r3, #0
 8007438:	4620      	mov	r0, r4
 800743a:	4629      	mov	r1, r5
 800743c:	f7f9 fafc 	bl	8000a38 <__aeabi_dcmpeq>
 8007440:	b138      	cbz	r0, 8007452 <_gcvt+0x4a>
 8007442:	2330      	movs	r3, #48	; 0x30
 8007444:	7033      	strb	r3, [r6, #0]
 8007446:	2300      	movs	r3, #0
 8007448:	7073      	strb	r3, [r6, #1]
 800744a:	4630      	mov	r0, r6
 800744c:	b008      	add	sp, #32
 800744e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007452:	a350      	add	r3, pc, #320	; (adr r3, 8007594 <_gcvt+0x18c>)
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	4620      	mov	r0, r4
 800745a:	4629      	mov	r1, r5
 800745c:	f7f9 fb00 	bl	8000a60 <__aeabi_dcmple>
 8007460:	b150      	cbz	r0, 8007478 <_gcvt+0x70>
 8007462:	3f01      	subs	r7, #1
 8007464:	e9cd a801 	strd	sl, r8, [sp, #4]
 8007468:	9700      	str	r7, [sp, #0]
 800746a:	4622      	mov	r2, r4
 800746c:	462b      	mov	r3, r5
 800746e:	4631      	mov	r1, r6
 8007470:	4648      	mov	r0, r9
 8007472:	f7ff ff53 	bl	800731c <print_e>
 8007476:	e7e8      	b.n	800744a <_gcvt+0x42>
 8007478:	4638      	mov	r0, r7
 800747a:	f000 fb6b 	bl	8007b54 <_mprec_log10>
 800747e:	4622      	mov	r2, r4
 8007480:	462b      	mov	r3, r5
 8007482:	ec51 0b10 	vmov	r0, r1, d0
 8007486:	f7f9 faeb 	bl	8000a60 <__aeabi_dcmple>
 800748a:	2800      	cmp	r0, #0
 800748c:	d1e9      	bne.n	8007462 <_gcvt+0x5a>
 800748e:	2200      	movs	r2, #0
 8007490:	4b3f      	ldr	r3, [pc, #252]	; (8007590 <_gcvt+0x188>)
 8007492:	4620      	mov	r0, r4
 8007494:	4629      	mov	r1, r5
 8007496:	f7f9 fad9 	bl	8000a4c <__aeabi_dcmplt>
 800749a:	aa07      	add	r2, sp, #28
 800749c:	ab06      	add	r3, sp, #24
 800749e:	e9cd 3200 	strd	r3, r2, [sp]
 80074a2:	ab05      	add	r3, sp, #20
 80074a4:	463a      	mov	r2, r7
 80074a6:	b360      	cbz	r0, 8007502 <_gcvt+0xfa>
 80074a8:	2103      	movs	r1, #3
 80074aa:	ec45 4b10 	vmov	d0, r4, r5
 80074ae:	4648      	mov	r0, r9
 80074b0:	f000 fc7a 	bl	8007da8 <_dtoa_r>
 80074b4:	9a05      	ldr	r2, [sp, #20]
 80074b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d023      	beq.n	8007506 <_gcvt+0xfe>
 80074be:	4633      	mov	r3, r6
 80074c0:	4437      	add	r7, r6
 80074c2:	4601      	mov	r1, r0
 80074c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074c8:	9d05      	ldr	r5, [sp, #20]
 80074ca:	1afc      	subs	r4, r7, r3
 80074cc:	b32a      	cbz	r2, 800751a <_gcvt+0x112>
 80074ce:	2d00      	cmp	r5, #0
 80074d0:	dc1e      	bgt.n	8007510 <_gcvt+0x108>
 80074d2:	f1b8 0f00 	cmp.w	r8, #0
 80074d6:	d102      	bne.n	80074de <_gcvt+0xd6>
 80074d8:	780a      	ldrb	r2, [r1, #0]
 80074da:	2a00      	cmp	r2, #0
 80074dc:	d045      	beq.n	800756a <_gcvt+0x162>
 80074de:	429e      	cmp	r6, r3
 80074e0:	bf02      	ittt	eq
 80074e2:	1c73      	addeq	r3, r6, #1
 80074e4:	2230      	moveq	r2, #48	; 0x30
 80074e6:	7032      	strbeq	r2, [r6, #0]
 80074e8:	222e      	movs	r2, #46	; 0x2e
 80074ea:	701a      	strb	r2, [r3, #0]
 80074ec:	9a05      	ldr	r2, [sp, #20]
 80074ee:	3301      	adds	r3, #1
 80074f0:	2000      	movs	r0, #0
 80074f2:	2730      	movs	r7, #48	; 0x30
 80074f4:	2a00      	cmp	r2, #0
 80074f6:	4615      	mov	r5, r2
 80074f8:	db24      	blt.n	8007544 <_gcvt+0x13c>
 80074fa:	b100      	cbz	r0, 80074fe <_gcvt+0xf6>
 80074fc:	9205      	str	r2, [sp, #20]
 80074fe:	1e4a      	subs	r2, r1, #1
 8007500:	e02b      	b.n	800755a <_gcvt+0x152>
 8007502:	2102      	movs	r1, #2
 8007504:	e7d1      	b.n	80074aa <_gcvt+0xa2>
 8007506:	4601      	mov	r1, r0
 8007508:	4630      	mov	r0, r6
 800750a:	f000 fbb9 	bl	8007c80 <strcpy>
 800750e:	e79c      	b.n	800744a <_gcvt+0x42>
 8007510:	3d01      	subs	r5, #1
 8007512:	f803 2b01 	strb.w	r2, [r3], #1
 8007516:	9505      	str	r5, [sp, #20]
 8007518:	e7d3      	b.n	80074c2 <_gcvt+0xba>
 800751a:	1b2d      	subs	r5, r5, r4
 800751c:	2730      	movs	r7, #48	; 0x30
 800751e:	e005      	b.n	800752c <_gcvt+0x124>
 8007520:	2c00      	cmp	r4, #0
 8007522:	dd06      	ble.n	8007532 <_gcvt+0x12a>
 8007524:	f803 7b01 	strb.w	r7, [r3], #1
 8007528:	3c01      	subs	r4, #1
 800752a:	2201      	movs	r2, #1
 800752c:	1928      	adds	r0, r5, r4
 800752e:	2800      	cmp	r0, #0
 8007530:	dcf6      	bgt.n	8007520 <_gcvt+0x118>
 8007532:	2a00      	cmp	r2, #0
 8007534:	d0cd      	beq.n	80074d2 <_gcvt+0xca>
 8007536:	9005      	str	r0, [sp, #20]
 8007538:	e7cb      	b.n	80074d2 <_gcvt+0xca>
 800753a:	f803 7b01 	strb.w	r7, [r3], #1
 800753e:	3c01      	subs	r4, #1
 8007540:	2001      	movs	r0, #1
 8007542:	e7d7      	b.n	80074f4 <_gcvt+0xec>
 8007544:	2c00      	cmp	r4, #0
 8007546:	f102 0201 	add.w	r2, r2, #1
 800754a:	dcf6      	bgt.n	800753a <_gcvt+0x132>
 800754c:	2800      	cmp	r0, #0
 800754e:	d0d6      	beq.n	80074fe <_gcvt+0xf6>
 8007550:	9505      	str	r5, [sp, #20]
 8007552:	e7d4      	b.n	80074fe <_gcvt+0xf6>
 8007554:	f803 1b01 	strb.w	r1, [r3], #1
 8007558:	3c01      	subs	r4, #1
 800755a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800755e:	b109      	cbz	r1, 8007564 <_gcvt+0x15c>
 8007560:	2c00      	cmp	r4, #0
 8007562:	dcf7      	bgt.n	8007554 <_gcvt+0x14c>
 8007564:	f1b8 0f00 	cmp.w	r8, #0
 8007568:	d10b      	bne.n	8007582 <_gcvt+0x17a>
 800756a:	2200      	movs	r2, #0
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e76c      	b.n	800744a <_gcvt+0x42>
 8007570:	f802 5b01 	strb.w	r5, [r2], #1
 8007574:	1a81      	subs	r1, r0, r2
 8007576:	2900      	cmp	r1, #0
 8007578:	dcfa      	bgt.n	8007570 <_gcvt+0x168>
 800757a:	2c00      	cmp	r4, #0
 800757c:	bfa8      	it	ge
 800757e:	191b      	addge	r3, r3, r4
 8007580:	e7f3      	b.n	800756a <_gcvt+0x162>
 8007582:	461a      	mov	r2, r3
 8007584:	1918      	adds	r0, r3, r4
 8007586:	2530      	movs	r5, #48	; 0x30
 8007588:	e7f4      	b.n	8007574 <_gcvt+0x16c>
 800758a:	bf00      	nop
 800758c:	f3af 8000 	nop.w
 8007590:	3ff00000 	.word	0x3ff00000
 8007594:	eb1c432d 	.word	0xeb1c432d
 8007598:	3f1a36e2 	.word	0x3f1a36e2

0800759c <_Balloc>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075a0:	4604      	mov	r4, r0
 80075a2:	460e      	mov	r6, r1
 80075a4:	b93d      	cbnz	r5, 80075b6 <_Balloc+0x1a>
 80075a6:	2010      	movs	r0, #16
 80075a8:	f001 f9b6 	bl	8008918 <malloc>
 80075ac:	6260      	str	r0, [r4, #36]	; 0x24
 80075ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075b2:	6005      	str	r5, [r0, #0]
 80075b4:	60c5      	str	r5, [r0, #12]
 80075b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80075b8:	68eb      	ldr	r3, [r5, #12]
 80075ba:	b183      	cbz	r3, 80075de <_Balloc+0x42>
 80075bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80075c4:	b9b8      	cbnz	r0, 80075f6 <_Balloc+0x5a>
 80075c6:	2101      	movs	r1, #1
 80075c8:	fa01 f506 	lsl.w	r5, r1, r6
 80075cc:	1d6a      	adds	r2, r5, #5
 80075ce:	0092      	lsls	r2, r2, #2
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 fadd 	bl	8007b90 <_calloc_r>
 80075d6:	b160      	cbz	r0, 80075f2 <_Balloc+0x56>
 80075d8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80075dc:	e00e      	b.n	80075fc <_Balloc+0x60>
 80075de:	2221      	movs	r2, #33	; 0x21
 80075e0:	2104      	movs	r1, #4
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 fad4 	bl	8007b90 <_calloc_r>
 80075e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ea:	60e8      	str	r0, [r5, #12]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e4      	bne.n	80075bc <_Balloc+0x20>
 80075f2:	2000      	movs	r0, #0
 80075f4:	bd70      	pop	{r4, r5, r6, pc}
 80075f6:	6802      	ldr	r2, [r0, #0]
 80075f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80075fc:	2300      	movs	r3, #0
 80075fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007602:	e7f7      	b.n	80075f4 <_Balloc+0x58>

08007604 <_Bfree>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007608:	4606      	mov	r6, r0
 800760a:	460d      	mov	r5, r1
 800760c:	b93c      	cbnz	r4, 800761e <_Bfree+0x1a>
 800760e:	2010      	movs	r0, #16
 8007610:	f001 f982 	bl	8008918 <malloc>
 8007614:	6270      	str	r0, [r6, #36]	; 0x24
 8007616:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800761a:	6004      	str	r4, [r0, #0]
 800761c:	60c4      	str	r4, [r0, #12]
 800761e:	b13d      	cbz	r5, 8007630 <_Bfree+0x2c>
 8007620:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007622:	686a      	ldr	r2, [r5, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800762a:	6029      	str	r1, [r5, #0]
 800762c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007630:	bd70      	pop	{r4, r5, r6, pc}

08007632 <__multadd>:
 8007632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007636:	690d      	ldr	r5, [r1, #16]
 8007638:	461f      	mov	r7, r3
 800763a:	4606      	mov	r6, r0
 800763c:	460c      	mov	r4, r1
 800763e:	f101 0c14 	add.w	ip, r1, #20
 8007642:	2300      	movs	r3, #0
 8007644:	f8dc 0000 	ldr.w	r0, [ip]
 8007648:	b281      	uxth	r1, r0
 800764a:	fb02 7101 	mla	r1, r2, r1, r7
 800764e:	0c0f      	lsrs	r7, r1, #16
 8007650:	0c00      	lsrs	r0, r0, #16
 8007652:	fb02 7000 	mla	r0, r2, r0, r7
 8007656:	b289      	uxth	r1, r1
 8007658:	3301      	adds	r3, #1
 800765a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800765e:	429d      	cmp	r5, r3
 8007660:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007664:	f84c 1b04 	str.w	r1, [ip], #4
 8007668:	dcec      	bgt.n	8007644 <__multadd+0x12>
 800766a:	b1d7      	cbz	r7, 80076a2 <__multadd+0x70>
 800766c:	68a3      	ldr	r3, [r4, #8]
 800766e:	42ab      	cmp	r3, r5
 8007670:	dc12      	bgt.n	8007698 <__multadd+0x66>
 8007672:	6861      	ldr	r1, [r4, #4]
 8007674:	4630      	mov	r0, r6
 8007676:	3101      	adds	r1, #1
 8007678:	f7ff ff90 	bl	800759c <_Balloc>
 800767c:	6922      	ldr	r2, [r4, #16]
 800767e:	3202      	adds	r2, #2
 8007680:	f104 010c 	add.w	r1, r4, #12
 8007684:	4680      	mov	r8, r0
 8007686:	0092      	lsls	r2, r2, #2
 8007688:	300c      	adds	r0, #12
 800768a:	f001 f94d 	bl	8008928 <memcpy>
 800768e:	4621      	mov	r1, r4
 8007690:	4630      	mov	r0, r6
 8007692:	f7ff ffb7 	bl	8007604 <_Bfree>
 8007696:	4644      	mov	r4, r8
 8007698:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800769c:	3501      	adds	r5, #1
 800769e:	615f      	str	r7, [r3, #20]
 80076a0:	6125      	str	r5, [r4, #16]
 80076a2:	4620      	mov	r0, r4
 80076a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080076a8 <__hi0bits>:
 80076a8:	0c02      	lsrs	r2, r0, #16
 80076aa:	0412      	lsls	r2, r2, #16
 80076ac:	4603      	mov	r3, r0
 80076ae:	b9b2      	cbnz	r2, 80076de <__hi0bits+0x36>
 80076b0:	0403      	lsls	r3, r0, #16
 80076b2:	2010      	movs	r0, #16
 80076b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80076b8:	bf04      	itt	eq
 80076ba:	021b      	lsleq	r3, r3, #8
 80076bc:	3008      	addeq	r0, #8
 80076be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80076c2:	bf04      	itt	eq
 80076c4:	011b      	lsleq	r3, r3, #4
 80076c6:	3004      	addeq	r0, #4
 80076c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80076cc:	bf04      	itt	eq
 80076ce:	009b      	lsleq	r3, r3, #2
 80076d0:	3002      	addeq	r0, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	db06      	blt.n	80076e4 <__hi0bits+0x3c>
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	d503      	bpl.n	80076e2 <__hi0bits+0x3a>
 80076da:	3001      	adds	r0, #1
 80076dc:	4770      	bx	lr
 80076de:	2000      	movs	r0, #0
 80076e0:	e7e8      	b.n	80076b4 <__hi0bits+0xc>
 80076e2:	2020      	movs	r0, #32
 80076e4:	4770      	bx	lr

080076e6 <__lo0bits>:
 80076e6:	6803      	ldr	r3, [r0, #0]
 80076e8:	f013 0207 	ands.w	r2, r3, #7
 80076ec:	4601      	mov	r1, r0
 80076ee:	d00b      	beq.n	8007708 <__lo0bits+0x22>
 80076f0:	07da      	lsls	r2, r3, #31
 80076f2:	d423      	bmi.n	800773c <__lo0bits+0x56>
 80076f4:	0798      	lsls	r0, r3, #30
 80076f6:	bf49      	itett	mi
 80076f8:	085b      	lsrmi	r3, r3, #1
 80076fa:	089b      	lsrpl	r3, r3, #2
 80076fc:	2001      	movmi	r0, #1
 80076fe:	600b      	strmi	r3, [r1, #0]
 8007700:	bf5c      	itt	pl
 8007702:	600b      	strpl	r3, [r1, #0]
 8007704:	2002      	movpl	r0, #2
 8007706:	4770      	bx	lr
 8007708:	b298      	uxth	r0, r3
 800770a:	b9a8      	cbnz	r0, 8007738 <__lo0bits+0x52>
 800770c:	0c1b      	lsrs	r3, r3, #16
 800770e:	2010      	movs	r0, #16
 8007710:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007714:	bf04      	itt	eq
 8007716:	0a1b      	lsreq	r3, r3, #8
 8007718:	3008      	addeq	r0, #8
 800771a:	071a      	lsls	r2, r3, #28
 800771c:	bf04      	itt	eq
 800771e:	091b      	lsreq	r3, r3, #4
 8007720:	3004      	addeq	r0, #4
 8007722:	079a      	lsls	r2, r3, #30
 8007724:	bf04      	itt	eq
 8007726:	089b      	lsreq	r3, r3, #2
 8007728:	3002      	addeq	r0, #2
 800772a:	07da      	lsls	r2, r3, #31
 800772c:	d402      	bmi.n	8007734 <__lo0bits+0x4e>
 800772e:	085b      	lsrs	r3, r3, #1
 8007730:	d006      	beq.n	8007740 <__lo0bits+0x5a>
 8007732:	3001      	adds	r0, #1
 8007734:	600b      	str	r3, [r1, #0]
 8007736:	4770      	bx	lr
 8007738:	4610      	mov	r0, r2
 800773a:	e7e9      	b.n	8007710 <__lo0bits+0x2a>
 800773c:	2000      	movs	r0, #0
 800773e:	4770      	bx	lr
 8007740:	2020      	movs	r0, #32
 8007742:	4770      	bx	lr

08007744 <__i2b>:
 8007744:	b510      	push	{r4, lr}
 8007746:	460c      	mov	r4, r1
 8007748:	2101      	movs	r1, #1
 800774a:	f7ff ff27 	bl	800759c <_Balloc>
 800774e:	2201      	movs	r2, #1
 8007750:	6144      	str	r4, [r0, #20]
 8007752:	6102      	str	r2, [r0, #16]
 8007754:	bd10      	pop	{r4, pc}

08007756 <__multiply>:
 8007756:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775a:	4614      	mov	r4, r2
 800775c:	690a      	ldr	r2, [r1, #16]
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	429a      	cmp	r2, r3
 8007762:	bfb8      	it	lt
 8007764:	460b      	movlt	r3, r1
 8007766:	4688      	mov	r8, r1
 8007768:	bfbc      	itt	lt
 800776a:	46a0      	movlt	r8, r4
 800776c:	461c      	movlt	r4, r3
 800776e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007772:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007776:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800777a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800777e:	eb07 0609 	add.w	r6, r7, r9
 8007782:	42b3      	cmp	r3, r6
 8007784:	bfb8      	it	lt
 8007786:	3101      	addlt	r1, #1
 8007788:	f7ff ff08 	bl	800759c <_Balloc>
 800778c:	f100 0514 	add.w	r5, r0, #20
 8007790:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007794:	462b      	mov	r3, r5
 8007796:	2200      	movs	r2, #0
 8007798:	4573      	cmp	r3, lr
 800779a:	d316      	bcc.n	80077ca <__multiply+0x74>
 800779c:	f104 0214 	add.w	r2, r4, #20
 80077a0:	f108 0114 	add.w	r1, r8, #20
 80077a4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80077a8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	9b00      	ldr	r3, [sp, #0]
 80077b0:	9201      	str	r2, [sp, #4]
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d80c      	bhi.n	80077d0 <__multiply+0x7a>
 80077b6:	2e00      	cmp	r6, #0
 80077b8:	dd03      	ble.n	80077c2 <__multiply+0x6c>
 80077ba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d05d      	beq.n	800787e <__multiply+0x128>
 80077c2:	6106      	str	r6, [r0, #16]
 80077c4:	b003      	add	sp, #12
 80077c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ca:	f843 2b04 	str.w	r2, [r3], #4
 80077ce:	e7e3      	b.n	8007798 <__multiply+0x42>
 80077d0:	f8b2 b000 	ldrh.w	fp, [r2]
 80077d4:	f1bb 0f00 	cmp.w	fp, #0
 80077d8:	d023      	beq.n	8007822 <__multiply+0xcc>
 80077da:	4689      	mov	r9, r1
 80077dc:	46ac      	mov	ip, r5
 80077de:	f04f 0800 	mov.w	r8, #0
 80077e2:	f859 4b04 	ldr.w	r4, [r9], #4
 80077e6:	f8dc a000 	ldr.w	sl, [ip]
 80077ea:	b2a3      	uxth	r3, r4
 80077ec:	fa1f fa8a 	uxth.w	sl, sl
 80077f0:	fb0b a303 	mla	r3, fp, r3, sl
 80077f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80077f8:	f8dc 4000 	ldr.w	r4, [ip]
 80077fc:	4443      	add	r3, r8
 80077fe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007802:	fb0b 840a 	mla	r4, fp, sl, r8
 8007806:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800780a:	46e2      	mov	sl, ip
 800780c:	b29b      	uxth	r3, r3
 800780e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007812:	454f      	cmp	r7, r9
 8007814:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007818:	f84a 3b04 	str.w	r3, [sl], #4
 800781c:	d82b      	bhi.n	8007876 <__multiply+0x120>
 800781e:	f8cc 8004 	str.w	r8, [ip, #4]
 8007822:	9b01      	ldr	r3, [sp, #4]
 8007824:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007828:	3204      	adds	r2, #4
 800782a:	f1ba 0f00 	cmp.w	sl, #0
 800782e:	d020      	beq.n	8007872 <__multiply+0x11c>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	4689      	mov	r9, r1
 8007834:	46a8      	mov	r8, r5
 8007836:	f04f 0b00 	mov.w	fp, #0
 800783a:	f8b9 c000 	ldrh.w	ip, [r9]
 800783e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007842:	fb0a 440c 	mla	r4, sl, ip, r4
 8007846:	445c      	add	r4, fp
 8007848:	46c4      	mov	ip, r8
 800784a:	b29b      	uxth	r3, r3
 800784c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007850:	f84c 3b04 	str.w	r3, [ip], #4
 8007854:	f859 3b04 	ldr.w	r3, [r9], #4
 8007858:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800785c:	0c1b      	lsrs	r3, r3, #16
 800785e:	fb0a b303 	mla	r3, sl, r3, fp
 8007862:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007866:	454f      	cmp	r7, r9
 8007868:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800786c:	d805      	bhi.n	800787a <__multiply+0x124>
 800786e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007872:	3504      	adds	r5, #4
 8007874:	e79b      	b.n	80077ae <__multiply+0x58>
 8007876:	46d4      	mov	ip, sl
 8007878:	e7b3      	b.n	80077e2 <__multiply+0x8c>
 800787a:	46e0      	mov	r8, ip
 800787c:	e7dd      	b.n	800783a <__multiply+0xe4>
 800787e:	3e01      	subs	r6, #1
 8007880:	e799      	b.n	80077b6 <__multiply+0x60>
	...

08007884 <__pow5mult>:
 8007884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007888:	4615      	mov	r5, r2
 800788a:	f012 0203 	ands.w	r2, r2, #3
 800788e:	4606      	mov	r6, r0
 8007890:	460f      	mov	r7, r1
 8007892:	d007      	beq.n	80078a4 <__pow5mult+0x20>
 8007894:	3a01      	subs	r2, #1
 8007896:	4c21      	ldr	r4, [pc, #132]	; (800791c <__pow5mult+0x98>)
 8007898:	2300      	movs	r3, #0
 800789a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800789e:	f7ff fec8 	bl	8007632 <__multadd>
 80078a2:	4607      	mov	r7, r0
 80078a4:	10ad      	asrs	r5, r5, #2
 80078a6:	d035      	beq.n	8007914 <__pow5mult+0x90>
 80078a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078aa:	b93c      	cbnz	r4, 80078bc <__pow5mult+0x38>
 80078ac:	2010      	movs	r0, #16
 80078ae:	f001 f833 	bl	8008918 <malloc>
 80078b2:	6270      	str	r0, [r6, #36]	; 0x24
 80078b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078b8:	6004      	str	r4, [r0, #0]
 80078ba:	60c4      	str	r4, [r0, #12]
 80078bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078c4:	b94c      	cbnz	r4, 80078da <__pow5mult+0x56>
 80078c6:	f240 2171 	movw	r1, #625	; 0x271
 80078ca:	4630      	mov	r0, r6
 80078cc:	f7ff ff3a 	bl	8007744 <__i2b>
 80078d0:	2300      	movs	r3, #0
 80078d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80078d6:	4604      	mov	r4, r0
 80078d8:	6003      	str	r3, [r0, #0]
 80078da:	f04f 0800 	mov.w	r8, #0
 80078de:	07eb      	lsls	r3, r5, #31
 80078e0:	d50a      	bpl.n	80078f8 <__pow5mult+0x74>
 80078e2:	4639      	mov	r1, r7
 80078e4:	4622      	mov	r2, r4
 80078e6:	4630      	mov	r0, r6
 80078e8:	f7ff ff35 	bl	8007756 <__multiply>
 80078ec:	4639      	mov	r1, r7
 80078ee:	4681      	mov	r9, r0
 80078f0:	4630      	mov	r0, r6
 80078f2:	f7ff fe87 	bl	8007604 <_Bfree>
 80078f6:	464f      	mov	r7, r9
 80078f8:	106d      	asrs	r5, r5, #1
 80078fa:	d00b      	beq.n	8007914 <__pow5mult+0x90>
 80078fc:	6820      	ldr	r0, [r4, #0]
 80078fe:	b938      	cbnz	r0, 8007910 <__pow5mult+0x8c>
 8007900:	4622      	mov	r2, r4
 8007902:	4621      	mov	r1, r4
 8007904:	4630      	mov	r0, r6
 8007906:	f7ff ff26 	bl	8007756 <__multiply>
 800790a:	6020      	str	r0, [r4, #0]
 800790c:	f8c0 8000 	str.w	r8, [r0]
 8007910:	4604      	mov	r4, r0
 8007912:	e7e4      	b.n	80078de <__pow5mult+0x5a>
 8007914:	4638      	mov	r0, r7
 8007916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791a:	bf00      	nop
 800791c:	0800a880 	.word	0x0800a880

08007920 <__lshift>:
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	460c      	mov	r4, r1
 8007926:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800792a:	6923      	ldr	r3, [r4, #16]
 800792c:	6849      	ldr	r1, [r1, #4]
 800792e:	eb0a 0903 	add.w	r9, sl, r3
 8007932:	68a3      	ldr	r3, [r4, #8]
 8007934:	4607      	mov	r7, r0
 8007936:	4616      	mov	r6, r2
 8007938:	f109 0501 	add.w	r5, r9, #1
 800793c:	42ab      	cmp	r3, r5
 800793e:	db32      	blt.n	80079a6 <__lshift+0x86>
 8007940:	4638      	mov	r0, r7
 8007942:	f7ff fe2b 	bl	800759c <_Balloc>
 8007946:	2300      	movs	r3, #0
 8007948:	4680      	mov	r8, r0
 800794a:	f100 0114 	add.w	r1, r0, #20
 800794e:	461a      	mov	r2, r3
 8007950:	4553      	cmp	r3, sl
 8007952:	db2b      	blt.n	80079ac <__lshift+0x8c>
 8007954:	6920      	ldr	r0, [r4, #16]
 8007956:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800795a:	f104 0314 	add.w	r3, r4, #20
 800795e:	f016 021f 	ands.w	r2, r6, #31
 8007962:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007966:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800796a:	d025      	beq.n	80079b8 <__lshift+0x98>
 800796c:	f1c2 0e20 	rsb	lr, r2, #32
 8007970:	2000      	movs	r0, #0
 8007972:	681e      	ldr	r6, [r3, #0]
 8007974:	468a      	mov	sl, r1
 8007976:	4096      	lsls	r6, r2
 8007978:	4330      	orrs	r0, r6
 800797a:	f84a 0b04 	str.w	r0, [sl], #4
 800797e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007982:	459c      	cmp	ip, r3
 8007984:	fa20 f00e 	lsr.w	r0, r0, lr
 8007988:	d814      	bhi.n	80079b4 <__lshift+0x94>
 800798a:	6048      	str	r0, [r1, #4]
 800798c:	b108      	cbz	r0, 8007992 <__lshift+0x72>
 800798e:	f109 0502 	add.w	r5, r9, #2
 8007992:	3d01      	subs	r5, #1
 8007994:	4638      	mov	r0, r7
 8007996:	f8c8 5010 	str.w	r5, [r8, #16]
 800799a:	4621      	mov	r1, r4
 800799c:	f7ff fe32 	bl	8007604 <_Bfree>
 80079a0:	4640      	mov	r0, r8
 80079a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a6:	3101      	adds	r1, #1
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	e7c7      	b.n	800793c <__lshift+0x1c>
 80079ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80079b0:	3301      	adds	r3, #1
 80079b2:	e7cd      	b.n	8007950 <__lshift+0x30>
 80079b4:	4651      	mov	r1, sl
 80079b6:	e7dc      	b.n	8007972 <__lshift+0x52>
 80079b8:	3904      	subs	r1, #4
 80079ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80079be:	f841 2f04 	str.w	r2, [r1, #4]!
 80079c2:	459c      	cmp	ip, r3
 80079c4:	d8f9      	bhi.n	80079ba <__lshift+0x9a>
 80079c6:	e7e4      	b.n	8007992 <__lshift+0x72>

080079c8 <__mcmp>:
 80079c8:	6903      	ldr	r3, [r0, #16]
 80079ca:	690a      	ldr	r2, [r1, #16]
 80079cc:	1a9b      	subs	r3, r3, r2
 80079ce:	b530      	push	{r4, r5, lr}
 80079d0:	d10c      	bne.n	80079ec <__mcmp+0x24>
 80079d2:	0092      	lsls	r2, r2, #2
 80079d4:	3014      	adds	r0, #20
 80079d6:	3114      	adds	r1, #20
 80079d8:	1884      	adds	r4, r0, r2
 80079da:	4411      	add	r1, r2
 80079dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079e4:	4295      	cmp	r5, r2
 80079e6:	d003      	beq.n	80079f0 <__mcmp+0x28>
 80079e8:	d305      	bcc.n	80079f6 <__mcmp+0x2e>
 80079ea:	2301      	movs	r3, #1
 80079ec:	4618      	mov	r0, r3
 80079ee:	bd30      	pop	{r4, r5, pc}
 80079f0:	42a0      	cmp	r0, r4
 80079f2:	d3f3      	bcc.n	80079dc <__mcmp+0x14>
 80079f4:	e7fa      	b.n	80079ec <__mcmp+0x24>
 80079f6:	f04f 33ff 	mov.w	r3, #4294967295
 80079fa:	e7f7      	b.n	80079ec <__mcmp+0x24>

080079fc <__mdiff>:
 80079fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a00:	460d      	mov	r5, r1
 8007a02:	4607      	mov	r7, r0
 8007a04:	4611      	mov	r1, r2
 8007a06:	4628      	mov	r0, r5
 8007a08:	4614      	mov	r4, r2
 8007a0a:	f7ff ffdd 	bl	80079c8 <__mcmp>
 8007a0e:	1e06      	subs	r6, r0, #0
 8007a10:	d108      	bne.n	8007a24 <__mdiff+0x28>
 8007a12:	4631      	mov	r1, r6
 8007a14:	4638      	mov	r0, r7
 8007a16:	f7ff fdc1 	bl	800759c <_Balloc>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a24:	bfa4      	itt	ge
 8007a26:	4623      	movge	r3, r4
 8007a28:	462c      	movge	r4, r5
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	6861      	ldr	r1, [r4, #4]
 8007a2e:	bfa6      	itte	ge
 8007a30:	461d      	movge	r5, r3
 8007a32:	2600      	movge	r6, #0
 8007a34:	2601      	movlt	r6, #1
 8007a36:	f7ff fdb1 	bl	800759c <_Balloc>
 8007a3a:	692b      	ldr	r3, [r5, #16]
 8007a3c:	60c6      	str	r6, [r0, #12]
 8007a3e:	6926      	ldr	r6, [r4, #16]
 8007a40:	f105 0914 	add.w	r9, r5, #20
 8007a44:	f104 0214 	add.w	r2, r4, #20
 8007a48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007a4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007a50:	f100 0514 	add.w	r5, r0, #20
 8007a54:	f04f 0e00 	mov.w	lr, #0
 8007a58:	f852 ab04 	ldr.w	sl, [r2], #4
 8007a5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007a60:	fa1e f18a 	uxtah	r1, lr, sl
 8007a64:	b2a3      	uxth	r3, r4
 8007a66:	1ac9      	subs	r1, r1, r3
 8007a68:	0c23      	lsrs	r3, r4, #16
 8007a6a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007a6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007a72:	b289      	uxth	r1, r1
 8007a74:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007a78:	45c8      	cmp	r8, r9
 8007a7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007a7e:	4694      	mov	ip, r2
 8007a80:	f845 3b04 	str.w	r3, [r5], #4
 8007a84:	d8e8      	bhi.n	8007a58 <__mdiff+0x5c>
 8007a86:	45bc      	cmp	ip, r7
 8007a88:	d304      	bcc.n	8007a94 <__mdiff+0x98>
 8007a8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007a8e:	b183      	cbz	r3, 8007ab2 <__mdiff+0xb6>
 8007a90:	6106      	str	r6, [r0, #16]
 8007a92:	e7c5      	b.n	8007a20 <__mdiff+0x24>
 8007a94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007a98:	fa1e f381 	uxtah	r3, lr, r1
 8007a9c:	141a      	asrs	r2, r3, #16
 8007a9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aa8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007aac:	f845 3b04 	str.w	r3, [r5], #4
 8007ab0:	e7e9      	b.n	8007a86 <__mdiff+0x8a>
 8007ab2:	3e01      	subs	r6, #1
 8007ab4:	e7e9      	b.n	8007a8a <__mdiff+0x8e>

08007ab6 <__d2b>:
 8007ab6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007aba:	460e      	mov	r6, r1
 8007abc:	2101      	movs	r1, #1
 8007abe:	ec59 8b10 	vmov	r8, r9, d0
 8007ac2:	4615      	mov	r5, r2
 8007ac4:	f7ff fd6a 	bl	800759c <_Balloc>
 8007ac8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007acc:	4607      	mov	r7, r0
 8007ace:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ad2:	bb34      	cbnz	r4, 8007b22 <__d2b+0x6c>
 8007ad4:	9301      	str	r3, [sp, #4]
 8007ad6:	f1b8 0300 	subs.w	r3, r8, #0
 8007ada:	d027      	beq.n	8007b2c <__d2b+0x76>
 8007adc:	a802      	add	r0, sp, #8
 8007ade:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007ae2:	f7ff fe00 	bl	80076e6 <__lo0bits>
 8007ae6:	9900      	ldr	r1, [sp, #0]
 8007ae8:	b1f0      	cbz	r0, 8007b28 <__d2b+0x72>
 8007aea:	9a01      	ldr	r2, [sp, #4]
 8007aec:	f1c0 0320 	rsb	r3, r0, #32
 8007af0:	fa02 f303 	lsl.w	r3, r2, r3
 8007af4:	430b      	orrs	r3, r1
 8007af6:	40c2      	lsrs	r2, r0
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	9201      	str	r2, [sp, #4]
 8007afc:	9b01      	ldr	r3, [sp, #4]
 8007afe:	61bb      	str	r3, [r7, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bf14      	ite	ne
 8007b04:	2102      	movne	r1, #2
 8007b06:	2101      	moveq	r1, #1
 8007b08:	6139      	str	r1, [r7, #16]
 8007b0a:	b1c4      	cbz	r4, 8007b3e <__d2b+0x88>
 8007b0c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007b10:	4404      	add	r4, r0
 8007b12:	6034      	str	r4, [r6, #0]
 8007b14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b18:	6028      	str	r0, [r5, #0]
 8007b1a:	4638      	mov	r0, r7
 8007b1c:	b003      	add	sp, #12
 8007b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b26:	e7d5      	b.n	8007ad4 <__d2b+0x1e>
 8007b28:	6179      	str	r1, [r7, #20]
 8007b2a:	e7e7      	b.n	8007afc <__d2b+0x46>
 8007b2c:	a801      	add	r0, sp, #4
 8007b2e:	f7ff fdda 	bl	80076e6 <__lo0bits>
 8007b32:	9b01      	ldr	r3, [sp, #4]
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	2101      	movs	r1, #1
 8007b38:	6139      	str	r1, [r7, #16]
 8007b3a:	3020      	adds	r0, #32
 8007b3c:	e7e5      	b.n	8007b0a <__d2b+0x54>
 8007b3e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007b42:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b46:	6030      	str	r0, [r6, #0]
 8007b48:	6918      	ldr	r0, [r3, #16]
 8007b4a:	f7ff fdad 	bl	80076a8 <__hi0bits>
 8007b4e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007b52:	e7e1      	b.n	8007b18 <__d2b+0x62>

08007b54 <_mprec_log10>:
 8007b54:	2817      	cmp	r0, #23
 8007b56:	b5d0      	push	{r4, r6, r7, lr}
 8007b58:	4604      	mov	r4, r0
 8007b5a:	dc07      	bgt.n	8007b6c <_mprec_log10+0x18>
 8007b5c:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <_mprec_log10+0x30>)
 8007b5e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8007b62:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007b66:	ec41 0b10 	vmov	d0, r0, r1
 8007b6a:	bdd0      	pop	{r4, r6, r7, pc}
 8007b6c:	4906      	ldr	r1, [pc, #24]	; (8007b88 <_mprec_log10+0x34>)
 8007b6e:	4f07      	ldr	r7, [pc, #28]	; (8007b8c <_mprec_log10+0x38>)
 8007b70:	2000      	movs	r0, #0
 8007b72:	2600      	movs	r6, #0
 8007b74:	4632      	mov	r2, r6
 8007b76:	463b      	mov	r3, r7
 8007b78:	f7f8 fcf6 	bl	8000568 <__aeabi_dmul>
 8007b7c:	3c01      	subs	r4, #1
 8007b7e:	d1f9      	bne.n	8007b74 <_mprec_log10+0x20>
 8007b80:	e7f1      	b.n	8007b66 <_mprec_log10+0x12>
 8007b82:	bf00      	nop
 8007b84:	0800a7b8 	.word	0x0800a7b8
 8007b88:	3ff00000 	.word	0x3ff00000
 8007b8c:	40240000 	.word	0x40240000

08007b90 <_calloc_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	fb02 f401 	mul.w	r4, r2, r1
 8007b96:	4621      	mov	r1, r4
 8007b98:	f000 f808 	bl	8007bac <_malloc_r>
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	b118      	cbz	r0, 8007ba8 <_calloc_r+0x18>
 8007ba0:	4622      	mov	r2, r4
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	f7ff fbb2 	bl	800730c <memset>
 8007ba8:	4628      	mov	r0, r5
 8007baa:	bd38      	pop	{r3, r4, r5, pc}

08007bac <_malloc_r>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	1ccd      	adds	r5, r1, #3
 8007bb0:	f025 0503 	bic.w	r5, r5, #3
 8007bb4:	3508      	adds	r5, #8
 8007bb6:	2d0c      	cmp	r5, #12
 8007bb8:	bf38      	it	cc
 8007bba:	250c      	movcc	r5, #12
 8007bbc:	2d00      	cmp	r5, #0
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	db01      	blt.n	8007bc6 <_malloc_r+0x1a>
 8007bc2:	42a9      	cmp	r1, r5
 8007bc4:	d903      	bls.n	8007bce <_malloc_r+0x22>
 8007bc6:	230c      	movs	r3, #12
 8007bc8:	6033      	str	r3, [r6, #0]
 8007bca:	2000      	movs	r0, #0
 8007bcc:	bd70      	pop	{r4, r5, r6, pc}
 8007bce:	f000 feb6 	bl	800893e <__malloc_lock>
 8007bd2:	4a21      	ldr	r2, [pc, #132]	; (8007c58 <_malloc_r+0xac>)
 8007bd4:	6814      	ldr	r4, [r2, #0]
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	b991      	cbnz	r1, 8007c00 <_malloc_r+0x54>
 8007bda:	4c20      	ldr	r4, [pc, #128]	; (8007c5c <_malloc_r+0xb0>)
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	b91b      	cbnz	r3, 8007be8 <_malloc_r+0x3c>
 8007be0:	4630      	mov	r0, r6
 8007be2:	f000 f83d 	bl	8007c60 <_sbrk_r>
 8007be6:	6020      	str	r0, [r4, #0]
 8007be8:	4629      	mov	r1, r5
 8007bea:	4630      	mov	r0, r6
 8007bec:	f000 f838 	bl	8007c60 <_sbrk_r>
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	d124      	bne.n	8007c3e <_malloc_r+0x92>
 8007bf4:	230c      	movs	r3, #12
 8007bf6:	6033      	str	r3, [r6, #0]
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f000 fea1 	bl	8008940 <__malloc_unlock>
 8007bfe:	e7e4      	b.n	8007bca <_malloc_r+0x1e>
 8007c00:	680b      	ldr	r3, [r1, #0]
 8007c02:	1b5b      	subs	r3, r3, r5
 8007c04:	d418      	bmi.n	8007c38 <_malloc_r+0x8c>
 8007c06:	2b0b      	cmp	r3, #11
 8007c08:	d90f      	bls.n	8007c2a <_malloc_r+0x7e>
 8007c0a:	600b      	str	r3, [r1, #0]
 8007c0c:	50cd      	str	r5, [r1, r3]
 8007c0e:	18cc      	adds	r4, r1, r3
 8007c10:	4630      	mov	r0, r6
 8007c12:	f000 fe95 	bl	8008940 <__malloc_unlock>
 8007c16:	f104 000b 	add.w	r0, r4, #11
 8007c1a:	1d23      	adds	r3, r4, #4
 8007c1c:	f020 0007 	bic.w	r0, r0, #7
 8007c20:	1ac3      	subs	r3, r0, r3
 8007c22:	d0d3      	beq.n	8007bcc <_malloc_r+0x20>
 8007c24:	425a      	negs	r2, r3
 8007c26:	50e2      	str	r2, [r4, r3]
 8007c28:	e7d0      	b.n	8007bcc <_malloc_r+0x20>
 8007c2a:	428c      	cmp	r4, r1
 8007c2c:	684b      	ldr	r3, [r1, #4]
 8007c2e:	bf16      	itet	ne
 8007c30:	6063      	strne	r3, [r4, #4]
 8007c32:	6013      	streq	r3, [r2, #0]
 8007c34:	460c      	movne	r4, r1
 8007c36:	e7eb      	b.n	8007c10 <_malloc_r+0x64>
 8007c38:	460c      	mov	r4, r1
 8007c3a:	6849      	ldr	r1, [r1, #4]
 8007c3c:	e7cc      	b.n	8007bd8 <_malloc_r+0x2c>
 8007c3e:	1cc4      	adds	r4, r0, #3
 8007c40:	f024 0403 	bic.w	r4, r4, #3
 8007c44:	42a0      	cmp	r0, r4
 8007c46:	d005      	beq.n	8007c54 <_malloc_r+0xa8>
 8007c48:	1a21      	subs	r1, r4, r0
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f000 f808 	bl	8007c60 <_sbrk_r>
 8007c50:	3001      	adds	r0, #1
 8007c52:	d0cf      	beq.n	8007bf4 <_malloc_r+0x48>
 8007c54:	6025      	str	r5, [r4, #0]
 8007c56:	e7db      	b.n	8007c10 <_malloc_r+0x64>
 8007c58:	2000028c 	.word	0x2000028c
 8007c5c:	20000290 	.word	0x20000290

08007c60 <_sbrk_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4c06      	ldr	r4, [pc, #24]	; (8007c7c <_sbrk_r+0x1c>)
 8007c64:	2300      	movs	r3, #0
 8007c66:	4605      	mov	r5, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	6023      	str	r3, [r4, #0]
 8007c6c:	f7fa f98e 	bl	8001f8c <_sbrk>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_sbrk_r+0x1a>
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_sbrk_r+0x1a>
 8007c78:	602b      	str	r3, [r5, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	200005d4 	.word	0x200005d4

08007c80 <strcpy>:
 8007c80:	4603      	mov	r3, r0
 8007c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c86:	f803 2b01 	strb.w	r2, [r3], #1
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	d1f9      	bne.n	8007c82 <strcpy+0x2>
 8007c8e:	4770      	bx	lr

08007c90 <quorem>:
 8007c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	6903      	ldr	r3, [r0, #16]
 8007c96:	690c      	ldr	r4, [r1, #16]
 8007c98:	42a3      	cmp	r3, r4
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	f2c0 8082 	blt.w	8007da4 <quorem+0x114>
 8007ca0:	3c01      	subs	r4, #1
 8007ca2:	f101 0714 	add.w	r7, r1, #20
 8007ca6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007caa:	f100 0614 	add.w	r6, r0, #20
 8007cae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007cb2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007cb6:	eb06 030c 	add.w	r3, r6, ip
 8007cba:	3501      	adds	r5, #1
 8007cbc:	eb07 090c 	add.w	r9, r7, ip
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	fbb0 f5f5 	udiv	r5, r0, r5
 8007cc6:	b395      	cbz	r5, 8007d2e <quorem+0x9e>
 8007cc8:	f04f 0a00 	mov.w	sl, #0
 8007ccc:	4638      	mov	r0, r7
 8007cce:	46b6      	mov	lr, r6
 8007cd0:	46d3      	mov	fp, sl
 8007cd2:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cd6:	b293      	uxth	r3, r2
 8007cd8:	fb05 a303 	mla	r3, r5, r3, sl
 8007cdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	ebab 0303 	sub.w	r3, fp, r3
 8007ce6:	0c12      	lsrs	r2, r2, #16
 8007ce8:	f8de b000 	ldr.w	fp, [lr]
 8007cec:	fb05 a202 	mla	r2, r5, r2, sl
 8007cf0:	fa13 f38b 	uxtah	r3, r3, fp
 8007cf4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007cf8:	fa1f fb82 	uxth.w	fp, r2
 8007cfc:	f8de 2000 	ldr.w	r2, [lr]
 8007d00:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007d04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d0e:	4581      	cmp	r9, r0
 8007d10:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007d14:	f84e 3b04 	str.w	r3, [lr], #4
 8007d18:	d2db      	bcs.n	8007cd2 <quorem+0x42>
 8007d1a:	f856 300c 	ldr.w	r3, [r6, ip]
 8007d1e:	b933      	cbnz	r3, 8007d2e <quorem+0x9e>
 8007d20:	9b01      	ldr	r3, [sp, #4]
 8007d22:	3b04      	subs	r3, #4
 8007d24:	429e      	cmp	r6, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	d330      	bcc.n	8007d8c <quorem+0xfc>
 8007d2a:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d2e:	4640      	mov	r0, r8
 8007d30:	f7ff fe4a 	bl	80079c8 <__mcmp>
 8007d34:	2800      	cmp	r0, #0
 8007d36:	db25      	blt.n	8007d84 <quorem+0xf4>
 8007d38:	3501      	adds	r5, #1
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f04f 0c00 	mov.w	ip, #0
 8007d40:	f857 2b04 	ldr.w	r2, [r7], #4
 8007d44:	f8d0 e000 	ldr.w	lr, [r0]
 8007d48:	b293      	uxth	r3, r2
 8007d4a:	ebac 0303 	sub.w	r3, ip, r3
 8007d4e:	0c12      	lsrs	r2, r2, #16
 8007d50:	fa13 f38e 	uxtah	r3, r3, lr
 8007d54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d62:	45b9      	cmp	r9, r7
 8007d64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d68:	f840 3b04 	str.w	r3, [r0], #4
 8007d6c:	d2e8      	bcs.n	8007d40 <quorem+0xb0>
 8007d6e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007d72:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007d76:	b92a      	cbnz	r2, 8007d84 <quorem+0xf4>
 8007d78:	3b04      	subs	r3, #4
 8007d7a:	429e      	cmp	r6, r3
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	d30b      	bcc.n	8007d98 <quorem+0x108>
 8007d80:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d84:	4628      	mov	r0, r5
 8007d86:	b003      	add	sp, #12
 8007d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8c:	6812      	ldr	r2, [r2, #0]
 8007d8e:	3b04      	subs	r3, #4
 8007d90:	2a00      	cmp	r2, #0
 8007d92:	d1ca      	bne.n	8007d2a <quorem+0x9a>
 8007d94:	3c01      	subs	r4, #1
 8007d96:	e7c5      	b.n	8007d24 <quorem+0x94>
 8007d98:	6812      	ldr	r2, [r2, #0]
 8007d9a:	3b04      	subs	r3, #4
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	d1ef      	bne.n	8007d80 <quorem+0xf0>
 8007da0:	3c01      	subs	r4, #1
 8007da2:	e7ea      	b.n	8007d7a <quorem+0xea>
 8007da4:	2000      	movs	r0, #0
 8007da6:	e7ee      	b.n	8007d86 <quorem+0xf6>

08007da8 <_dtoa_r>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	ec57 6b10 	vmov	r6, r7, d0
 8007db0:	b097      	sub	sp, #92	; 0x5c
 8007db2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007db4:	9106      	str	r1, [sp, #24]
 8007db6:	4604      	mov	r4, r0
 8007db8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007dba:	9312      	str	r3, [sp, #72]	; 0x48
 8007dbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007dc0:	e9cd 6700 	strd	r6, r7, [sp]
 8007dc4:	b93d      	cbnz	r5, 8007dd6 <_dtoa_r+0x2e>
 8007dc6:	2010      	movs	r0, #16
 8007dc8:	f000 fda6 	bl	8008918 <malloc>
 8007dcc:	6260      	str	r0, [r4, #36]	; 0x24
 8007dce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007dd2:	6005      	str	r5, [r0, #0]
 8007dd4:	60c5      	str	r5, [r0, #12]
 8007dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dd8:	6819      	ldr	r1, [r3, #0]
 8007dda:	b151      	cbz	r1, 8007df2 <_dtoa_r+0x4a>
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	604a      	str	r2, [r1, #4]
 8007de0:	2301      	movs	r3, #1
 8007de2:	4093      	lsls	r3, r2
 8007de4:	608b      	str	r3, [r1, #8]
 8007de6:	4620      	mov	r0, r4
 8007de8:	f7ff fc0c 	bl	8007604 <_Bfree>
 8007dec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dee:	2200      	movs	r2, #0
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	1e3b      	subs	r3, r7, #0
 8007df4:	bfbb      	ittet	lt
 8007df6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007dfa:	9301      	strlt	r3, [sp, #4]
 8007dfc:	2300      	movge	r3, #0
 8007dfe:	2201      	movlt	r2, #1
 8007e00:	bfac      	ite	ge
 8007e02:	f8c8 3000 	strge.w	r3, [r8]
 8007e06:	f8c8 2000 	strlt.w	r2, [r8]
 8007e0a:	4baf      	ldr	r3, [pc, #700]	; (80080c8 <_dtoa_r+0x320>)
 8007e0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e10:	ea33 0308 	bics.w	r3, r3, r8
 8007e14:	d114      	bne.n	8007e40 <_dtoa_r+0x98>
 8007e16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e18:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	9b00      	ldr	r3, [sp, #0]
 8007e20:	b923      	cbnz	r3, 8007e2c <_dtoa_r+0x84>
 8007e22:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007e26:	2800      	cmp	r0, #0
 8007e28:	f000 8542 	beq.w	80088b0 <_dtoa_r+0xb08>
 8007e2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e2e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80080dc <_dtoa_r+0x334>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 8544 	beq.w	80088c0 <_dtoa_r+0xb18>
 8007e38:	f10b 0303 	add.w	r3, fp, #3
 8007e3c:	f000 bd3e 	b.w	80088bc <_dtoa_r+0xb14>
 8007e40:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e44:	2200      	movs	r2, #0
 8007e46:	2300      	movs	r3, #0
 8007e48:	4630      	mov	r0, r6
 8007e4a:	4639      	mov	r1, r7
 8007e4c:	f7f8 fdf4 	bl	8000a38 <__aeabi_dcmpeq>
 8007e50:	4681      	mov	r9, r0
 8007e52:	b168      	cbz	r0, 8007e70 <_dtoa_r+0xc8>
 8007e54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e56:	2301      	movs	r3, #1
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 8524 	beq.w	80088aa <_dtoa_r+0xb02>
 8007e62:	4b9a      	ldr	r3, [pc, #616]	; (80080cc <_dtoa_r+0x324>)
 8007e64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e66:	f103 3bff 	add.w	fp, r3, #4294967295
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	f000 bd28 	b.w	80088c0 <_dtoa_r+0xb18>
 8007e70:	aa14      	add	r2, sp, #80	; 0x50
 8007e72:	a915      	add	r1, sp, #84	; 0x54
 8007e74:	ec47 6b10 	vmov	d0, r6, r7
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f7ff fe1c 	bl	8007ab6 <__d2b>
 8007e7e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007e82:	9004      	str	r0, [sp, #16]
 8007e84:	2d00      	cmp	r5, #0
 8007e86:	d07c      	beq.n	8007f82 <_dtoa_r+0x1da>
 8007e88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e8c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007e90:	46b2      	mov	sl, r6
 8007e92:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007e96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e9a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4b8b      	ldr	r3, [pc, #556]	; (80080d0 <_dtoa_r+0x328>)
 8007ea2:	4650      	mov	r0, sl
 8007ea4:	4659      	mov	r1, fp
 8007ea6:	f7f8 f9a7 	bl	80001f8 <__aeabi_dsub>
 8007eaa:	a381      	add	r3, pc, #516	; (adr r3, 80080b0 <_dtoa_r+0x308>)
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	f7f8 fb5a 	bl	8000568 <__aeabi_dmul>
 8007eb4:	a380      	add	r3, pc, #512	; (adr r3, 80080b8 <_dtoa_r+0x310>)
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f7f8 f99f 	bl	80001fc <__adddf3>
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	460f      	mov	r7, r1
 8007ec4:	f7f8 fae6 	bl	8000494 <__aeabi_i2d>
 8007ec8:	a37d      	add	r3, pc, #500	; (adr r3, 80080c0 <_dtoa_r+0x318>)
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	f7f8 fb4b 	bl	8000568 <__aeabi_dmul>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	4639      	mov	r1, r7
 8007eda:	f7f8 f98f 	bl	80001fc <__adddf3>
 8007ede:	4606      	mov	r6, r0
 8007ee0:	460f      	mov	r7, r1
 8007ee2:	f7f8 fddb 	bl	8000a9c <__aeabi_d2iz>
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	4682      	mov	sl, r0
 8007eea:	2300      	movs	r3, #0
 8007eec:	4630      	mov	r0, r6
 8007eee:	4639      	mov	r1, r7
 8007ef0:	f7f8 fdac 	bl	8000a4c <__aeabi_dcmplt>
 8007ef4:	b148      	cbz	r0, 8007f0a <_dtoa_r+0x162>
 8007ef6:	4650      	mov	r0, sl
 8007ef8:	f7f8 facc 	bl	8000494 <__aeabi_i2d>
 8007efc:	4632      	mov	r2, r6
 8007efe:	463b      	mov	r3, r7
 8007f00:	f7f8 fd9a 	bl	8000a38 <__aeabi_dcmpeq>
 8007f04:	b908      	cbnz	r0, 8007f0a <_dtoa_r+0x162>
 8007f06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f0a:	f1ba 0f16 	cmp.w	sl, #22
 8007f0e:	d859      	bhi.n	8007fc4 <_dtoa_r+0x21c>
 8007f10:	4970      	ldr	r1, [pc, #448]	; (80080d4 <_dtoa_r+0x32c>)
 8007f12:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f1e:	f7f8 fdb3 	bl	8000a88 <__aeabi_dcmpgt>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d050      	beq.n	8007fc8 <_dtoa_r+0x220>
 8007f26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f30:	1b5d      	subs	r5, r3, r5
 8007f32:	f1b5 0801 	subs.w	r8, r5, #1
 8007f36:	bf49      	itett	mi
 8007f38:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f3c:	2300      	movpl	r3, #0
 8007f3e:	9305      	strmi	r3, [sp, #20]
 8007f40:	f04f 0800 	movmi.w	r8, #0
 8007f44:	bf58      	it	pl
 8007f46:	9305      	strpl	r3, [sp, #20]
 8007f48:	f1ba 0f00 	cmp.w	sl, #0
 8007f4c:	db3e      	blt.n	8007fcc <_dtoa_r+0x224>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	44d0      	add	r8, sl
 8007f52:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	9b06      	ldr	r3, [sp, #24]
 8007f5a:	2b09      	cmp	r3, #9
 8007f5c:	f200 8090 	bhi.w	8008080 <_dtoa_r+0x2d8>
 8007f60:	2b05      	cmp	r3, #5
 8007f62:	bfc4      	itt	gt
 8007f64:	3b04      	subgt	r3, #4
 8007f66:	9306      	strgt	r3, [sp, #24]
 8007f68:	9b06      	ldr	r3, [sp, #24]
 8007f6a:	f1a3 0302 	sub.w	r3, r3, #2
 8007f6e:	bfcc      	ite	gt
 8007f70:	2500      	movgt	r5, #0
 8007f72:	2501      	movle	r5, #1
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	f200 808f 	bhi.w	8008098 <_dtoa_r+0x2f0>
 8007f7a:	e8df f003 	tbb	[pc, r3]
 8007f7e:	7f7d      	.short	0x7f7d
 8007f80:	7131      	.short	0x7131
 8007f82:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007f86:	441d      	add	r5, r3
 8007f88:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007f8c:	2820      	cmp	r0, #32
 8007f8e:	dd13      	ble.n	8007fb8 <_dtoa_r+0x210>
 8007f90:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007f94:	9b00      	ldr	r3, [sp, #0]
 8007f96:	fa08 f800 	lsl.w	r8, r8, r0
 8007f9a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007f9e:	fa23 f000 	lsr.w	r0, r3, r0
 8007fa2:	ea48 0000 	orr.w	r0, r8, r0
 8007fa6:	f7f8 fa65 	bl	8000474 <__aeabi_ui2d>
 8007faa:	2301      	movs	r3, #1
 8007fac:	4682      	mov	sl, r0
 8007fae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007fb2:	3d01      	subs	r5, #1
 8007fb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007fb6:	e772      	b.n	8007e9e <_dtoa_r+0xf6>
 8007fb8:	9b00      	ldr	r3, [sp, #0]
 8007fba:	f1c0 0020 	rsb	r0, r0, #32
 8007fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8007fc2:	e7f0      	b.n	8007fa6 <_dtoa_r+0x1fe>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e7b1      	b.n	8007f2c <_dtoa_r+0x184>
 8007fc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8007fca:	e7b0      	b.n	8007f2e <_dtoa_r+0x186>
 8007fcc:	9b05      	ldr	r3, [sp, #20]
 8007fce:	eba3 030a 	sub.w	r3, r3, sl
 8007fd2:	9305      	str	r3, [sp, #20]
 8007fd4:	f1ca 0300 	rsb	r3, sl, #0
 8007fd8:	9307      	str	r3, [sp, #28]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	930e      	str	r3, [sp, #56]	; 0x38
 8007fde:	e7bb      	b.n	8007f58 <_dtoa_r+0x1b0>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8007fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dd59      	ble.n	800809e <_dtoa_r+0x2f6>
 8007fea:	9302      	str	r3, [sp, #8]
 8007fec:	4699      	mov	r9, r3
 8007fee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	6072      	str	r2, [r6, #4]
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	f102 0014 	add.w	r0, r2, #20
 8007ffa:	4298      	cmp	r0, r3
 8007ffc:	6871      	ldr	r1, [r6, #4]
 8007ffe:	d953      	bls.n	80080a8 <_dtoa_r+0x300>
 8008000:	4620      	mov	r0, r4
 8008002:	f7ff facb 	bl	800759c <_Balloc>
 8008006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008008:	6030      	str	r0, [r6, #0]
 800800a:	f1b9 0f0e 	cmp.w	r9, #14
 800800e:	f8d3 b000 	ldr.w	fp, [r3]
 8008012:	f200 80e6 	bhi.w	80081e2 <_dtoa_r+0x43a>
 8008016:	2d00      	cmp	r5, #0
 8008018:	f000 80e3 	beq.w	80081e2 <_dtoa_r+0x43a>
 800801c:	ed9d 7b00 	vldr	d7, [sp]
 8008020:	f1ba 0f00 	cmp.w	sl, #0
 8008024:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008028:	dd74      	ble.n	8008114 <_dtoa_r+0x36c>
 800802a:	4a2a      	ldr	r2, [pc, #168]	; (80080d4 <_dtoa_r+0x32c>)
 800802c:	f00a 030f 	and.w	r3, sl, #15
 8008030:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008034:	ed93 7b00 	vldr	d7, [r3]
 8008038:	ea4f 162a 	mov.w	r6, sl, asr #4
 800803c:	06f0      	lsls	r0, r6, #27
 800803e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008042:	d565      	bpl.n	8008110 <_dtoa_r+0x368>
 8008044:	4b24      	ldr	r3, [pc, #144]	; (80080d8 <_dtoa_r+0x330>)
 8008046:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800804a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800804e:	f7f8 fbb5 	bl	80007bc <__aeabi_ddiv>
 8008052:	e9cd 0100 	strd	r0, r1, [sp]
 8008056:	f006 060f 	and.w	r6, r6, #15
 800805a:	2503      	movs	r5, #3
 800805c:	4f1e      	ldr	r7, [pc, #120]	; (80080d8 <_dtoa_r+0x330>)
 800805e:	e04c      	b.n	80080fa <_dtoa_r+0x352>
 8008060:	2301      	movs	r3, #1
 8008062:	930a      	str	r3, [sp, #40]	; 0x28
 8008064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008066:	4453      	add	r3, sl
 8008068:	f103 0901 	add.w	r9, r3, #1
 800806c:	9302      	str	r3, [sp, #8]
 800806e:	464b      	mov	r3, r9
 8008070:	2b01      	cmp	r3, #1
 8008072:	bfb8      	it	lt
 8008074:	2301      	movlt	r3, #1
 8008076:	e7ba      	b.n	8007fee <_dtoa_r+0x246>
 8008078:	2300      	movs	r3, #0
 800807a:	e7b2      	b.n	8007fe2 <_dtoa_r+0x23a>
 800807c:	2300      	movs	r3, #0
 800807e:	e7f0      	b.n	8008062 <_dtoa_r+0x2ba>
 8008080:	2501      	movs	r5, #1
 8008082:	2300      	movs	r3, #0
 8008084:	9306      	str	r3, [sp, #24]
 8008086:	950a      	str	r5, [sp, #40]	; 0x28
 8008088:	f04f 33ff 	mov.w	r3, #4294967295
 800808c:	9302      	str	r3, [sp, #8]
 800808e:	4699      	mov	r9, r3
 8008090:	2200      	movs	r2, #0
 8008092:	2312      	movs	r3, #18
 8008094:	920b      	str	r2, [sp, #44]	; 0x2c
 8008096:	e7aa      	b.n	8007fee <_dtoa_r+0x246>
 8008098:	2301      	movs	r3, #1
 800809a:	930a      	str	r3, [sp, #40]	; 0x28
 800809c:	e7f4      	b.n	8008088 <_dtoa_r+0x2e0>
 800809e:	2301      	movs	r3, #1
 80080a0:	9302      	str	r3, [sp, #8]
 80080a2:	4699      	mov	r9, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	e7f5      	b.n	8008094 <_dtoa_r+0x2ec>
 80080a8:	3101      	adds	r1, #1
 80080aa:	6071      	str	r1, [r6, #4]
 80080ac:	0052      	lsls	r2, r2, #1
 80080ae:	e7a2      	b.n	8007ff6 <_dtoa_r+0x24e>
 80080b0:	636f4361 	.word	0x636f4361
 80080b4:	3fd287a7 	.word	0x3fd287a7
 80080b8:	8b60c8b3 	.word	0x8b60c8b3
 80080bc:	3fc68a28 	.word	0x3fc68a28
 80080c0:	509f79fb 	.word	0x509f79fb
 80080c4:	3fd34413 	.word	0x3fd34413
 80080c8:	7ff00000 	.word	0x7ff00000
 80080cc:	0800a89a 	.word	0x0800a89a
 80080d0:	3ff80000 	.word	0x3ff80000
 80080d4:	0800a7b8 	.word	0x0800a7b8
 80080d8:	0800a790 	.word	0x0800a790
 80080dc:	0800a895 	.word	0x0800a895
 80080e0:	07f1      	lsls	r1, r6, #31
 80080e2:	d508      	bpl.n	80080f6 <_dtoa_r+0x34e>
 80080e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80080e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ec:	f7f8 fa3c 	bl	8000568 <__aeabi_dmul>
 80080f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80080f4:	3501      	adds	r5, #1
 80080f6:	1076      	asrs	r6, r6, #1
 80080f8:	3708      	adds	r7, #8
 80080fa:	2e00      	cmp	r6, #0
 80080fc:	d1f0      	bne.n	80080e0 <_dtoa_r+0x338>
 80080fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008102:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008106:	f7f8 fb59 	bl	80007bc <__aeabi_ddiv>
 800810a:	e9cd 0100 	strd	r0, r1, [sp]
 800810e:	e01a      	b.n	8008146 <_dtoa_r+0x39e>
 8008110:	2502      	movs	r5, #2
 8008112:	e7a3      	b.n	800805c <_dtoa_r+0x2b4>
 8008114:	f000 80a0 	beq.w	8008258 <_dtoa_r+0x4b0>
 8008118:	f1ca 0600 	rsb	r6, sl, #0
 800811c:	4b9f      	ldr	r3, [pc, #636]	; (800839c <_dtoa_r+0x5f4>)
 800811e:	4fa0      	ldr	r7, [pc, #640]	; (80083a0 <_dtoa_r+0x5f8>)
 8008120:	f006 020f 	and.w	r2, r6, #15
 8008124:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008130:	f7f8 fa1a 	bl	8000568 <__aeabi_dmul>
 8008134:	e9cd 0100 	strd	r0, r1, [sp]
 8008138:	1136      	asrs	r6, r6, #4
 800813a:	2300      	movs	r3, #0
 800813c:	2502      	movs	r5, #2
 800813e:	2e00      	cmp	r6, #0
 8008140:	d17f      	bne.n	8008242 <_dtoa_r+0x49a>
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e1      	bne.n	800810a <_dtoa_r+0x362>
 8008146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 8087 	beq.w	800825c <_dtoa_r+0x4b4>
 800814e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008152:	2200      	movs	r2, #0
 8008154:	4b93      	ldr	r3, [pc, #588]	; (80083a4 <_dtoa_r+0x5fc>)
 8008156:	4630      	mov	r0, r6
 8008158:	4639      	mov	r1, r7
 800815a:	f7f8 fc77 	bl	8000a4c <__aeabi_dcmplt>
 800815e:	2800      	cmp	r0, #0
 8008160:	d07c      	beq.n	800825c <_dtoa_r+0x4b4>
 8008162:	f1b9 0f00 	cmp.w	r9, #0
 8008166:	d079      	beq.n	800825c <_dtoa_r+0x4b4>
 8008168:	9b02      	ldr	r3, [sp, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	dd35      	ble.n	80081da <_dtoa_r+0x432>
 800816e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008172:	9308      	str	r3, [sp, #32]
 8008174:	4639      	mov	r1, r7
 8008176:	2200      	movs	r2, #0
 8008178:	4b8b      	ldr	r3, [pc, #556]	; (80083a8 <_dtoa_r+0x600>)
 800817a:	4630      	mov	r0, r6
 800817c:	f7f8 f9f4 	bl	8000568 <__aeabi_dmul>
 8008180:	e9cd 0100 	strd	r0, r1, [sp]
 8008184:	9f02      	ldr	r7, [sp, #8]
 8008186:	3501      	adds	r5, #1
 8008188:	4628      	mov	r0, r5
 800818a:	f7f8 f983 	bl	8000494 <__aeabi_i2d>
 800818e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008192:	f7f8 f9e9 	bl	8000568 <__aeabi_dmul>
 8008196:	2200      	movs	r2, #0
 8008198:	4b84      	ldr	r3, [pc, #528]	; (80083ac <_dtoa_r+0x604>)
 800819a:	f7f8 f82f 	bl	80001fc <__adddf3>
 800819e:	4605      	mov	r5, r0
 80081a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80081a4:	2f00      	cmp	r7, #0
 80081a6:	d15d      	bne.n	8008264 <_dtoa_r+0x4bc>
 80081a8:	2200      	movs	r2, #0
 80081aa:	4b81      	ldr	r3, [pc, #516]	; (80083b0 <_dtoa_r+0x608>)
 80081ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081b0:	f7f8 f822 	bl	80001f8 <__aeabi_dsub>
 80081b4:	462a      	mov	r2, r5
 80081b6:	4633      	mov	r3, r6
 80081b8:	e9cd 0100 	strd	r0, r1, [sp]
 80081bc:	f7f8 fc64 	bl	8000a88 <__aeabi_dcmpgt>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	f040 8288 	bne.w	80086d6 <_dtoa_r+0x92e>
 80081c6:	462a      	mov	r2, r5
 80081c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80081cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081d0:	f7f8 fc3c 	bl	8000a4c <__aeabi_dcmplt>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f040 827c 	bne.w	80086d2 <_dtoa_r+0x92a>
 80081da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081de:	e9cd 2300 	strd	r2, r3, [sp]
 80081e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f2c0 8150 	blt.w	800848a <_dtoa_r+0x6e2>
 80081ea:	f1ba 0f0e 	cmp.w	sl, #14
 80081ee:	f300 814c 	bgt.w	800848a <_dtoa_r+0x6e2>
 80081f2:	4b6a      	ldr	r3, [pc, #424]	; (800839c <_dtoa_r+0x5f4>)
 80081f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081f8:	ed93 7b00 	vldr	d7, [r3]
 80081fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008204:	f280 80d8 	bge.w	80083b8 <_dtoa_r+0x610>
 8008208:	f1b9 0f00 	cmp.w	r9, #0
 800820c:	f300 80d4 	bgt.w	80083b8 <_dtoa_r+0x610>
 8008210:	f040 825e 	bne.w	80086d0 <_dtoa_r+0x928>
 8008214:	2200      	movs	r2, #0
 8008216:	4b66      	ldr	r3, [pc, #408]	; (80083b0 <_dtoa_r+0x608>)
 8008218:	ec51 0b17 	vmov	r0, r1, d7
 800821c:	f7f8 f9a4 	bl	8000568 <__aeabi_dmul>
 8008220:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008224:	f7f8 fc26 	bl	8000a74 <__aeabi_dcmpge>
 8008228:	464f      	mov	r7, r9
 800822a:	464e      	mov	r6, r9
 800822c:	2800      	cmp	r0, #0
 800822e:	f040 8234 	bne.w	800869a <_dtoa_r+0x8f2>
 8008232:	2331      	movs	r3, #49	; 0x31
 8008234:	f10b 0501 	add.w	r5, fp, #1
 8008238:	f88b 3000 	strb.w	r3, [fp]
 800823c:	f10a 0a01 	add.w	sl, sl, #1
 8008240:	e22f      	b.n	80086a2 <_dtoa_r+0x8fa>
 8008242:	07f2      	lsls	r2, r6, #31
 8008244:	d505      	bpl.n	8008252 <_dtoa_r+0x4aa>
 8008246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800824a:	f7f8 f98d 	bl	8000568 <__aeabi_dmul>
 800824e:	3501      	adds	r5, #1
 8008250:	2301      	movs	r3, #1
 8008252:	1076      	asrs	r6, r6, #1
 8008254:	3708      	adds	r7, #8
 8008256:	e772      	b.n	800813e <_dtoa_r+0x396>
 8008258:	2502      	movs	r5, #2
 800825a:	e774      	b.n	8008146 <_dtoa_r+0x39e>
 800825c:	f8cd a020 	str.w	sl, [sp, #32]
 8008260:	464f      	mov	r7, r9
 8008262:	e791      	b.n	8008188 <_dtoa_r+0x3e0>
 8008264:	4b4d      	ldr	r3, [pc, #308]	; (800839c <_dtoa_r+0x5f4>)
 8008266:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800826a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800826e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008270:	2b00      	cmp	r3, #0
 8008272:	d047      	beq.n	8008304 <_dtoa_r+0x55c>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	2000      	movs	r0, #0
 800827a:	494e      	ldr	r1, [pc, #312]	; (80083b4 <_dtoa_r+0x60c>)
 800827c:	f7f8 fa9e 	bl	80007bc <__aeabi_ddiv>
 8008280:	462a      	mov	r2, r5
 8008282:	4633      	mov	r3, r6
 8008284:	f7f7 ffb8 	bl	80001f8 <__aeabi_dsub>
 8008288:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800828c:	465d      	mov	r5, fp
 800828e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008292:	f7f8 fc03 	bl	8000a9c <__aeabi_d2iz>
 8008296:	4606      	mov	r6, r0
 8008298:	f7f8 f8fc 	bl	8000494 <__aeabi_i2d>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082a4:	f7f7 ffa8 	bl	80001f8 <__aeabi_dsub>
 80082a8:	3630      	adds	r6, #48	; 0x30
 80082aa:	f805 6b01 	strb.w	r6, [r5], #1
 80082ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082b2:	e9cd 0100 	strd	r0, r1, [sp]
 80082b6:	f7f8 fbc9 	bl	8000a4c <__aeabi_dcmplt>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d163      	bne.n	8008386 <_dtoa_r+0x5de>
 80082be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082c2:	2000      	movs	r0, #0
 80082c4:	4937      	ldr	r1, [pc, #220]	; (80083a4 <_dtoa_r+0x5fc>)
 80082c6:	f7f7 ff97 	bl	80001f8 <__aeabi_dsub>
 80082ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082ce:	f7f8 fbbd 	bl	8000a4c <__aeabi_dcmplt>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	f040 80b7 	bne.w	8008446 <_dtoa_r+0x69e>
 80082d8:	eba5 030b 	sub.w	r3, r5, fp
 80082dc:	429f      	cmp	r7, r3
 80082de:	f77f af7c 	ble.w	80081da <_dtoa_r+0x432>
 80082e2:	2200      	movs	r2, #0
 80082e4:	4b30      	ldr	r3, [pc, #192]	; (80083a8 <_dtoa_r+0x600>)
 80082e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082ea:	f7f8 f93d 	bl	8000568 <__aeabi_dmul>
 80082ee:	2200      	movs	r2, #0
 80082f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80082f4:	4b2c      	ldr	r3, [pc, #176]	; (80083a8 <_dtoa_r+0x600>)
 80082f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082fa:	f7f8 f935 	bl	8000568 <__aeabi_dmul>
 80082fe:	e9cd 0100 	strd	r0, r1, [sp]
 8008302:	e7c4      	b.n	800828e <_dtoa_r+0x4e6>
 8008304:	462a      	mov	r2, r5
 8008306:	4633      	mov	r3, r6
 8008308:	f7f8 f92e 	bl	8000568 <__aeabi_dmul>
 800830c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008310:	eb0b 0507 	add.w	r5, fp, r7
 8008314:	465e      	mov	r6, fp
 8008316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800831a:	f7f8 fbbf 	bl	8000a9c <__aeabi_d2iz>
 800831e:	4607      	mov	r7, r0
 8008320:	f7f8 f8b8 	bl	8000494 <__aeabi_i2d>
 8008324:	3730      	adds	r7, #48	; 0x30
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800832e:	f7f7 ff63 	bl	80001f8 <__aeabi_dsub>
 8008332:	f806 7b01 	strb.w	r7, [r6], #1
 8008336:	42ae      	cmp	r6, r5
 8008338:	e9cd 0100 	strd	r0, r1, [sp]
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	d126      	bne.n	8008390 <_dtoa_r+0x5e8>
 8008342:	4b1c      	ldr	r3, [pc, #112]	; (80083b4 <_dtoa_r+0x60c>)
 8008344:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008348:	f7f7 ff58 	bl	80001fc <__adddf3>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008354:	f7f8 fb98 	bl	8000a88 <__aeabi_dcmpgt>
 8008358:	2800      	cmp	r0, #0
 800835a:	d174      	bne.n	8008446 <_dtoa_r+0x69e>
 800835c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008360:	2000      	movs	r0, #0
 8008362:	4914      	ldr	r1, [pc, #80]	; (80083b4 <_dtoa_r+0x60c>)
 8008364:	f7f7 ff48 	bl	80001f8 <__aeabi_dsub>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008370:	f7f8 fb6c 	bl	8000a4c <__aeabi_dcmplt>
 8008374:	2800      	cmp	r0, #0
 8008376:	f43f af30 	beq.w	80081da <_dtoa_r+0x432>
 800837a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800837e:	2b30      	cmp	r3, #48	; 0x30
 8008380:	f105 32ff 	add.w	r2, r5, #4294967295
 8008384:	d002      	beq.n	800838c <_dtoa_r+0x5e4>
 8008386:	f8dd a020 	ldr.w	sl, [sp, #32]
 800838a:	e04a      	b.n	8008422 <_dtoa_r+0x67a>
 800838c:	4615      	mov	r5, r2
 800838e:	e7f4      	b.n	800837a <_dtoa_r+0x5d2>
 8008390:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <_dtoa_r+0x600>)
 8008392:	f7f8 f8e9 	bl	8000568 <__aeabi_dmul>
 8008396:	e9cd 0100 	strd	r0, r1, [sp]
 800839a:	e7bc      	b.n	8008316 <_dtoa_r+0x56e>
 800839c:	0800a7b8 	.word	0x0800a7b8
 80083a0:	0800a790 	.word	0x0800a790
 80083a4:	3ff00000 	.word	0x3ff00000
 80083a8:	40240000 	.word	0x40240000
 80083ac:	401c0000 	.word	0x401c0000
 80083b0:	40140000 	.word	0x40140000
 80083b4:	3fe00000 	.word	0x3fe00000
 80083b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80083bc:	465d      	mov	r5, fp
 80083be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c2:	4630      	mov	r0, r6
 80083c4:	4639      	mov	r1, r7
 80083c6:	f7f8 f9f9 	bl	80007bc <__aeabi_ddiv>
 80083ca:	f7f8 fb67 	bl	8000a9c <__aeabi_d2iz>
 80083ce:	4680      	mov	r8, r0
 80083d0:	f7f8 f860 	bl	8000494 <__aeabi_i2d>
 80083d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083d8:	f7f8 f8c6 	bl	8000568 <__aeabi_dmul>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4630      	mov	r0, r6
 80083e2:	4639      	mov	r1, r7
 80083e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80083e8:	f7f7 ff06 	bl	80001f8 <__aeabi_dsub>
 80083ec:	f805 6b01 	strb.w	r6, [r5], #1
 80083f0:	eba5 060b 	sub.w	r6, r5, fp
 80083f4:	45b1      	cmp	r9, r6
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	d139      	bne.n	8008470 <_dtoa_r+0x6c8>
 80083fc:	f7f7 fefe 	bl	80001fc <__adddf3>
 8008400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008404:	4606      	mov	r6, r0
 8008406:	460f      	mov	r7, r1
 8008408:	f7f8 fb3e 	bl	8000a88 <__aeabi_dcmpgt>
 800840c:	b9c8      	cbnz	r0, 8008442 <_dtoa_r+0x69a>
 800840e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008412:	4630      	mov	r0, r6
 8008414:	4639      	mov	r1, r7
 8008416:	f7f8 fb0f 	bl	8000a38 <__aeabi_dcmpeq>
 800841a:	b110      	cbz	r0, 8008422 <_dtoa_r+0x67a>
 800841c:	f018 0f01 	tst.w	r8, #1
 8008420:	d10f      	bne.n	8008442 <_dtoa_r+0x69a>
 8008422:	9904      	ldr	r1, [sp, #16]
 8008424:	4620      	mov	r0, r4
 8008426:	f7ff f8ed 	bl	8007604 <_Bfree>
 800842a:	2300      	movs	r3, #0
 800842c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800842e:	702b      	strb	r3, [r5, #0]
 8008430:	f10a 0301 	add.w	r3, sl, #1
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 8241 	beq.w	80088c0 <_dtoa_r+0xb18>
 800843e:	601d      	str	r5, [r3, #0]
 8008440:	e23e      	b.n	80088c0 <_dtoa_r+0xb18>
 8008442:	f8cd a020 	str.w	sl, [sp, #32]
 8008446:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800844a:	2a39      	cmp	r2, #57	; 0x39
 800844c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008450:	d108      	bne.n	8008464 <_dtoa_r+0x6bc>
 8008452:	459b      	cmp	fp, r3
 8008454:	d10a      	bne.n	800846c <_dtoa_r+0x6c4>
 8008456:	9b08      	ldr	r3, [sp, #32]
 8008458:	3301      	adds	r3, #1
 800845a:	9308      	str	r3, [sp, #32]
 800845c:	2330      	movs	r3, #48	; 0x30
 800845e:	f88b 3000 	strb.w	r3, [fp]
 8008462:	465b      	mov	r3, fp
 8008464:	781a      	ldrb	r2, [r3, #0]
 8008466:	3201      	adds	r2, #1
 8008468:	701a      	strb	r2, [r3, #0]
 800846a:	e78c      	b.n	8008386 <_dtoa_r+0x5de>
 800846c:	461d      	mov	r5, r3
 800846e:	e7ea      	b.n	8008446 <_dtoa_r+0x69e>
 8008470:	2200      	movs	r2, #0
 8008472:	4b9b      	ldr	r3, [pc, #620]	; (80086e0 <_dtoa_r+0x938>)
 8008474:	f7f8 f878 	bl	8000568 <__aeabi_dmul>
 8008478:	2200      	movs	r2, #0
 800847a:	2300      	movs	r3, #0
 800847c:	4606      	mov	r6, r0
 800847e:	460f      	mov	r7, r1
 8008480:	f7f8 fada 	bl	8000a38 <__aeabi_dcmpeq>
 8008484:	2800      	cmp	r0, #0
 8008486:	d09a      	beq.n	80083be <_dtoa_r+0x616>
 8008488:	e7cb      	b.n	8008422 <_dtoa_r+0x67a>
 800848a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800848c:	2a00      	cmp	r2, #0
 800848e:	f000 808b 	beq.w	80085a8 <_dtoa_r+0x800>
 8008492:	9a06      	ldr	r2, [sp, #24]
 8008494:	2a01      	cmp	r2, #1
 8008496:	dc6e      	bgt.n	8008576 <_dtoa_r+0x7ce>
 8008498:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800849a:	2a00      	cmp	r2, #0
 800849c:	d067      	beq.n	800856e <_dtoa_r+0x7c6>
 800849e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084a2:	9f07      	ldr	r7, [sp, #28]
 80084a4:	9d05      	ldr	r5, [sp, #20]
 80084a6:	9a05      	ldr	r2, [sp, #20]
 80084a8:	2101      	movs	r1, #1
 80084aa:	441a      	add	r2, r3
 80084ac:	4620      	mov	r0, r4
 80084ae:	9205      	str	r2, [sp, #20]
 80084b0:	4498      	add	r8, r3
 80084b2:	f7ff f947 	bl	8007744 <__i2b>
 80084b6:	4606      	mov	r6, r0
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	dd0c      	ble.n	80084d6 <_dtoa_r+0x72e>
 80084bc:	f1b8 0f00 	cmp.w	r8, #0
 80084c0:	dd09      	ble.n	80084d6 <_dtoa_r+0x72e>
 80084c2:	4545      	cmp	r5, r8
 80084c4:	9a05      	ldr	r2, [sp, #20]
 80084c6:	462b      	mov	r3, r5
 80084c8:	bfa8      	it	ge
 80084ca:	4643      	movge	r3, r8
 80084cc:	1ad2      	subs	r2, r2, r3
 80084ce:	9205      	str	r2, [sp, #20]
 80084d0:	1aed      	subs	r5, r5, r3
 80084d2:	eba8 0803 	sub.w	r8, r8, r3
 80084d6:	9b07      	ldr	r3, [sp, #28]
 80084d8:	b1eb      	cbz	r3, 8008516 <_dtoa_r+0x76e>
 80084da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d067      	beq.n	80085b0 <_dtoa_r+0x808>
 80084e0:	b18f      	cbz	r7, 8008506 <_dtoa_r+0x75e>
 80084e2:	4631      	mov	r1, r6
 80084e4:	463a      	mov	r2, r7
 80084e6:	4620      	mov	r0, r4
 80084e8:	f7ff f9cc 	bl	8007884 <__pow5mult>
 80084ec:	9a04      	ldr	r2, [sp, #16]
 80084ee:	4601      	mov	r1, r0
 80084f0:	4606      	mov	r6, r0
 80084f2:	4620      	mov	r0, r4
 80084f4:	f7ff f92f 	bl	8007756 <__multiply>
 80084f8:	9904      	ldr	r1, [sp, #16]
 80084fa:	9008      	str	r0, [sp, #32]
 80084fc:	4620      	mov	r0, r4
 80084fe:	f7ff f881 	bl	8007604 <_Bfree>
 8008502:	9b08      	ldr	r3, [sp, #32]
 8008504:	9304      	str	r3, [sp, #16]
 8008506:	9b07      	ldr	r3, [sp, #28]
 8008508:	1bda      	subs	r2, r3, r7
 800850a:	d004      	beq.n	8008516 <_dtoa_r+0x76e>
 800850c:	9904      	ldr	r1, [sp, #16]
 800850e:	4620      	mov	r0, r4
 8008510:	f7ff f9b8 	bl	8007884 <__pow5mult>
 8008514:	9004      	str	r0, [sp, #16]
 8008516:	2101      	movs	r1, #1
 8008518:	4620      	mov	r0, r4
 800851a:	f7ff f913 	bl	8007744 <__i2b>
 800851e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008520:	4607      	mov	r7, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 81d0 	beq.w	80088c8 <_dtoa_r+0xb20>
 8008528:	461a      	mov	r2, r3
 800852a:	4601      	mov	r1, r0
 800852c:	4620      	mov	r0, r4
 800852e:	f7ff f9a9 	bl	8007884 <__pow5mult>
 8008532:	9b06      	ldr	r3, [sp, #24]
 8008534:	2b01      	cmp	r3, #1
 8008536:	4607      	mov	r7, r0
 8008538:	dc40      	bgt.n	80085bc <_dtoa_r+0x814>
 800853a:	9b00      	ldr	r3, [sp, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d139      	bne.n	80085b4 <_dtoa_r+0x80c>
 8008540:	9b01      	ldr	r3, [sp, #4]
 8008542:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008546:	2b00      	cmp	r3, #0
 8008548:	d136      	bne.n	80085b8 <_dtoa_r+0x810>
 800854a:	9b01      	ldr	r3, [sp, #4]
 800854c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008550:	0d1b      	lsrs	r3, r3, #20
 8008552:	051b      	lsls	r3, r3, #20
 8008554:	b12b      	cbz	r3, 8008562 <_dtoa_r+0x7ba>
 8008556:	9b05      	ldr	r3, [sp, #20]
 8008558:	3301      	adds	r3, #1
 800855a:	9305      	str	r3, [sp, #20]
 800855c:	f108 0801 	add.w	r8, r8, #1
 8008560:	2301      	movs	r3, #1
 8008562:	9307      	str	r3, [sp, #28]
 8008564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008566:	2b00      	cmp	r3, #0
 8008568:	d12a      	bne.n	80085c0 <_dtoa_r+0x818>
 800856a:	2001      	movs	r0, #1
 800856c:	e030      	b.n	80085d0 <_dtoa_r+0x828>
 800856e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008570:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008574:	e795      	b.n	80084a2 <_dtoa_r+0x6fa>
 8008576:	9b07      	ldr	r3, [sp, #28]
 8008578:	f109 37ff 	add.w	r7, r9, #4294967295
 800857c:	42bb      	cmp	r3, r7
 800857e:	bfbf      	itttt	lt
 8008580:	9b07      	ldrlt	r3, [sp, #28]
 8008582:	9707      	strlt	r7, [sp, #28]
 8008584:	1afa      	sublt	r2, r7, r3
 8008586:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008588:	bfbb      	ittet	lt
 800858a:	189b      	addlt	r3, r3, r2
 800858c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800858e:	1bdf      	subge	r7, r3, r7
 8008590:	2700      	movlt	r7, #0
 8008592:	f1b9 0f00 	cmp.w	r9, #0
 8008596:	bfb5      	itete	lt
 8008598:	9b05      	ldrlt	r3, [sp, #20]
 800859a:	9d05      	ldrge	r5, [sp, #20]
 800859c:	eba3 0509 	sublt.w	r5, r3, r9
 80085a0:	464b      	movge	r3, r9
 80085a2:	bfb8      	it	lt
 80085a4:	2300      	movlt	r3, #0
 80085a6:	e77e      	b.n	80084a6 <_dtoa_r+0x6fe>
 80085a8:	9f07      	ldr	r7, [sp, #28]
 80085aa:	9d05      	ldr	r5, [sp, #20]
 80085ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80085ae:	e783      	b.n	80084b8 <_dtoa_r+0x710>
 80085b0:	9a07      	ldr	r2, [sp, #28]
 80085b2:	e7ab      	b.n	800850c <_dtoa_r+0x764>
 80085b4:	2300      	movs	r3, #0
 80085b6:	e7d4      	b.n	8008562 <_dtoa_r+0x7ba>
 80085b8:	9b00      	ldr	r3, [sp, #0]
 80085ba:	e7d2      	b.n	8008562 <_dtoa_r+0x7ba>
 80085bc:	2300      	movs	r3, #0
 80085be:	9307      	str	r3, [sp, #28]
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80085c6:	6918      	ldr	r0, [r3, #16]
 80085c8:	f7ff f86e 	bl	80076a8 <__hi0bits>
 80085cc:	f1c0 0020 	rsb	r0, r0, #32
 80085d0:	4440      	add	r0, r8
 80085d2:	f010 001f 	ands.w	r0, r0, #31
 80085d6:	d047      	beq.n	8008668 <_dtoa_r+0x8c0>
 80085d8:	f1c0 0320 	rsb	r3, r0, #32
 80085dc:	2b04      	cmp	r3, #4
 80085de:	dd3b      	ble.n	8008658 <_dtoa_r+0x8b0>
 80085e0:	9b05      	ldr	r3, [sp, #20]
 80085e2:	f1c0 001c 	rsb	r0, r0, #28
 80085e6:	4403      	add	r3, r0
 80085e8:	9305      	str	r3, [sp, #20]
 80085ea:	4405      	add	r5, r0
 80085ec:	4480      	add	r8, r0
 80085ee:	9b05      	ldr	r3, [sp, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	dd05      	ble.n	8008600 <_dtoa_r+0x858>
 80085f4:	461a      	mov	r2, r3
 80085f6:	9904      	ldr	r1, [sp, #16]
 80085f8:	4620      	mov	r0, r4
 80085fa:	f7ff f991 	bl	8007920 <__lshift>
 80085fe:	9004      	str	r0, [sp, #16]
 8008600:	f1b8 0f00 	cmp.w	r8, #0
 8008604:	dd05      	ble.n	8008612 <_dtoa_r+0x86a>
 8008606:	4639      	mov	r1, r7
 8008608:	4642      	mov	r2, r8
 800860a:	4620      	mov	r0, r4
 800860c:	f7ff f988 	bl	8007920 <__lshift>
 8008610:	4607      	mov	r7, r0
 8008612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008614:	b353      	cbz	r3, 800866c <_dtoa_r+0x8c4>
 8008616:	4639      	mov	r1, r7
 8008618:	9804      	ldr	r0, [sp, #16]
 800861a:	f7ff f9d5 	bl	80079c8 <__mcmp>
 800861e:	2800      	cmp	r0, #0
 8008620:	da24      	bge.n	800866c <_dtoa_r+0x8c4>
 8008622:	2300      	movs	r3, #0
 8008624:	220a      	movs	r2, #10
 8008626:	9904      	ldr	r1, [sp, #16]
 8008628:	4620      	mov	r0, r4
 800862a:	f7ff f802 	bl	8007632 <__multadd>
 800862e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008630:	9004      	str	r0, [sp, #16]
 8008632:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 814d 	beq.w	80088d6 <_dtoa_r+0xb2e>
 800863c:	2300      	movs	r3, #0
 800863e:	4631      	mov	r1, r6
 8008640:	220a      	movs	r2, #10
 8008642:	4620      	mov	r0, r4
 8008644:	f7fe fff5 	bl	8007632 <__multadd>
 8008648:	9b02      	ldr	r3, [sp, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	4606      	mov	r6, r0
 800864e:	dc4f      	bgt.n	80086f0 <_dtoa_r+0x948>
 8008650:	9b06      	ldr	r3, [sp, #24]
 8008652:	2b02      	cmp	r3, #2
 8008654:	dd4c      	ble.n	80086f0 <_dtoa_r+0x948>
 8008656:	e011      	b.n	800867c <_dtoa_r+0x8d4>
 8008658:	d0c9      	beq.n	80085ee <_dtoa_r+0x846>
 800865a:	9a05      	ldr	r2, [sp, #20]
 800865c:	331c      	adds	r3, #28
 800865e:	441a      	add	r2, r3
 8008660:	9205      	str	r2, [sp, #20]
 8008662:	441d      	add	r5, r3
 8008664:	4498      	add	r8, r3
 8008666:	e7c2      	b.n	80085ee <_dtoa_r+0x846>
 8008668:	4603      	mov	r3, r0
 800866a:	e7f6      	b.n	800865a <_dtoa_r+0x8b2>
 800866c:	f1b9 0f00 	cmp.w	r9, #0
 8008670:	dc38      	bgt.n	80086e4 <_dtoa_r+0x93c>
 8008672:	9b06      	ldr	r3, [sp, #24]
 8008674:	2b02      	cmp	r3, #2
 8008676:	dd35      	ble.n	80086e4 <_dtoa_r+0x93c>
 8008678:	f8cd 9008 	str.w	r9, [sp, #8]
 800867c:	9b02      	ldr	r3, [sp, #8]
 800867e:	b963      	cbnz	r3, 800869a <_dtoa_r+0x8f2>
 8008680:	4639      	mov	r1, r7
 8008682:	2205      	movs	r2, #5
 8008684:	4620      	mov	r0, r4
 8008686:	f7fe ffd4 	bl	8007632 <__multadd>
 800868a:	4601      	mov	r1, r0
 800868c:	4607      	mov	r7, r0
 800868e:	9804      	ldr	r0, [sp, #16]
 8008690:	f7ff f99a 	bl	80079c8 <__mcmp>
 8008694:	2800      	cmp	r0, #0
 8008696:	f73f adcc 	bgt.w	8008232 <_dtoa_r+0x48a>
 800869a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800869c:	465d      	mov	r5, fp
 800869e:	ea6f 0a03 	mvn.w	sl, r3
 80086a2:	f04f 0900 	mov.w	r9, #0
 80086a6:	4639      	mov	r1, r7
 80086a8:	4620      	mov	r0, r4
 80086aa:	f7fe ffab 	bl	8007604 <_Bfree>
 80086ae:	2e00      	cmp	r6, #0
 80086b0:	f43f aeb7 	beq.w	8008422 <_dtoa_r+0x67a>
 80086b4:	f1b9 0f00 	cmp.w	r9, #0
 80086b8:	d005      	beq.n	80086c6 <_dtoa_r+0x91e>
 80086ba:	45b1      	cmp	r9, r6
 80086bc:	d003      	beq.n	80086c6 <_dtoa_r+0x91e>
 80086be:	4649      	mov	r1, r9
 80086c0:	4620      	mov	r0, r4
 80086c2:	f7fe ff9f 	bl	8007604 <_Bfree>
 80086c6:	4631      	mov	r1, r6
 80086c8:	4620      	mov	r0, r4
 80086ca:	f7fe ff9b 	bl	8007604 <_Bfree>
 80086ce:	e6a8      	b.n	8008422 <_dtoa_r+0x67a>
 80086d0:	2700      	movs	r7, #0
 80086d2:	463e      	mov	r6, r7
 80086d4:	e7e1      	b.n	800869a <_dtoa_r+0x8f2>
 80086d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80086da:	463e      	mov	r6, r7
 80086dc:	e5a9      	b.n	8008232 <_dtoa_r+0x48a>
 80086de:	bf00      	nop
 80086e0:	40240000 	.word	0x40240000
 80086e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 80fa 	beq.w	80088e4 <_dtoa_r+0xb3c>
 80086f0:	2d00      	cmp	r5, #0
 80086f2:	dd05      	ble.n	8008700 <_dtoa_r+0x958>
 80086f4:	4631      	mov	r1, r6
 80086f6:	462a      	mov	r2, r5
 80086f8:	4620      	mov	r0, r4
 80086fa:	f7ff f911 	bl	8007920 <__lshift>
 80086fe:	4606      	mov	r6, r0
 8008700:	9b07      	ldr	r3, [sp, #28]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d04c      	beq.n	80087a0 <_dtoa_r+0x9f8>
 8008706:	6871      	ldr	r1, [r6, #4]
 8008708:	4620      	mov	r0, r4
 800870a:	f7fe ff47 	bl	800759c <_Balloc>
 800870e:	6932      	ldr	r2, [r6, #16]
 8008710:	3202      	adds	r2, #2
 8008712:	4605      	mov	r5, r0
 8008714:	0092      	lsls	r2, r2, #2
 8008716:	f106 010c 	add.w	r1, r6, #12
 800871a:	300c      	adds	r0, #12
 800871c:	f000 f904 	bl	8008928 <memcpy>
 8008720:	2201      	movs	r2, #1
 8008722:	4629      	mov	r1, r5
 8008724:	4620      	mov	r0, r4
 8008726:	f7ff f8fb 	bl	8007920 <__lshift>
 800872a:	9b00      	ldr	r3, [sp, #0]
 800872c:	f8cd b014 	str.w	fp, [sp, #20]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	46b1      	mov	r9, r6
 8008736:	9307      	str	r3, [sp, #28]
 8008738:	4606      	mov	r6, r0
 800873a:	4639      	mov	r1, r7
 800873c:	9804      	ldr	r0, [sp, #16]
 800873e:	f7ff faa7 	bl	8007c90 <quorem>
 8008742:	4649      	mov	r1, r9
 8008744:	4605      	mov	r5, r0
 8008746:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800874a:	9804      	ldr	r0, [sp, #16]
 800874c:	f7ff f93c 	bl	80079c8 <__mcmp>
 8008750:	4632      	mov	r2, r6
 8008752:	9000      	str	r0, [sp, #0]
 8008754:	4639      	mov	r1, r7
 8008756:	4620      	mov	r0, r4
 8008758:	f7ff f950 	bl	80079fc <__mdiff>
 800875c:	68c3      	ldr	r3, [r0, #12]
 800875e:	4602      	mov	r2, r0
 8008760:	bb03      	cbnz	r3, 80087a4 <_dtoa_r+0x9fc>
 8008762:	4601      	mov	r1, r0
 8008764:	9008      	str	r0, [sp, #32]
 8008766:	9804      	ldr	r0, [sp, #16]
 8008768:	f7ff f92e 	bl	80079c8 <__mcmp>
 800876c:	9a08      	ldr	r2, [sp, #32]
 800876e:	4603      	mov	r3, r0
 8008770:	4611      	mov	r1, r2
 8008772:	4620      	mov	r0, r4
 8008774:	9308      	str	r3, [sp, #32]
 8008776:	f7fe ff45 	bl	8007604 <_Bfree>
 800877a:	9b08      	ldr	r3, [sp, #32]
 800877c:	b9a3      	cbnz	r3, 80087a8 <_dtoa_r+0xa00>
 800877e:	9a06      	ldr	r2, [sp, #24]
 8008780:	b992      	cbnz	r2, 80087a8 <_dtoa_r+0xa00>
 8008782:	9a07      	ldr	r2, [sp, #28]
 8008784:	b982      	cbnz	r2, 80087a8 <_dtoa_r+0xa00>
 8008786:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800878a:	d029      	beq.n	80087e0 <_dtoa_r+0xa38>
 800878c:	9b00      	ldr	r3, [sp, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	dd01      	ble.n	8008796 <_dtoa_r+0x9ee>
 8008792:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008796:	9b05      	ldr	r3, [sp, #20]
 8008798:	1c5d      	adds	r5, r3, #1
 800879a:	f883 8000 	strb.w	r8, [r3]
 800879e:	e782      	b.n	80086a6 <_dtoa_r+0x8fe>
 80087a0:	4630      	mov	r0, r6
 80087a2:	e7c2      	b.n	800872a <_dtoa_r+0x982>
 80087a4:	2301      	movs	r3, #1
 80087a6:	e7e3      	b.n	8008770 <_dtoa_r+0x9c8>
 80087a8:	9a00      	ldr	r2, [sp, #0]
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	db04      	blt.n	80087b8 <_dtoa_r+0xa10>
 80087ae:	d125      	bne.n	80087fc <_dtoa_r+0xa54>
 80087b0:	9a06      	ldr	r2, [sp, #24]
 80087b2:	bb1a      	cbnz	r2, 80087fc <_dtoa_r+0xa54>
 80087b4:	9a07      	ldr	r2, [sp, #28]
 80087b6:	bb0a      	cbnz	r2, 80087fc <_dtoa_r+0xa54>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	ddec      	ble.n	8008796 <_dtoa_r+0x9ee>
 80087bc:	2201      	movs	r2, #1
 80087be:	9904      	ldr	r1, [sp, #16]
 80087c0:	4620      	mov	r0, r4
 80087c2:	f7ff f8ad 	bl	8007920 <__lshift>
 80087c6:	4639      	mov	r1, r7
 80087c8:	9004      	str	r0, [sp, #16]
 80087ca:	f7ff f8fd 	bl	80079c8 <__mcmp>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	dc03      	bgt.n	80087da <_dtoa_r+0xa32>
 80087d2:	d1e0      	bne.n	8008796 <_dtoa_r+0x9ee>
 80087d4:	f018 0f01 	tst.w	r8, #1
 80087d8:	d0dd      	beq.n	8008796 <_dtoa_r+0x9ee>
 80087da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80087de:	d1d8      	bne.n	8008792 <_dtoa_r+0x9ea>
 80087e0:	9b05      	ldr	r3, [sp, #20]
 80087e2:	9a05      	ldr	r2, [sp, #20]
 80087e4:	1c5d      	adds	r5, r3, #1
 80087e6:	2339      	movs	r3, #57	; 0x39
 80087e8:	7013      	strb	r3, [r2, #0]
 80087ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087ee:	2b39      	cmp	r3, #57	; 0x39
 80087f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80087f4:	d04f      	beq.n	8008896 <_dtoa_r+0xaee>
 80087f6:	3301      	adds	r3, #1
 80087f8:	7013      	strb	r3, [r2, #0]
 80087fa:	e754      	b.n	80086a6 <_dtoa_r+0x8fe>
 80087fc:	9a05      	ldr	r2, [sp, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f102 0501 	add.w	r5, r2, #1
 8008804:	dd06      	ble.n	8008814 <_dtoa_r+0xa6c>
 8008806:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800880a:	d0e9      	beq.n	80087e0 <_dtoa_r+0xa38>
 800880c:	f108 0801 	add.w	r8, r8, #1
 8008810:	9b05      	ldr	r3, [sp, #20]
 8008812:	e7c2      	b.n	800879a <_dtoa_r+0x9f2>
 8008814:	9a02      	ldr	r2, [sp, #8]
 8008816:	f805 8c01 	strb.w	r8, [r5, #-1]
 800881a:	eba5 030b 	sub.w	r3, r5, fp
 800881e:	4293      	cmp	r3, r2
 8008820:	d021      	beq.n	8008866 <_dtoa_r+0xabe>
 8008822:	2300      	movs	r3, #0
 8008824:	220a      	movs	r2, #10
 8008826:	9904      	ldr	r1, [sp, #16]
 8008828:	4620      	mov	r0, r4
 800882a:	f7fe ff02 	bl	8007632 <__multadd>
 800882e:	45b1      	cmp	r9, r6
 8008830:	9004      	str	r0, [sp, #16]
 8008832:	f04f 0300 	mov.w	r3, #0
 8008836:	f04f 020a 	mov.w	r2, #10
 800883a:	4649      	mov	r1, r9
 800883c:	4620      	mov	r0, r4
 800883e:	d105      	bne.n	800884c <_dtoa_r+0xaa4>
 8008840:	f7fe fef7 	bl	8007632 <__multadd>
 8008844:	4681      	mov	r9, r0
 8008846:	4606      	mov	r6, r0
 8008848:	9505      	str	r5, [sp, #20]
 800884a:	e776      	b.n	800873a <_dtoa_r+0x992>
 800884c:	f7fe fef1 	bl	8007632 <__multadd>
 8008850:	4631      	mov	r1, r6
 8008852:	4681      	mov	r9, r0
 8008854:	2300      	movs	r3, #0
 8008856:	220a      	movs	r2, #10
 8008858:	4620      	mov	r0, r4
 800885a:	f7fe feea 	bl	8007632 <__multadd>
 800885e:	4606      	mov	r6, r0
 8008860:	e7f2      	b.n	8008848 <_dtoa_r+0xaa0>
 8008862:	f04f 0900 	mov.w	r9, #0
 8008866:	2201      	movs	r2, #1
 8008868:	9904      	ldr	r1, [sp, #16]
 800886a:	4620      	mov	r0, r4
 800886c:	f7ff f858 	bl	8007920 <__lshift>
 8008870:	4639      	mov	r1, r7
 8008872:	9004      	str	r0, [sp, #16]
 8008874:	f7ff f8a8 	bl	80079c8 <__mcmp>
 8008878:	2800      	cmp	r0, #0
 800887a:	dcb6      	bgt.n	80087ea <_dtoa_r+0xa42>
 800887c:	d102      	bne.n	8008884 <_dtoa_r+0xadc>
 800887e:	f018 0f01 	tst.w	r8, #1
 8008882:	d1b2      	bne.n	80087ea <_dtoa_r+0xa42>
 8008884:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008888:	2b30      	cmp	r3, #48	; 0x30
 800888a:	f105 32ff 	add.w	r2, r5, #4294967295
 800888e:	f47f af0a 	bne.w	80086a6 <_dtoa_r+0x8fe>
 8008892:	4615      	mov	r5, r2
 8008894:	e7f6      	b.n	8008884 <_dtoa_r+0xadc>
 8008896:	4593      	cmp	fp, r2
 8008898:	d105      	bne.n	80088a6 <_dtoa_r+0xafe>
 800889a:	2331      	movs	r3, #49	; 0x31
 800889c:	f10a 0a01 	add.w	sl, sl, #1
 80088a0:	f88b 3000 	strb.w	r3, [fp]
 80088a4:	e6ff      	b.n	80086a6 <_dtoa_r+0x8fe>
 80088a6:	4615      	mov	r5, r2
 80088a8:	e79f      	b.n	80087ea <_dtoa_r+0xa42>
 80088aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008910 <_dtoa_r+0xb68>
 80088ae:	e007      	b.n	80088c0 <_dtoa_r+0xb18>
 80088b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008914 <_dtoa_r+0xb6c>
 80088b6:	b11b      	cbz	r3, 80088c0 <_dtoa_r+0xb18>
 80088b8:	f10b 0308 	add.w	r3, fp, #8
 80088bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088be:	6013      	str	r3, [r2, #0]
 80088c0:	4658      	mov	r0, fp
 80088c2:	b017      	add	sp, #92	; 0x5c
 80088c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c8:	9b06      	ldr	r3, [sp, #24]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	f77f ae35 	ble.w	800853a <_dtoa_r+0x792>
 80088d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088d2:	9307      	str	r3, [sp, #28]
 80088d4:	e649      	b.n	800856a <_dtoa_r+0x7c2>
 80088d6:	9b02      	ldr	r3, [sp, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	dc03      	bgt.n	80088e4 <_dtoa_r+0xb3c>
 80088dc:	9b06      	ldr	r3, [sp, #24]
 80088de:	2b02      	cmp	r3, #2
 80088e0:	f73f aecc 	bgt.w	800867c <_dtoa_r+0x8d4>
 80088e4:	465d      	mov	r5, fp
 80088e6:	4639      	mov	r1, r7
 80088e8:	9804      	ldr	r0, [sp, #16]
 80088ea:	f7ff f9d1 	bl	8007c90 <quorem>
 80088ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80088f2:	f805 8b01 	strb.w	r8, [r5], #1
 80088f6:	9a02      	ldr	r2, [sp, #8]
 80088f8:	eba5 030b 	sub.w	r3, r5, fp
 80088fc:	429a      	cmp	r2, r3
 80088fe:	ddb0      	ble.n	8008862 <_dtoa_r+0xaba>
 8008900:	2300      	movs	r3, #0
 8008902:	220a      	movs	r2, #10
 8008904:	9904      	ldr	r1, [sp, #16]
 8008906:	4620      	mov	r0, r4
 8008908:	f7fe fe93 	bl	8007632 <__multadd>
 800890c:	9004      	str	r0, [sp, #16]
 800890e:	e7ea      	b.n	80088e6 <_dtoa_r+0xb3e>
 8008910:	0800a899 	.word	0x0800a899
 8008914:	0800a88c 	.word	0x0800a88c

08008918 <malloc>:
 8008918:	4b02      	ldr	r3, [pc, #8]	; (8008924 <malloc+0xc>)
 800891a:	4601      	mov	r1, r0
 800891c:	6818      	ldr	r0, [r3, #0]
 800891e:	f7ff b945 	b.w	8007bac <_malloc_r>
 8008922:	bf00      	nop
 8008924:	2000005c 	.word	0x2000005c

08008928 <memcpy>:
 8008928:	b510      	push	{r4, lr}
 800892a:	1e43      	subs	r3, r0, #1
 800892c:	440a      	add	r2, r1
 800892e:	4291      	cmp	r1, r2
 8008930:	d100      	bne.n	8008934 <memcpy+0xc>
 8008932:	bd10      	pop	{r4, pc}
 8008934:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008938:	f803 4f01 	strb.w	r4, [r3, #1]!
 800893c:	e7f7      	b.n	800892e <memcpy+0x6>

0800893e <__malloc_lock>:
 800893e:	4770      	bx	lr

08008940 <__malloc_unlock>:
 8008940:	4770      	bx	lr
	...

08008944 <_init>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	bf00      	nop
 8008948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894a:	bc08      	pop	{r3}
 800894c:	469e      	mov	lr, r3
 800894e:	4770      	bx	lr

08008950 <_fini>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	bf00      	nop
 8008954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008956:	bc08      	pop	{r3}
 8008958:	469e      	mov	lr, r3
 800895a:	4770      	bx	lr
