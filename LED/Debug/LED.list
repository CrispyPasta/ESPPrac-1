
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc04  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003154  0800bdb8  0800bdb8  0001bdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef0c  0800ef0c  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef0c  0800ef0c  0001ef0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef14  0800ef14  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef14  0800ef14  0001ef14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef18  0800ef18  0001ef18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800ef1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  200000c8  0800efe4  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800efe4  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e092  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000398e  00000000  00000000  0003e18a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a40  00000000  00000000  00041b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001898  00000000  00000000  00043558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002804b  00000000  00000000  00044df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015433  00000000  00000000  0006ce3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8bf5  00000000  00000000  0008226e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016ae63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c7c  00000000  00000000  0016aee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bd9c 	.word	0x0800bd9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000cc 	.word	0x200000cc
 80001ec:	0800bd9c 	.word	0x0800bd9c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 bc48 	b.w	8001434 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 fadc 	bl	8001168 <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__muldc3>:
 8000bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bc0:	ec57 6b10 	vmov	r6, r7, d0
 8000bc4:	ec59 8b12 	vmov	r8, r9, d2
 8000bc8:	b095      	sub	sp, #84	; 0x54
 8000bca:	ee12 2a10 	vmov	r2, s4
 8000bce:	ee10 0a10 	vmov	r0, s0
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	464b      	mov	r3, r9
 8000bd6:	ec55 4b13 	vmov	r4, r5, d3
 8000bda:	ec5b ab11 	vmov	sl, fp, d1
 8000bde:	ed8d 0b08 	vstr	d0, [sp, #32]
 8000be2:	ed8d 3b0a 	vstr	d3, [sp, #40]	; 0x28
 8000be6:	f7ff fcbf 	bl	8000568 <__aeabi_dmul>
 8000bea:	4622      	mov	r2, r4
 8000bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000bf0:	462b      	mov	r3, r5
 8000bf2:	4650      	mov	r0, sl
 8000bf4:	4659      	mov	r1, fp
 8000bf6:	f7ff fcb7 	bl	8000568 <__aeabi_dmul>
 8000bfa:	4622      	mov	r2, r4
 8000bfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000c00:	462b      	mov	r3, r5
 8000c02:	4630      	mov	r0, r6
 8000c04:	4639      	mov	r1, r7
 8000c06:	f7ff fcaf 	bl	8000568 <__aeabi_dmul>
 8000c0a:	4652      	mov	r2, sl
 8000c0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000c10:	465b      	mov	r3, fp
 8000c12:	4640      	mov	r0, r8
 8000c14:	4649      	mov	r1, r9
 8000c16:	f7ff fca7 	bl	8000568 <__aeabi_dmul>
 8000c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000c1e:	4606      	mov	r6, r0
 8000c20:	460f      	mov	r7, r1
 8000c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000c26:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 8000c2a:	f7ff fae5 	bl	80001f8 <__aeabi_dsub>
 8000c2e:	4632      	mov	r2, r6
 8000c30:	4604      	mov	r4, r0
 8000c32:	460d      	mov	r5, r1
 8000c34:	463b      	mov	r3, r7
 8000c36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8000c3a:	f7ff fadf 	bl	80001fc <__adddf3>
 8000c3e:	4622      	mov	r2, r4
 8000c40:	e9cd 0100 	strd	r0, r1, [sp]
 8000c44:	462b      	mov	r3, r5
 8000c46:	4620      	mov	r0, r4
 8000c48:	4629      	mov	r1, r5
 8000c4a:	f7ff fef5 	bl	8000a38 <__aeabi_dcmpeq>
 8000c4e:	b130      	cbz	r0, 8000c5e <__muldc3+0xa2>
 8000c50:	ed9d 1b00 	vldr	d1, [sp]
 8000c54:	ec45 4b10 	vmov	d0, r4, r5
 8000c58:	b015      	add	sp, #84	; 0x54
 8000c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	f7ff fee7 	bl	8000a38 <__aeabi_dcmpeq>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d1f0      	bne.n	8000c50 <__muldc3+0x94>
 8000c6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000c72:	4602      	mov	r2, r0
 8000c74:	460b      	mov	r3, r1
 8000c76:	f7ff fabf 	bl	80001f8 <__aeabi_dsub>
 8000c7a:	4652      	mov	r2, sl
 8000c7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8000c80:	465b      	mov	r3, fp
 8000c82:	4650      	mov	r0, sl
 8000c84:	4659      	mov	r1, fp
 8000c86:	f7ff fab7 	bl	80001f8 <__aeabi_dsub>
 8000c8a:	f04f 0601 	mov.w	r6, #1
 8000c8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8000c92:	4652      	mov	r2, sl
 8000c94:	465b      	mov	r3, fp
 8000c96:	4650      	mov	r0, sl
 8000c98:	4659      	mov	r1, fp
 8000c9a:	4637      	mov	r7, r6
 8000c9c:	f7ff fecc 	bl	8000a38 <__aeabi_dcmpeq>
 8000ca0:	b910      	cbnz	r0, 8000ca8 <__muldc3+0xec>
 8000ca2:	f04f 0300 	mov.w	r3, #0
 8000ca6:	461f      	mov	r7, r3
 8000ca8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 0601 	mov.w	r6, #1
 8000cb4:	f7ff fec0 	bl	8000a38 <__aeabi_dcmpeq>
 8000cb8:	b110      	cbz	r0, 8000cc0 <__muldc3+0x104>
 8000cba:	f04f 0300 	mov.w	r3, #0
 8000cbe:	461e      	mov	r6, r3
 8000cc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000cc4:	ea07 0c06 	and.w	ip, r7, r6
 8000cc8:	fa5f f68c 	uxtb.w	r6, ip
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	960e      	str	r6, [sp, #56]	; 0x38
 8000cd2:	f04f 0601 	mov.w	r6, #1
 8000cd6:	f7ff feaf 	bl	8000a38 <__aeabi_dcmpeq>
 8000cda:	b910      	cbnz	r0, 8000ce2 <__muldc3+0x126>
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	461e      	mov	r6, r3
 8000ce2:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000ce6:	d00f      	beq.n	8000d08 <__muldc3+0x14c>
 8000ce8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8000cec:	4610      	mov	r0, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f04f 0601 	mov.w	r6, #1
 8000cf4:	f7ff fea0 	bl	8000a38 <__aeabi_dcmpeq>
 8000cf8:	b110      	cbz	r0, 8000d00 <__muldc3+0x144>
 8000cfa:	f04f 0300 	mov.w	r3, #0
 8000cfe:	461e      	mov	r6, r3
 8000d00:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000d04:	f040 8183 	bne.w	800100e <__muldc3+0x452>
 8000d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f040 81b9 	bne.w	8001082 <__muldc3+0x4c6>
 8000d10:	4642      	mov	r2, r8
 8000d12:	464b      	mov	r3, r9
 8000d14:	4640      	mov	r0, r8
 8000d16:	4649      	mov	r1, r9
 8000d18:	f7ff fa6e 	bl	80001f8 <__aeabi_dsub>
 8000d1c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8000d20:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8000d24:	4632      	mov	r2, r6
 8000d26:	463b      	mov	r3, r7
 8000d28:	4630      	mov	r0, r6
 8000d2a:	4639      	mov	r1, r7
 8000d2c:	f7ff fa64 	bl	80001f8 <__aeabi_dsub>
 8000d30:	4632      	mov	r2, r6
 8000d32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8000d36:	463b      	mov	r3, r7
 8000d38:	4630      	mov	r0, r6
 8000d3a:	4639      	mov	r1, r7
 8000d3c:	f04f 0601 	mov.w	r6, #1
 8000d40:	4637      	mov	r7, r6
 8000d42:	f7ff fe79 	bl	8000a38 <__aeabi_dcmpeq>
 8000d46:	b910      	cbnz	r0, 8000d4e <__muldc3+0x192>
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	461f      	mov	r7, r3
 8000d4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8000d52:	4610      	mov	r0, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 0601 	mov.w	r6, #1
 8000d5a:	f7ff fe6d 	bl	8000a38 <__aeabi_dcmpeq>
 8000d5e:	b110      	cbz	r0, 8000d66 <__muldc3+0x1aa>
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	461e      	mov	r6, r3
 8000d66:	ea07 0c06 	and.w	ip, r7, r6
 8000d6a:	fa5f f68c 	uxtb.w	r6, ip
 8000d6e:	4642      	mov	r2, r8
 8000d70:	464b      	mov	r3, r9
 8000d72:	4640      	mov	r0, r8
 8000d74:	4649      	mov	r1, r9
 8000d76:	4637      	mov	r7, r6
 8000d78:	f04f 0601 	mov.w	r6, #1
 8000d7c:	f7ff fe5c 	bl	8000a38 <__aeabi_dcmpeq>
 8000d80:	b910      	cbnz	r0, 8000d88 <__muldc3+0x1cc>
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	461e      	mov	r6, r3
 8000d88:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000d8c:	d00f      	beq.n	8000dae <__muldc3+0x1f2>
 8000d8e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8000d92:	4610      	mov	r0, r2
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 0601 	mov.w	r6, #1
 8000d9a:	f7ff fe4d 	bl	8000a38 <__aeabi_dcmpeq>
 8000d9e:	b110      	cbz	r0, 8000da6 <__muldc3+0x1ea>
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	461e      	mov	r6, r3
 8000da6:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000daa:	f040 80fa 	bne.w	8000fa2 <__muldc3+0x3e6>
 8000dae:	2f00      	cmp	r7, #0
 8000db0:	f040 8158 	bne.w	8001064 <__muldc3+0x4a8>
 8000db4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	f040 80bc 	bne.w	8000f34 <__muldc3+0x378>
 8000dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	f7ff fa18 	bl	80001f8 <__aeabi_dsub>
 8000dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 0701 	mov.w	r7, #1
 8000dd8:	f7ff fe2e 	bl	8000a38 <__aeabi_dcmpeq>
 8000ddc:	b900      	cbnz	r0, 8000de0 <__muldc3+0x224>
 8000dde:	4637      	mov	r7, r6
 8000de0:	f017 0fff 	tst.w	r7, #255	; 0xff
 8000de4:	d00e      	beq.n	8000e04 <__muldc3+0x248>
 8000de6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8000dea:	4610      	mov	r0, r2
 8000dec:	4619      	mov	r1, r3
 8000dee:	f04f 0601 	mov.w	r6, #1
 8000df2:	f7ff fe21 	bl	8000a38 <__aeabi_dcmpeq>
 8000df6:	b110      	cbz	r0, 8000dfe <__muldc3+0x242>
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	461e      	mov	r6, r3
 8000dfe:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000e02:	d173      	bne.n	8000eec <__muldc3+0x330>
 8000e04:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8000e08:	4632      	mov	r2, r6
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff f9f2 	bl	80001f8 <__aeabi_dsub>
 8000e14:	463b      	mov	r3, r7
 8000e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000e1a:	4632      	mov	r2, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	4639      	mov	r1, r7
 8000e20:	f7ff fe0a 	bl	8000a38 <__aeabi_dcmpeq>
 8000e24:	f04f 0301 	mov.w	r3, #1
 8000e28:	b900      	cbnz	r0, 8000e2c <__muldc3+0x270>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000e30:	d00e      	beq.n	8000e50 <__muldc3+0x294>
 8000e32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f04f 0601 	mov.w	r6, #1
 8000e3e:	f7ff fdfb 	bl	8000a38 <__aeabi_dcmpeq>
 8000e42:	b110      	cbz	r0, 8000e4a <__muldc3+0x28e>
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	461e      	mov	r6, r3
 8000e4a:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000e4e:	d14d      	bne.n	8000eec <__muldc3+0x330>
 8000e50:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8000e54:	4632      	mov	r2, r6
 8000e56:	463b      	mov	r3, r7
 8000e58:	4630      	mov	r0, r6
 8000e5a:	4639      	mov	r1, r7
 8000e5c:	f7ff f9cc 	bl	80001f8 <__aeabi_dsub>
 8000e60:	463b      	mov	r3, r7
 8000e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000e66:	4632      	mov	r2, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	4639      	mov	r1, r7
 8000e6c:	f7ff fde4 	bl	8000a38 <__aeabi_dcmpeq>
 8000e70:	f04f 0301 	mov.w	r3, #1
 8000e74:	b900      	cbnz	r0, 8000e78 <__muldc3+0x2bc>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000e7c:	d00e      	beq.n	8000e9c <__muldc3+0x2e0>
 8000e7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e82:	4610      	mov	r0, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 0601 	mov.w	r6, #1
 8000e8a:	f7ff fdd5 	bl	8000a38 <__aeabi_dcmpeq>
 8000e8e:	b110      	cbz	r0, 8000e96 <__muldc3+0x2da>
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	461e      	mov	r6, r3
 8000e96:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000e9a:	d127      	bne.n	8000eec <__muldc3+0x330>
 8000e9c:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8000ea0:	4632      	mov	r2, r6
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	4639      	mov	r1, r7
 8000ea8:	f7ff f9a6 	bl	80001f8 <__aeabi_dsub>
 8000eac:	463b      	mov	r3, r7
 8000eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000eb2:	4632      	mov	r2, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	4639      	mov	r1, r7
 8000eb8:	f7ff fdbe 	bl	8000a38 <__aeabi_dcmpeq>
 8000ebc:	f04f 0301 	mov.w	r3, #1
 8000ec0:	b900      	cbnz	r0, 8000ec4 <__muldc3+0x308>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000ec8:	f43f aec2 	beq.w	8000c50 <__muldc3+0x94>
 8000ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 0601 	mov.w	r6, #1
 8000ed8:	f7ff fdae 	bl	8000a38 <__aeabi_dcmpeq>
 8000edc:	b110      	cbz	r0, 8000ee4 <__muldc3+0x328>
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	461e      	mov	r6, r3
 8000ee4:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000ee8:	f43f aeb2 	beq.w	8000c50 <__muldc3+0x94>
 8000eec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	f7ff fda0 	bl	8000a38 <__aeabi_dcmpeq>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	f000 8121 	beq.w	8001140 <__muldc3+0x584>
 8000efe:	4652      	mov	r2, sl
 8000f00:	465b      	mov	r3, fp
 8000f02:	4650      	mov	r0, sl
 8000f04:	4659      	mov	r1, fp
 8000f06:	f7ff fd97 	bl	8000a38 <__aeabi_dcmpeq>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	f000 810b 	beq.w	8001126 <__muldc3+0x56a>
 8000f10:	4642      	mov	r2, r8
 8000f12:	464b      	mov	r3, r9
 8000f14:	4640      	mov	r0, r8
 8000f16:	4649      	mov	r1, r9
 8000f18:	f7ff fd8e 	bl	8000a38 <__aeabi_dcmpeq>
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	f000 80f5 	beq.w	800110c <__muldc3+0x550>
 8000f22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	f7ff fd85 	bl	8000a38 <__aeabi_dcmpeq>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	f000 80df 	beq.w	80010f2 <__muldc3+0x536>
 8000f34:	4642      	mov	r2, r8
 8000f36:	464b      	mov	r3, r9
 8000f38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000f3c:	f7ff fb14 	bl	8000568 <__aeabi_dmul>
 8000f40:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8000f44:	4604      	mov	r4, r0
 8000f46:	460d      	mov	r5, r1
 8000f48:	4632      	mov	r2, r6
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4650      	mov	r0, sl
 8000f4e:	4659      	mov	r1, fp
 8000f50:	f7ff fb0a 	bl	8000568 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4620      	mov	r0, r4
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	f7ff f94c 	bl	80001f8 <__aeabi_dsub>
 8000f60:	2200      	movs	r2, #0
 8000f62:	4b7e      	ldr	r3, [pc, #504]	; (800115c <__muldc3+0x5a0>)
 8000f64:	f7ff fb00 	bl	8000568 <__aeabi_dmul>
 8000f68:	4632      	mov	r2, r6
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	460d      	mov	r5, r1
 8000f70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000f74:	f7ff faf8 	bl	8000568 <__aeabi_dmul>
 8000f78:	4642      	mov	r2, r8
 8000f7a:	4606      	mov	r6, r0
 8000f7c:	460f      	mov	r7, r1
 8000f7e:	464b      	mov	r3, r9
 8000f80:	4650      	mov	r0, sl
 8000f82:	4659      	mov	r1, fp
 8000f84:	f7ff faf0 	bl	8000568 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	4639      	mov	r1, r7
 8000f90:	f7ff f934 	bl	80001fc <__adddf3>
 8000f94:	2200      	movs	r2, #0
 8000f96:	4b71      	ldr	r3, [pc, #452]	; (800115c <__muldc3+0x5a0>)
 8000f98:	f7ff fae6 	bl	8000568 <__aeabi_dmul>
 8000f9c:	e9cd 0100 	strd	r0, r1, [sp]
 8000fa0:	e656      	b.n	8000c50 <__muldc3+0x94>
 8000fa2:	f1b9 0f00 	cmp.w	r9, #0
 8000fa6:	4b6e      	ldr	r3, [pc, #440]	; (8001160 <__muldc3+0x5a4>)
 8000fa8:	bfb8      	it	lt
 8000faa:	4b6e      	ldrlt	r3, [pc, #440]	; (8001164 <__muldc3+0x5a8>)
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	bfb8      	it	lt
 8000fb2:	2200      	movlt	r2, #0
 8000fb4:	4690      	mov	r8, r2
 8000fb6:	4699      	mov	r9, r3
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2f00      	cmp	r7, #0
 8000fbc:	d15f      	bne.n	800107e <__muldc3+0x4c2>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000fc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fc6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000fca:	ea43 0501 	orr.w	r5, r3, r1
 8000fce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000fd2:	4614      	mov	r4, r2
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8000fdc:	f7ff fd2c 	bl	8000a38 <__aeabi_dcmpeq>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d06a      	beq.n	80010ba <__muldc3+0x4fe>
 8000fe4:	4652      	mov	r2, sl
 8000fe6:	465b      	mov	r3, fp
 8000fe8:	4650      	mov	r0, sl
 8000fea:	4659      	mov	r1, fp
 8000fec:	f7ff fd24 	bl	8000a38 <__aeabi_dcmpeq>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d19f      	bne.n	8000f34 <__muldc3+0x378>
 8000ff4:	f1bb 0f00 	cmp.w	fp, #0
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	bfbc      	itt	lt
 8001002:	2200      	movlt	r2, #0
 8001004:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001008:	4692      	mov	sl, r2
 800100a:	469b      	mov	fp, r3
 800100c:	e792      	b.n	8000f34 <__muldc3+0x378>
 800100e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001010:	4b53      	ldr	r3, [pc, #332]	; (8001160 <__muldc3+0x5a4>)
 8001012:	2900      	cmp	r1, #0
 8001014:	bfb8      	it	lt
 8001016:	4b53      	ldrlt	r3, [pc, #332]	; (8001164 <__muldc3+0x5a8>)
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	bfb8      	it	lt
 800101e:	2200      	movlt	r2, #0
 8001020:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001026:	2200      	movs	r2, #0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d137      	bne.n	800109c <__muldc3+0x4e0>
 800102c:	2300      	movs	r3, #0
 800102e:	f00b 4100 	and.w	r1, fp, #2147483648	; 0x80000000
 8001032:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001036:	430b      	orrs	r3, r1
 8001038:	4616      	mov	r6, r2
 800103a:	461f      	mov	r7, r3
 800103c:	4642      	mov	r2, r8
 800103e:	464b      	mov	r3, r9
 8001040:	4640      	mov	r0, r8
 8001042:	4649      	mov	r1, r9
 8001044:	46b2      	mov	sl, r6
 8001046:	46bb      	mov	fp, r7
 8001048:	f7ff fcf6 	bl	8000a38 <__aeabi_dcmpeq>
 800104c:	b340      	cbz	r0, 80010a0 <__muldc3+0x4e4>
 800104e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	f7ff fcef 	bl	8000a38 <__aeabi_dcmpeq>
 800105a:	2800      	cmp	r0, #0
 800105c:	d03a      	beq.n	80010d4 <__muldc3+0x518>
 800105e:	2301      	movs	r3, #1
 8001060:	930e      	str	r3, [sp, #56]	; 0x38
 8001062:	e655      	b.n	8000d10 <__muldc3+0x154>
 8001064:	f1b9 0f00 	cmp.w	r9, #0
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	bfbc      	itt	lt
 8001072:	2200      	movlt	r2, #0
 8001074:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001078:	4690      	mov	r8, r2
 800107a:	4699      	mov	r9, r3
 800107c:	2200      	movs	r2, #0
 800107e:	4b38      	ldr	r3, [pc, #224]	; (8001160 <__muldc3+0x5a4>)
 8001080:	e79e      	b.n	8000fc0 <__muldc3+0x404>
 8001082:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001084:	2900      	cmp	r1, #0
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	bfbc      	itt	lt
 8001090:	2200      	movlt	r2, #0
 8001092:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001096:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800109a:	2200      	movs	r2, #0
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <__muldc3+0x5a4>)
 800109e:	e7c6      	b.n	800102e <__muldc3+0x472>
 80010a0:	f1b9 0f00 	cmp.w	r9, #0
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	bfbc      	itt	lt
 80010ae:	2200      	movlt	r2, #0
 80010b0:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80010b4:	4690      	mov	r8, r2
 80010b6:	4699      	mov	r9, r3
 80010b8:	e7c9      	b.n	800104e <__muldc3+0x492>
 80010ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80010bc:	2900      	cmp	r1, #0
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	bfbc      	itt	lt
 80010c8:	2200      	movlt	r2, #0
 80010ca:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80010ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80010d2:	e787      	b.n	8000fe4 <__muldc3+0x428>
 80010d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80010d6:	2900      	cmp	r1, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	bfbc      	itt	lt
 80010e2:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80010e6:	2200      	movlt	r2, #0
 80010e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80010ec:	2301      	movs	r3, #1
 80010ee:	930e      	str	r3, [sp, #56]	; 0x38
 80010f0:	e60e      	b.n	8000d10 <__muldc3+0x154>
 80010f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80010f4:	2900      	cmp	r1, #0
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	bfbc      	itt	lt
 8001100:	2200      	movlt	r2, #0
 8001102:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001106:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800110a:	e713      	b.n	8000f34 <__muldc3+0x378>
 800110c:	f1b9 0f00 	cmp.w	r9, #0
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	bfbc      	itt	lt
 800111a:	2200      	movlt	r2, #0
 800111c:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001120:	4690      	mov	r8, r2
 8001122:	4699      	mov	r9, r3
 8001124:	e6fd      	b.n	8000f22 <__muldc3+0x366>
 8001126:	f1bb 0f00 	cmp.w	fp, #0
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	bfbc      	itt	lt
 8001134:	2200      	movlt	r2, #0
 8001136:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 800113a:	4692      	mov	sl, r2
 800113c:	469b      	mov	fp, r3
 800113e:	e6e7      	b.n	8000f10 <__muldc3+0x354>
 8001140:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001142:	2900      	cmp	r1, #0
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	bfbc      	itt	lt
 800114e:	2200      	movlt	r2, #0
 8001150:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001154:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001158:	e6d1      	b.n	8000efe <__muldc3+0x342>
 800115a:	bf00      	nop
 800115c:	7ff00000 	.word	0x7ff00000
 8001160:	3ff00000 	.word	0x3ff00000
 8001164:	bff00000 	.word	0xbff00000

08001168 <__udivmoddi4>:
 8001168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800116c:	9e08      	ldr	r6, [sp, #32]
 800116e:	4604      	mov	r4, r0
 8001170:	4688      	mov	r8, r1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d14b      	bne.n	800120e <__udivmoddi4+0xa6>
 8001176:	428a      	cmp	r2, r1
 8001178:	4615      	mov	r5, r2
 800117a:	d967      	bls.n	800124c <__udivmoddi4+0xe4>
 800117c:	fab2 f282 	clz	r2, r2
 8001180:	b14a      	cbz	r2, 8001196 <__udivmoddi4+0x2e>
 8001182:	f1c2 0720 	rsb	r7, r2, #32
 8001186:	fa01 f302 	lsl.w	r3, r1, r2
 800118a:	fa20 f707 	lsr.w	r7, r0, r7
 800118e:	4095      	lsls	r5, r2
 8001190:	ea47 0803 	orr.w	r8, r7, r3
 8001194:	4094      	lsls	r4, r2
 8001196:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800119a:	0c23      	lsrs	r3, r4, #16
 800119c:	fbb8 f7fe 	udiv	r7, r8, lr
 80011a0:	fa1f fc85 	uxth.w	ip, r5
 80011a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80011a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011ac:	fb07 f10c 	mul.w	r1, r7, ip
 80011b0:	4299      	cmp	r1, r3
 80011b2:	d909      	bls.n	80011c8 <__udivmoddi4+0x60>
 80011b4:	18eb      	adds	r3, r5, r3
 80011b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80011ba:	f080 811b 	bcs.w	80013f4 <__udivmoddi4+0x28c>
 80011be:	4299      	cmp	r1, r3
 80011c0:	f240 8118 	bls.w	80013f4 <__udivmoddi4+0x28c>
 80011c4:	3f02      	subs	r7, #2
 80011c6:	442b      	add	r3, r5
 80011c8:	1a5b      	subs	r3, r3, r1
 80011ca:	b2a4      	uxth	r4, r4
 80011cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80011d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80011d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80011dc:	45a4      	cmp	ip, r4
 80011de:	d909      	bls.n	80011f4 <__udivmoddi4+0x8c>
 80011e0:	192c      	adds	r4, r5, r4
 80011e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80011e6:	f080 8107 	bcs.w	80013f8 <__udivmoddi4+0x290>
 80011ea:	45a4      	cmp	ip, r4
 80011ec:	f240 8104 	bls.w	80013f8 <__udivmoddi4+0x290>
 80011f0:	3802      	subs	r0, #2
 80011f2:	442c      	add	r4, r5
 80011f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80011f8:	eba4 040c 	sub.w	r4, r4, ip
 80011fc:	2700      	movs	r7, #0
 80011fe:	b11e      	cbz	r6, 8001208 <__udivmoddi4+0xa0>
 8001200:	40d4      	lsrs	r4, r2
 8001202:	2300      	movs	r3, #0
 8001204:	e9c6 4300 	strd	r4, r3, [r6]
 8001208:	4639      	mov	r1, r7
 800120a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800120e:	428b      	cmp	r3, r1
 8001210:	d909      	bls.n	8001226 <__udivmoddi4+0xbe>
 8001212:	2e00      	cmp	r6, #0
 8001214:	f000 80eb 	beq.w	80013ee <__udivmoddi4+0x286>
 8001218:	2700      	movs	r7, #0
 800121a:	e9c6 0100 	strd	r0, r1, [r6]
 800121e:	4638      	mov	r0, r7
 8001220:	4639      	mov	r1, r7
 8001222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001226:	fab3 f783 	clz	r7, r3
 800122a:	2f00      	cmp	r7, #0
 800122c:	d147      	bne.n	80012be <__udivmoddi4+0x156>
 800122e:	428b      	cmp	r3, r1
 8001230:	d302      	bcc.n	8001238 <__udivmoddi4+0xd0>
 8001232:	4282      	cmp	r2, r0
 8001234:	f200 80fa 	bhi.w	800142c <__udivmoddi4+0x2c4>
 8001238:	1a84      	subs	r4, r0, r2
 800123a:	eb61 0303 	sbc.w	r3, r1, r3
 800123e:	2001      	movs	r0, #1
 8001240:	4698      	mov	r8, r3
 8001242:	2e00      	cmp	r6, #0
 8001244:	d0e0      	beq.n	8001208 <__udivmoddi4+0xa0>
 8001246:	e9c6 4800 	strd	r4, r8, [r6]
 800124a:	e7dd      	b.n	8001208 <__udivmoddi4+0xa0>
 800124c:	b902      	cbnz	r2, 8001250 <__udivmoddi4+0xe8>
 800124e:	deff      	udf	#255	; 0xff
 8001250:	fab2 f282 	clz	r2, r2
 8001254:	2a00      	cmp	r2, #0
 8001256:	f040 808f 	bne.w	8001378 <__udivmoddi4+0x210>
 800125a:	1b49      	subs	r1, r1, r5
 800125c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001260:	fa1f f885 	uxth.w	r8, r5
 8001264:	2701      	movs	r7, #1
 8001266:	fbb1 fcfe 	udiv	ip, r1, lr
 800126a:	0c23      	lsrs	r3, r4, #16
 800126c:	fb0e 111c 	mls	r1, lr, ip, r1
 8001270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001274:	fb08 f10c 	mul.w	r1, r8, ip
 8001278:	4299      	cmp	r1, r3
 800127a:	d907      	bls.n	800128c <__udivmoddi4+0x124>
 800127c:	18eb      	adds	r3, r5, r3
 800127e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8001282:	d202      	bcs.n	800128a <__udivmoddi4+0x122>
 8001284:	4299      	cmp	r1, r3
 8001286:	f200 80cd 	bhi.w	8001424 <__udivmoddi4+0x2bc>
 800128a:	4684      	mov	ip, r0
 800128c:	1a59      	subs	r1, r3, r1
 800128e:	b2a3      	uxth	r3, r4
 8001290:	fbb1 f0fe 	udiv	r0, r1, lr
 8001294:	fb0e 1410 	mls	r4, lr, r0, r1
 8001298:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800129c:	fb08 f800 	mul.w	r8, r8, r0
 80012a0:	45a0      	cmp	r8, r4
 80012a2:	d907      	bls.n	80012b4 <__udivmoddi4+0x14c>
 80012a4:	192c      	adds	r4, r5, r4
 80012a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80012aa:	d202      	bcs.n	80012b2 <__udivmoddi4+0x14a>
 80012ac:	45a0      	cmp	r8, r4
 80012ae:	f200 80b6 	bhi.w	800141e <__udivmoddi4+0x2b6>
 80012b2:	4618      	mov	r0, r3
 80012b4:	eba4 0408 	sub.w	r4, r4, r8
 80012b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012bc:	e79f      	b.n	80011fe <__udivmoddi4+0x96>
 80012be:	f1c7 0c20 	rsb	ip, r7, #32
 80012c2:	40bb      	lsls	r3, r7
 80012c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80012c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80012cc:	fa01 f407 	lsl.w	r4, r1, r7
 80012d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80012d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80012d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80012dc:	4325      	orrs	r5, r4
 80012de:	fbb3 f9f8 	udiv	r9, r3, r8
 80012e2:	0c2c      	lsrs	r4, r5, #16
 80012e4:	fb08 3319 	mls	r3, r8, r9, r3
 80012e8:	fa1f fa8e 	uxth.w	sl, lr
 80012ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80012f0:	fb09 f40a 	mul.w	r4, r9, sl
 80012f4:	429c      	cmp	r4, r3
 80012f6:	fa02 f207 	lsl.w	r2, r2, r7
 80012fa:	fa00 f107 	lsl.w	r1, r0, r7
 80012fe:	d90b      	bls.n	8001318 <__udivmoddi4+0x1b0>
 8001300:	eb1e 0303 	adds.w	r3, lr, r3
 8001304:	f109 30ff 	add.w	r0, r9, #4294967295
 8001308:	f080 8087 	bcs.w	800141a <__udivmoddi4+0x2b2>
 800130c:	429c      	cmp	r4, r3
 800130e:	f240 8084 	bls.w	800141a <__udivmoddi4+0x2b2>
 8001312:	f1a9 0902 	sub.w	r9, r9, #2
 8001316:	4473      	add	r3, lr
 8001318:	1b1b      	subs	r3, r3, r4
 800131a:	b2ad      	uxth	r5, r5
 800131c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001320:	fb08 3310 	mls	r3, r8, r0, r3
 8001324:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001328:	fb00 fa0a 	mul.w	sl, r0, sl
 800132c:	45a2      	cmp	sl, r4
 800132e:	d908      	bls.n	8001342 <__udivmoddi4+0x1da>
 8001330:	eb1e 0404 	adds.w	r4, lr, r4
 8001334:	f100 33ff 	add.w	r3, r0, #4294967295
 8001338:	d26b      	bcs.n	8001412 <__udivmoddi4+0x2aa>
 800133a:	45a2      	cmp	sl, r4
 800133c:	d969      	bls.n	8001412 <__udivmoddi4+0x2aa>
 800133e:	3802      	subs	r0, #2
 8001340:	4474      	add	r4, lr
 8001342:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001346:	fba0 8902 	umull	r8, r9, r0, r2
 800134a:	eba4 040a 	sub.w	r4, r4, sl
 800134e:	454c      	cmp	r4, r9
 8001350:	46c2      	mov	sl, r8
 8001352:	464b      	mov	r3, r9
 8001354:	d354      	bcc.n	8001400 <__udivmoddi4+0x298>
 8001356:	d051      	beq.n	80013fc <__udivmoddi4+0x294>
 8001358:	2e00      	cmp	r6, #0
 800135a:	d069      	beq.n	8001430 <__udivmoddi4+0x2c8>
 800135c:	ebb1 050a 	subs.w	r5, r1, sl
 8001360:	eb64 0403 	sbc.w	r4, r4, r3
 8001364:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001368:	40fd      	lsrs	r5, r7
 800136a:	40fc      	lsrs	r4, r7
 800136c:	ea4c 0505 	orr.w	r5, ip, r5
 8001370:	e9c6 5400 	strd	r5, r4, [r6]
 8001374:	2700      	movs	r7, #0
 8001376:	e747      	b.n	8001208 <__udivmoddi4+0xa0>
 8001378:	f1c2 0320 	rsb	r3, r2, #32
 800137c:	fa20 f703 	lsr.w	r7, r0, r3
 8001380:	4095      	lsls	r5, r2
 8001382:	fa01 f002 	lsl.w	r0, r1, r2
 8001386:	fa21 f303 	lsr.w	r3, r1, r3
 800138a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800138e:	4338      	orrs	r0, r7
 8001390:	0c01      	lsrs	r1, r0, #16
 8001392:	fbb3 f7fe 	udiv	r7, r3, lr
 8001396:	fa1f f885 	uxth.w	r8, r5
 800139a:	fb0e 3317 	mls	r3, lr, r7, r3
 800139e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80013a2:	fb07 f308 	mul.w	r3, r7, r8
 80013a6:	428b      	cmp	r3, r1
 80013a8:	fa04 f402 	lsl.w	r4, r4, r2
 80013ac:	d907      	bls.n	80013be <__udivmoddi4+0x256>
 80013ae:	1869      	adds	r1, r5, r1
 80013b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80013b4:	d22f      	bcs.n	8001416 <__udivmoddi4+0x2ae>
 80013b6:	428b      	cmp	r3, r1
 80013b8:	d92d      	bls.n	8001416 <__udivmoddi4+0x2ae>
 80013ba:	3f02      	subs	r7, #2
 80013bc:	4429      	add	r1, r5
 80013be:	1acb      	subs	r3, r1, r3
 80013c0:	b281      	uxth	r1, r0
 80013c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80013c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80013ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80013ce:	fb00 f308 	mul.w	r3, r0, r8
 80013d2:	428b      	cmp	r3, r1
 80013d4:	d907      	bls.n	80013e6 <__udivmoddi4+0x27e>
 80013d6:	1869      	adds	r1, r5, r1
 80013d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80013dc:	d217      	bcs.n	800140e <__udivmoddi4+0x2a6>
 80013de:	428b      	cmp	r3, r1
 80013e0:	d915      	bls.n	800140e <__udivmoddi4+0x2a6>
 80013e2:	3802      	subs	r0, #2
 80013e4:	4429      	add	r1, r5
 80013e6:	1ac9      	subs	r1, r1, r3
 80013e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80013ec:	e73b      	b.n	8001266 <__udivmoddi4+0xfe>
 80013ee:	4637      	mov	r7, r6
 80013f0:	4630      	mov	r0, r6
 80013f2:	e709      	b.n	8001208 <__udivmoddi4+0xa0>
 80013f4:	4607      	mov	r7, r0
 80013f6:	e6e7      	b.n	80011c8 <__udivmoddi4+0x60>
 80013f8:	4618      	mov	r0, r3
 80013fa:	e6fb      	b.n	80011f4 <__udivmoddi4+0x8c>
 80013fc:	4541      	cmp	r1, r8
 80013fe:	d2ab      	bcs.n	8001358 <__udivmoddi4+0x1f0>
 8001400:	ebb8 0a02 	subs.w	sl, r8, r2
 8001404:	eb69 020e 	sbc.w	r2, r9, lr
 8001408:	3801      	subs	r0, #1
 800140a:	4613      	mov	r3, r2
 800140c:	e7a4      	b.n	8001358 <__udivmoddi4+0x1f0>
 800140e:	4660      	mov	r0, ip
 8001410:	e7e9      	b.n	80013e6 <__udivmoddi4+0x27e>
 8001412:	4618      	mov	r0, r3
 8001414:	e795      	b.n	8001342 <__udivmoddi4+0x1da>
 8001416:	4667      	mov	r7, ip
 8001418:	e7d1      	b.n	80013be <__udivmoddi4+0x256>
 800141a:	4681      	mov	r9, r0
 800141c:	e77c      	b.n	8001318 <__udivmoddi4+0x1b0>
 800141e:	3802      	subs	r0, #2
 8001420:	442c      	add	r4, r5
 8001422:	e747      	b.n	80012b4 <__udivmoddi4+0x14c>
 8001424:	f1ac 0c02 	sub.w	ip, ip, #2
 8001428:	442b      	add	r3, r5
 800142a:	e72f      	b.n	800128c <__udivmoddi4+0x124>
 800142c:	4638      	mov	r0, r7
 800142e:	e708      	b.n	8001242 <__udivmoddi4+0xda>
 8001430:	4637      	mov	r7, r6
 8001432:	e6e9      	b.n	8001208 <__udivmoddi4+0xa0>

08001434 <__aeabi_idiv0>:
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001442:	f002 ffad 	bl	80043a0 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8001446:	f000 fd2d 	bl	8001ea4 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800144a:	f000 ffbb 	bl	80023c4 <MX_GPIO_Init>
    MX_CRC_Init();
 800144e:	f000 fdb3 	bl	8001fb8 <MX_CRC_Init>
    MX_DMA2D_Init();
 8001452:	f000 fdc5 	bl	8001fe0 <MX_DMA2D_Init>
    MX_FMC_Init();
 8001456:	f000 ff65 	bl	8002324 <MX_FMC_Init>
    MX_I2C3_Init();
 800145a:	f000 fdf3 	bl	8002044 <MX_I2C3_Init>
    MX_LTDC_Init();
 800145e:	f000 fe31 	bl	80020c4 <MX_LTDC_Init>
    MX_SPI5_Init();
 8001462:	f000 feaf 	bl	80021c4 <MX_SPI5_Init>
    MX_TIM1_Init();
 8001466:	f000 fee3 	bl	8002230 <MX_TIM1_Init>
    MX_USART1_UART_Init();
 800146a:	f000 ff31 	bl	80022d0 <MX_USART1_UART_Init>
    initDisplay();
 800146e:	f000 f89b 	bl	80015a8 <initDisplay>

    float r[numbins];
 8001472:	4b4a      	ldr	r3, [pc, #296]	; (800159c <main+0x164>)
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	1e43      	subs	r3, r0, #1
 8001478:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800147c:	f102 020c 	add.w	r2, r2, #12
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4603      	mov	r3, r0
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	f04f 0400 	mov.w	r4, #0
 8001492:	0154      	lsls	r4, r2, #5
 8001494:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001498:	014b      	lsls	r3, r1, #5
 800149a:	4603      	mov	r3, r0
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	f04f 0400 	mov.w	r4, #0
 80014aa:	0154      	lsls	r4, r2, #5
 80014ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014b0:	014b      	lsls	r3, r1, #5
 80014b2:	4603      	mov	r3, r0
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	3303      	adds	r3, #3
 80014b8:	3307      	adds	r3, #7
 80014ba:	08db      	lsrs	r3, r3, #3
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	ebad 0d03 	sub.w	sp, sp, r3
 80014c2:	466b      	mov	r3, sp
 80014c4:	3303      	adds	r3, #3
 80014c6:	089b      	lsrs	r3, r3, #2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80014ce:	f102 0208 	add.w	r2, r2, #8
 80014d2:	6013      	str	r3, [r2, #0]

    while (1){
    float fFund = sample_frequency / numbins;
 80014d4:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <main+0x168>)
 80014d6:	edd3 6a00 	vldr	s13, [r3]
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <main+0x164>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80014ee:	f103 0304 	add.w	r3, r3, #4
 80014f2:	edc3 7a00 	vstr	s15, [r3]
    cplx buf[] = {1.5, 0.65027864, -0.47552826, -0.00848724, 1.21352549, 1.06066017, -0.29389263,
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	3b10      	subs	r3, #16
 80014fc:	4a29      	ldr	r2, [pc, #164]	; (80015a4 <main+0x16c>)
 80014fe:	4618      	mov	r0, r3
 8001500:	4611      	mov	r1, r2
 8001502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001506:	461a      	mov	r2, r3
 8001508:	f009 f92e 	bl	800a768 <memcpy>
                  -0.0, 1.06590557, 0.46352549, -0.66401127, -0.29389263,
                  1.06066017, 1.21352549, -0.00848724, -0.47552826, 0.65027864,
                  1.5, 0.65027864, -0.47552826, -0.00848724, 1.21352549,
                  1.06066017, -0.29389263, -0.66401127, 0.46352549, 1.06590557,
                  0.0, -1.06590557, -0.46352549, 0.66401127, 0.29389263, -1.06066017};
    fft(buf, numbins);
 800150c:	4b23      	ldr	r3, [pc, #140]	; (800159c <main+0x164>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	3b10      	subs	r3, #16
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fafb 	bl	8001b14 <fft>
    getMagnitude(buf, r, numbins);
 800151e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001522:	f103 0308 	add.w	r3, r3, #8
 8001526:	6819      	ldr	r1, [r3, #0]
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <main+0x164>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	3b10      	subs	r3, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fc3c 	bl	8001db0 <getMagnitude>
    normalize(r, numbins);
 8001538:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800153c:	f103 0308 	add.w	r3, r3, #8
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <main+0x164>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4619      	mov	r1, r3
 8001548:	4610      	mov	r0, r2
 800154a:	f000 fc65 	bl	8001e18 <normalize>
    updateGraph(r, numbins, fFund);
 800154e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001552:	f103 0308 	add.w	r3, r3, #8
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <main+0x164>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001560:	f101 0104 	add.w	r1, r1, #4
 8001564:	ed91 0a00 	vldr	s0, [r1]
 8001568:	4619      	mov	r1, r3
 800156a:	4610      	mov	r0, r2
 800156c:	f000 f9cc 	bl	8001908 <updateGraph>

    numbins = numbins / 2;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <main+0x164>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0fda      	lsrs	r2, r3, #31
 8001576:	4413      	add	r3, r2
 8001578:	105b      	asrs	r3, r3, #1
 800157a:	461a      	mov	r2, r3
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <main+0x164>)
 800157e:	601a      	str	r2, [r3, #0]

    if (numbins == 32)
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <main+0x164>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b20      	cmp	r3, #32
 8001586:	d103      	bne.n	8001590 <main+0x158>
    {
        numbins = 256;
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <main+0x164>)
 800158a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800158e:	601a      	str	r2, [r3, #0]
        }

        HAL_Delay(2000);
 8001590:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001594:	f002 ff46 	bl	8004424 <HAL_Delay>
    while (1){
 8001598:	e79c      	b.n	80014d4 <main+0x9c>
 800159a:	bf00      	nop
 800159c:	20000004 	.word	0x20000004
 80015a0:	20000000 	.word	0x20000000
 80015a4:	0800bdb8 	.word	0x0800bdb8

080015a8 <initDisplay>:
/**
 * @brief Initialises, turns on and clears the display. It also sets the foreground layer to transparent and the 
 * background layer to white.
 */
void initDisplay()
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
    BSP_LCD_Init();
 80015ac:	f002 f816 	bl	80035dc <BSP_LCD_Init>
    BSP_LCD_DisplayOn();
 80015b0:	f002 fb2e 	bl	8003c10 <BSP_LCD_DisplayOn>

    BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER); //intialize the layers using the buffer
 80015b4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80015b8:	2000      	movs	r0, #0
 80015ba:	f002 f891 	bl	80036e0 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 80015be:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80015c2:	2001      	movs	r0, #1
 80015c4:	f002 f88c 	bl	80036e0 <BSP_LCD_LayerDefaultInit>
    clearLayers();
 80015c8:	f000 f814 	bl	80015f4 <clearLayers>

    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f002 f8eb 	bl	80037a8 <BSP_LCD_SelectLayer>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); //make the background for text on the front layer white
 80015d2:	f04f 30ff 	mov.w	r0, #4294967295
 80015d6:	f002 f90f 	bl	80037f8 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK); //make the text color black
 80015da:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80015de:	f002 f8f3 	bl	80037c8 <BSP_LCD_SetTextColor>

    BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f002 f8e0 	bl	80037a8 <BSP_LCD_SelectLayer>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); //make the background for text on the back layer white
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f002 f904 	bl	80037f8 <BSP_LCD_SetBackColor>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <clearLayers>:

/**
 * @brief Clears the layers of the display
 */
void clearLayers(){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f002 f8d5 	bl	80037a8 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_WHITE); //make the front layer white
 80015fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001602:	f002 f92d 	bl	8003860 <BSP_LCD_Clear>
    BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8001606:	2000      	movs	r0, #0
 8001608:	f002 f8ce 	bl	80037a8 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_WHITE); //make the back layer white
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f002 f926 	bl	8003860 <BSP_LCD_Clear>
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <drawAxes>:

/**
 * @brief Draws the axes for the graph and labels them 
 */
void drawAxes()
{
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b09a      	sub	sp, #104	; 0x68
 800161c:	af00      	add	r7, sp, #0
    BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 800161e:	2000      	movs	r0, #0
 8001620:	f002 f8c2 	bl	80037a8 <BSP_LCD_SelectLayer>
    int yAxisStart = 10;
 8001624:	230a      	movs	r3, #10
 8001626:	65bb      	str	r3, [r7, #88]	; 0x58
    int yAxisLength = 201;
 8001628:	23c9      	movs	r3, #201	; 0xc9
 800162a:	657b      	str	r3, [r7, #84]	; 0x54
    int yAxisPos = 295;
 800162c:	f240 1327 	movw	r3, #295	; 0x127
 8001630:	653b      	str	r3, [r7, #80]	; 0x50
    BSP_LCD_DrawHLine(yAxisStart, yAxisPos, yAxisLength); //draw the y axis
 8001632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001634:	b29b      	uxth	r3, r3
 8001636:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001638:	b291      	uxth	r1, r2
 800163a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800163c:	b292      	uxth	r2, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f002 fa34 	bl	8003aac <BSP_LCD_DrawHLine>
    int xAxisStart = 210;
 8001644:	23d2      	movs	r3, #210	; 0xd2
 8001646:	64fb      	str	r3, [r7, #76]	; 0x4c
    int xAxisLength = 256;
 8001648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164c:	64bb      	str	r3, [r7, #72]	; 0x48
    int xAxisPos = 39;
 800164e:	2327      	movs	r3, #39	; 0x27
 8001650:	647b      	str	r3, [r7, #68]	; 0x44
    BSP_LCD_DrawVLine(xAxisStart, xAxisPos, xAxisLength); //draw the x axis
 8001652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001654:	b29b      	uxth	r3, r3
 8001656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001658:	b291      	uxth	r1, r2
 800165a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800165c:	b292      	uxth	r2, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fa62 	bl	8003b28 <BSP_LCD_DrawVLine>

    char *ylabel = "Volt (V)";
 8001664:	4ba2      	ldr	r3, [pc, #648]	; (80018f0 <drawAxes+0x2d8>)
 8001666:	643b      	str	r3, [r7, #64]	; 0x40
    char *xlabel[11] = {"F", "r", "e", "q", " ", "i", "n", " ", "k", "H", "z"};
 8001668:	4ba2      	ldr	r3, [pc, #648]	; (80018f4 <drawAxes+0x2dc>)
 800166a:	f107 0408 	add.w	r4, r7, #8
 800166e:	461d      	mov	r5, r3
 8001670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001678:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800167c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    BSP_LCD_SetFont(&Font8);
 8001680:	489d      	ldr	r0, [pc, #628]	; (80018f8 <drawAxes+0x2e0>)
 8001682:	f002 f8d3 	bl	800382c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(110, 310, (uint8_t *) ylabel, LEFT_MODE); //Display the axis title
 8001686:	2303      	movs	r3, #3
 8001688:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800168a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800168e:	206e      	movs	r0, #110	; 0x6e
 8001690:	f002 f952 	bl	8003938 <BSP_LCD_DisplayStringAt>

    for (int a = 0; a < 11; a++)
 8001694:	2300      	movs	r3, #0
 8001696:	667b      	str	r3, [r7, #100]	; 0x64
 8001698:	e015      	b.n	80016c6 <drawAxes+0xae>
    {
        BSP_LCD_DisplayStringAt(230, 40 + a * 9, (uint8_t *) xlabel[a], LEFT_MODE);
 800169a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800169c:	b29b      	uxth	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	00d2      	lsls	r2, r2, #3
 80016a2:	4413      	add	r3, r2
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3328      	adds	r3, #40	; 0x28
 80016a8:	b299      	uxth	r1, r3
 80016aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80016b2:	4413      	add	r3, r2
 80016b4:	f853 2c60 	ldr.w	r2, [r3, #-96]
 80016b8:	2303      	movs	r3, #3
 80016ba:	20e6      	movs	r0, #230	; 0xe6
 80016bc:	f002 f93c 	bl	8003938 <BSP_LCD_DisplayStringAt>
    for (int a = 0; a < 11; a++)
 80016c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016c2:	3301      	adds	r3, #1
 80016c4:	667b      	str	r3, [r7, #100]	; 0x64
 80016c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016c8:	2b0a      	cmp	r3, #10
 80016ca:	dde6      	ble.n	800169a <drawAxes+0x82>
    }

    int interval = yAxisLength / 10;
 80016cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ce:	4a8b      	ldr	r2, [pc, #556]	; (80018fc <drawAxes+0x2e4>)
 80016d0:	fb82 1203 	smull	r1, r2, r2, r3
 80016d4:	1092      	asrs	r2, r2, #2
 80016d6:	17db      	asrs	r3, r3, #31
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	63fb      	str	r3, [r7, #60]	; 0x3c
    float vInterval = maxVoltage / 10;
 80016dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    char caption[4];
    for (int a = 0; a < 11; a++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	663b      	str	r3, [r7, #96]	; 0x60
 80016f0:	e06f      	b.n	80017d2 <drawAxes+0x1ba>
    { //this loop makes little lines on the axis as well as the lines for the grid for the y-axis
        if (a != 10)
 80016f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016f4:	2b0a      	cmp	r3, #10
 80016f6:	d018      	beq.n	800172a <drawAxes+0x112>
        {
            BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 80016f8:	4881      	ldr	r0, [pc, #516]	; (8001900 <drawAxes+0x2e8>)
 80016fa:	f002 f865 	bl	80037c8 <BSP_LCD_SetTextColor>
            BSP_LCD_DrawVLine(yAxisStart + a * interval, xAxisPos + 1, xAxisLength - 3);
 80016fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001700:	b29a      	uxth	r2, r3
 8001702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001704:	b29b      	uxth	r3, r3
 8001706:	fb12 f303 	smulbb	r3, r2, r3
 800170a:	b29a      	uxth	r2, r3
 800170c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800170e:	b29b      	uxth	r3, r3
 8001710:	4413      	add	r3, r2
 8001712:	b298      	uxth	r0, r3
 8001714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001716:	b29b      	uxth	r3, r3
 8001718:	3301      	adds	r3, #1
 800171a:	b299      	uxth	r1, r3
 800171c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800171e:	b29b      	uxth	r3, r3
 8001720:	3b03      	subs	r3, #3
 8001722:	b29b      	uxth	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	f002 f9ff 	bl	8003b28 <BSP_LCD_DrawVLine>
        }

        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800172a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800172e:	f002 f84b 	bl	80037c8 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawVLine(yAxisStart + a * interval, yAxisPos - 3, 7);
 8001732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001734:	b29a      	uxth	r2, r3
 8001736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001738:	b29b      	uxth	r3, r3
 800173a:	fb12 f303 	smulbb	r3, r2, r3
 800173e:	b29a      	uxth	r2, r3
 8001740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001742:	b29b      	uxth	r3, r3
 8001744:	4413      	add	r3, r2
 8001746:	b298      	uxth	r0, r3
 8001748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b03      	subs	r3, #3
 800174e:	b29b      	uxth	r3, r3
 8001750:	2207      	movs	r2, #7
 8001752:	4619      	mov	r1, r3
 8001754:	f002 f9e8 	bl	8003b28 <BSP_LCD_DrawVLine>

        gcvt(maxVoltage - vInterval * a, 2, caption);
 8001758:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800175c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001766:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800176a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001772:	ee17 0a90 	vmov	r0, s15
 8001776:	f7fe fe9f 	bl	80004b8 <__aeabi_f2d>
 800177a:	4604      	mov	r4, r0
 800177c:	460d      	mov	r5, r1
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	2002      	movs	r0, #2
 8001784:	ec45 4b10 	vmov	d0, r4, r5
 8001788:	f008 ff98 	bl	800a6bc <gcvt>
        if (a == 0)
 800178c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800178e:	2b00      	cmp	r3, #0
 8001790:	d107      	bne.n	80017a2 <drawAxes+0x18a>
        {
            caption[0] = '1';
 8001792:	2331      	movs	r3, #49	; 0x31
 8001794:	713b      	strb	r3, [r7, #4]
            caption[1] = '.';
 8001796:	232e      	movs	r3, #46	; 0x2e
 8001798:	717b      	strb	r3, [r7, #5]
            caption[2] = '0';
 800179a:	2330      	movs	r3, #48	; 0x30
 800179c:	71bb      	strb	r3, [r7, #6]
            caption[3] = '\0';
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]
        }
        BSP_LCD_DisplayStringAt(yAxisStart + a * interval - 4, yAxisPos + 2, (uint8_t *) caption, LEFT_MODE); //display intervals next to the axis
 80017a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	fb12 f303 	smulbb	r3, r2, r3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	3b04      	subs	r3, #4
 80017ba:	b298      	uxth	r0, r3
 80017bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3302      	adds	r3, #2
 80017c2:	b299      	uxth	r1, r3
 80017c4:	1d3a      	adds	r2, r7, #4
 80017c6:	2303      	movs	r3, #3
 80017c8:	f002 f8b6 	bl	8003938 <BSP_LCD_DisplayStringAt>
    for (int a = 0; a < 11; a++)
 80017cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017ce:	3301      	adds	r3, #1
 80017d0:	663b      	str	r3, [r7, #96]	; 0x60
 80017d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017d4:	2b0a      	cmp	r3, #10
 80017d6:	dd8c      	ble.n	80016f2 <drawAxes+0xda>
        // HAL_Delay(10);                                                                            //the delay makes it look cool
    }

    interval = xAxisLength / 15;
 80017d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017da:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <drawAxes+0x2ec>)
 80017dc:	fb82 1203 	smull	r1, r2, r2, r3
 80017e0:	441a      	add	r2, r3
 80017e2:	10d2      	asrs	r2, r2, #3
 80017e4:	17db      	asrs	r3, r3, #31
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    float fInterval = (maxFreq - minFreq) / 15000.0;
 80017ea:	f644 6220 	movw	r2, #20000	; 0x4e20
 80017ee:	230a      	movs	r3, #10
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fe4e 	bl	8000494 <__aeabi_i2d>
 80017f8:	a33b      	add	r3, pc, #236	; (adr r3, 80018e8 <drawAxes+0x2d0>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe ffdd 	bl	80007bc <__aeabi_ddiv>
 8001802:	4603      	mov	r3, r0
 8001804:	460c      	mov	r4, r1
 8001806:	4618      	mov	r0, r3
 8001808:	4621      	mov	r1, r4
 800180a:	f7ff f96f 	bl	8000aec <__aeabi_d2f>
 800180e:	4603      	mov	r3, r0
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
    for (int a = 0; a < 16; a++)
 8001812:	2300      	movs	r3, #0
 8001814:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001816:	e05e      	b.n	80018d6 <drawAxes+0x2be>
    { //this loop does the same as the previous loop, but for the x-axis
        if (a != 0)
 8001818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800181a:	2b00      	cmp	r3, #0
 800181c:	d016      	beq.n	800184c <drawAxes+0x234>
        {
            BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800181e:	4838      	ldr	r0, [pc, #224]	; (8001900 <drawAxes+0x2e8>)
 8001820:	f001 ffd2 	bl	80037c8 <BSP_LCD_SetTextColor>
            BSP_LCD_DrawHLine(yAxisStart, yAxisPos - a * interval, yAxisLength - 3);
 8001824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001826:	b298      	uxth	r0, r3
 8001828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800182a:	b29a      	uxth	r2, r3
 800182c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182e:	b299      	uxth	r1, r3
 8001830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001832:	b29b      	uxth	r3, r3
 8001834:	fb11 f303 	smulbb	r3, r1, r3
 8001838:	b29b      	uxth	r3, r3
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	b299      	uxth	r1, r3
 800183e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001840:	b29b      	uxth	r3, r3
 8001842:	3b03      	subs	r3, #3
 8001844:	b29b      	uxth	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	f002 f930 	bl	8003aac <BSP_LCD_DrawHLine>
        }
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800184c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001850:	f001 ffba 	bl	80037c8 <BSP_LCD_SetTextColor>
        BSP_LCD_DrawHLine(xAxisStart - 3, yAxisPos - a * interval, 7);
 8001854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001856:	b29b      	uxth	r3, r3
 8001858:	3b03      	subs	r3, #3
 800185a:	b298      	uxth	r0, r3
 800185c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800185e:	b29a      	uxth	r2, r3
 8001860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001862:	b299      	uxth	r1, r3
 8001864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001866:	b29b      	uxth	r3, r3
 8001868:	fb11 f303 	smulbb	r3, r1, r3
 800186c:	b29b      	uxth	r3, r3
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	b29b      	uxth	r3, r3
 8001872:	2207      	movs	r2, #7
 8001874:	4619      	mov	r1, r3
 8001876:	f002 f919 	bl	8003aac <BSP_LCD_DrawHLine>

        gcvt(fInterval * a, 2, caption);
 800187a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001884:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188c:	ee17 0a90 	vmov	r0, s15
 8001890:	f7fe fe12 	bl	80004b8 <__aeabi_f2d>
 8001894:	4604      	mov	r4, r0
 8001896:	460d      	mov	r5, r1
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4619      	mov	r1, r3
 800189c:	2002      	movs	r0, #2
 800189e:	ec45 4b10 	vmov	d0, r4, r5
 80018a2:	f008 ff0b 	bl	800a6bc <gcvt>
        BSP_LCD_DisplayStringAt(xAxisStart + 4, yAxisPos - a * interval - 2, (uint8_t *) caption, LEFT_MODE); //Display intervals next to the axis
 80018a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3304      	adds	r3, #4
 80018ac:	b298      	uxth	r0, r3
 80018ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b4:	b299      	uxth	r1, r3
 80018b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	fb11 f303 	smulbb	r3, r1, r3
 80018be:	b29b      	uxth	r3, r3
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3b02      	subs	r3, #2
 80018c6:	b299      	uxth	r1, r3
 80018c8:	1d3a      	adds	r2, r7, #4
 80018ca:	2303      	movs	r3, #3
 80018cc:	f002 f834 	bl	8003938 <BSP_LCD_DisplayStringAt>
    for (int a = 0; a < 16; a++)
 80018d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018d2:	3301      	adds	r3, #1
 80018d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	dd9d      	ble.n	8001818 <drawAxes+0x200>
        // HAL_Delay(10);
    }
    // BSP_LCD_Clear(LCD_COLOR_TRANSPARENT);
}
 80018dc:	bf00      	nop
 80018de:	3768      	adds	r7, #104	; 0x68
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bdb0      	pop	{r4, r5, r7, pc}
 80018e4:	f3af 8000 	nop.w
 80018e8:	00000000 	.word	0x00000000
 80018ec:	40cd4c00 	.word	0x40cd4c00
 80018f0:	0800cdb8 	.word	0x0800cdb8
 80018f4:	0800cdec 	.word	0x0800cdec
 80018f8:	20000050 	.word	0x20000050
 80018fc:	66666667 	.word	0x66666667
 8001900:	ffd3d3d3 	.word	0xffd3d3d3
 8001904:	88888889 	.word	0x88888889

08001908 <updateGraph>:
 * @param bins The array containing the magnitudes of each frequency
 * @param numbins The number of bins in the array
 * @param fFund The fundemental frequency of the samples
 */
void updateGraph(float *bins, int numbins, float fFund)
{
 8001908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190a:	b08f      	sub	sp, #60	; 0x3c
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	ed87 0a01 	vstr	s0, [r7, #4]
 8001916:	466b      	mov	r3, sp
 8001918:	461e      	mov	r6, r3
//	}
//
//	if (same == 0){
//		return;
//	}
    numbins = numbins / 2;  //only display the first half of the input to get rid of reflections 
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	0fda      	lsrs	r2, r3, #31
 800191e:	4413      	add	r3, r2
 8001920:	105b      	asrs	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]

	clearLayers();
 8001924:	f7ff fe66 	bl	80015f4 <clearLayers>
	drawAxes();
 8001928:	f7ff fe76 	bl	8001618 <drawAxes>
    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 800192c:	2001      	movs	r0, #1
 800192e:	f001 ff3b 	bl	80037a8 <BSP_LCD_SelectLayer>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001932:	4877      	ldr	r0, [pc, #476]	; (8001b10 <updateGraph+0x208>)
 8001934:	f001 ff48 	bl	80037c8 <BSP_LCD_SetTextColor>
    int endPosition = 210;          //the x position of the line that reperesents the x axis
 8001938:	23d2      	movs	r3, #210	; 0xd2
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
    float linePositions[numbins];
 800193c:	68b8      	ldr	r0, [r7, #8]
 800193e:	1e43      	subs	r3, r0, #1
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
 8001942:	4603      	mov	r3, r0
 8001944:	4619      	mov	r1, r3
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	f04f 0400 	mov.w	r4, #0
 8001952:	0154      	lsls	r4, r2, #5
 8001954:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001958:	014b      	lsls	r3, r1, #5
 800195a:	4603      	mov	r3, r0
 800195c:	4619      	mov	r1, r3
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	f04f 0400 	mov.w	r4, #0
 800196a:	0154      	lsls	r4, r2, #5
 800196c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001970:	014b      	lsls	r3, r1, #5
 8001972:	4603      	mov	r3, r0
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	3303      	adds	r3, #3
 8001978:	3307      	adds	r3, #7
 800197a:	08db      	lsrs	r3, r3, #3
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	ebad 0d03 	sub.w	sp, sp, r3
 8001982:	466b      	mov	r3, sp
 8001984:	3303      	adds	r3, #3
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    int xAxisYend = 295;
 800198c:	f240 1327 	movw	r3, #295	; 0x127
 8001990:	623b      	str	r3, [r7, #32]
    float binWidth = 256 / numbins;   //the "width" that each bin would occupy on the spectrum, in number of pixels
 8001992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	fb92 f3f3 	sdiv	r3, r2, r3
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a4:	edc7 7a07 	vstr	s15, [r7, #28]

    for (int a = 0; a < numbins; a++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
 80019ac:	e033      	b.n	8001a16 <updateGraph+0x10e>
    { //determine the positions of the lines that will be drawn
        linePositions[a] = xAxisYend - a * (binWidth) - (binWidth / 2.0);
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80019c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ce:	ee17 0a90 	vmov	r0, s15
 80019d2:	f7fe fd71 	bl	80004b8 <__aeabi_f2d>
 80019d6:	4604      	mov	r4, r0
 80019d8:	460d      	mov	r5, r1
 80019da:	69f8      	ldr	r0, [r7, #28]
 80019dc:	f7fe fd6c 	bl	80004b8 <__aeabi_f2d>
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019e8:	f7fe fee8 	bl	80007bc <__aeabi_ddiv>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4620      	mov	r0, r4
 80019f2:	4629      	mov	r1, r5
 80019f4:	f7fe fc00 	bl	80001f8 <__aeabi_dsub>
 80019f8:	4603      	mov	r3, r0
 80019fa:	460c      	mov	r4, r1
 80019fc:	4618      	mov	r0, r3
 80019fe:	4621      	mov	r1, r4
 8001a00:	f7ff f874 	bl	8000aec <__aeabi_d2f>
 8001a04:	4601      	mov	r1, r0
 8001a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	6019      	str	r1, [r3, #0]
    for (int a = 0; a < numbins; a++)
 8001a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a12:	3301      	adds	r3, #1
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
 8001a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	dbc7      	blt.n	80019ae <updateGraph+0xa6>
    }

    int startPosition;
    int yAxisLength = 200;
 8001a1e:	23c8      	movs	r3, #200	; 0xc8
 8001a20:	61bb      	str	r3, [r7, #24]
    for (int a = 0; a < numbins; a++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
 8001a26:	e067      	b.n	8001af8 <updateGraph+0x1f0>
    {
        startPosition = endPosition - (yAxisLength * bins[a]);    //double the magnitude to correct for reflection 
 8001a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a54:	ee17 3a90 	vmov	r3, s15
 8001a58:	617b      	str	r3, [r7, #20]
        if (numbins < 65){
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b40      	cmp	r3, #64	; 0x40
 8001a5e:	dc2f      	bgt.n	8001ac0 <updateGraph+0x1b8>
        	BSP_LCD_DrawRect(startPosition, linePositions[a] - (binWidth / 2), endPosition - startPosition, binWidth - 2);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	b298      	uxth	r0, r3
 8001a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	ed93 7a00 	vldr	s14, [r3]
 8001a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a74:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a78:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a84:	ee17 3a90 	vmov	r3, s15
 8001a88:	b299      	uxth	r1, r3
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aa6:	ee17 3a90 	vmov	r3, s15
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	f002 f87e 	bl	8003bac <BSP_LCD_DrawRect>
            HAL_Delay(128 / numbins);
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fcb3 	bl	8004424 <HAL_Delay>
 8001abe:	e018      	b.n	8001af2 <updateGraph+0x1ea>
        } else {
            BSP_LCD_DrawHLine(startPosition, linePositions[a], endPosition - startPosition);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	b298      	uxth	r0, r3
 8001ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad4:	ee17 3a90 	vmov	r3, s15
 8001ad8:	b299      	uxth	r1, r3
 8001ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f001 ffe0 	bl	8003aac <BSP_LCD_DrawHLine>
            HAL_Delay(1);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f002 fc99 	bl	8004424 <HAL_Delay>
    for (int a = 0; a < numbins; a++)
 8001af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af4:	3301      	adds	r3, #1
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
 8001af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	db93      	blt.n	8001a28 <updateGraph+0x120>
        }
    }
    BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f001 fe51 	bl	80037a8 <BSP_LCD_SelectLayer>
 8001b06:	46b5      	mov	sp, r6
}
 8001b08:	bf00      	nop
 8001b0a:	373c      	adds	r7, #60	; 0x3c
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b10:	ffff0000 	.word	0xffff0000

08001b14 <fft>:
/**
 * @brief The function used to start of the recursive fft function
 * @param buf The data samples used as input to the fft algorithm
 * @param n The number of samples in the array
 */
void fft(cplx buf[], int n){
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	466b      	mov	r3, sp
 8001b20:	461e      	mov	r6, r3
    cplx out[n];
 8001b22:	6838      	ldr	r0, [r7, #0]
 8001b24:	1e43      	subs	r3, r0, #1
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	f04f 0400 	mov.w	r4, #0
 8001b38:	01d4      	lsls	r4, r2, #7
 8001b3a:	ea44 6451 	orr.w	r4, r4, r1, lsr #25
 8001b3e:	01cb      	lsls	r3, r1, #7
 8001b40:	4603      	mov	r3, r0
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	f04f 0400 	mov.w	r4, #0
 8001b50:	01d4      	lsls	r4, r2, #7
 8001b52:	ea44 6451 	orr.w	r4, r4, r1, lsr #25
 8001b56:	01cb      	lsls	r3, r1, #7
 8001b58:	4603      	mov	r3, r0
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	3307      	adds	r3, #7
 8001b5e:	3307      	adds	r3, #7
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	ebad 0d03 	sub.w	sp, sp, r3
 8001b68:	466b      	mov	r3, sp
 8001b6a:	3307      	adds	r3, #7
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	60fb      	str	r3, [r7, #12]
    for (int a = 0; a < n; a++){
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e012      	b.n	8001b9e <fft+0x8a>
        out[a] = buf[a];
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001b84:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001b88:	68fd      	ldr	r5, [r7, #12]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	0100      	lsls	r0, r0, #4
 8001b8e:	4428      	add	r0, r5
 8001b90:	e9c0 1200 	strd	r1, r2, [r0]
 8001b94:	e9c0 3402 	strd	r3, r4, [r0, #8]
    for (int a = 0; a < n; a++){
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dbe8      	blt.n	8001b78 <fft+0x64>
    }

    fftRecurse(buf, out, n, 1);
 8001ba6:	68f9      	ldr	r1, [r7, #12]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f807 	bl	8001bc0 <fftRecurse>
 8001bb2:	46b5      	mov	sp, r6
}
 8001bb4:	bf00      	nop
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbc:	0000      	movs	r0, r0
	...

08001bc0 <fftRecurse>:
 * @param out The output array
 * @param n The number of values in the input array 
 * @param step The step size for the stage 
 */
void fftRecurse(cplx buf[], cplx out[], int n, int step)
{
 8001bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc4:	b08f      	sub	sp, #60	; 0x3c
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	603b      	str	r3, [r7, #0]
    if (step < n)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f280 80e2 	bge.w	8001d9e <fftRecurse+0x1de>
    {
        fftRecurse(out, buf, n, step * 2);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68f9      	ldr	r1, [r7, #12]
 8001be2:	68b8      	ldr	r0, [r7, #8]
 8001be4:	f7ff ffec 	bl	8001bc0 <fftRecurse>
        fftRecurse(out + step, buf + step, n, step * 2);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	18d0      	adds	r0, r2, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	18d1      	adds	r1, r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	f7ff ffdf 	bl	8001bc0 <fftRecurse>

        for (int a = 0; a < n; a += 2 * step)
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
 8001c06:	e0c5      	b.n	8001d94 <fftRecurse+0x1d4>
        {
            cplx t = cexp(-I * M_PI * a / n) * out[a + step];
 8001c08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c0a:	f7fe fc43 	bl	8000494 <__aeabi_i2d>
 8001c0e:	4680      	mov	r8, r0
 8001c10:	4689      	mov	r9, r1
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c1a:	4640      	mov	r0, r8
 8001c1c:	4649      	mov	r1, r9
 8001c1e:	f7fe fca3 	bl	8000568 <__aeabi_dmul>
 8001c22:	4603      	mov	r3, r0
 8001c24:	460c      	mov	r4, r1
 8001c26:	469a      	mov	sl, r3
 8001c28:	46a3      	mov	fp, r4
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fc32 	bl	8000494 <__aeabi_i2d>
 8001c30:	4604      	mov	r4, r0
 8001c32:	460d      	mov	r5, r1
 8001c34:	4622      	mov	r2, r4
 8001c36:	462b      	mov	r3, r5
 8001c38:	4650      	mov	r0, sl
 8001c3a:	4659      	mov	r1, fp
 8001c3c:	f7fe fdbe 	bl	80007bc <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4692      	mov	sl, r2
 8001c46:	469b      	mov	fp, r3
 8001c48:	a357      	add	r3, pc, #348	; (adr r3, 8001da8 <fftRecurse+0x1e8>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	4640      	mov	r0, r8
 8001c50:	4649      	mov	r1, r9
 8001c52:	f7fe fc89 	bl	8000568 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4622      	mov	r2, r4
 8001c60:	462b      	mov	r3, r5
 8001c62:	f7fe fdab 	bl	80007bc <__aeabi_ddiv>
 8001c66:	4603      	mov	r3, r0
 8001c68:	460c      	mov	r4, r1
 8001c6a:	4651      	mov	r1, sl
 8001c6c:	465a      	mov	r2, fp
 8001c6e:	ec42 1b16 	vmov	d6, r1, r2
 8001c72:	ec44 3b17 	vmov	d7, r3, r4
 8001c76:	eeb0 0a46 	vmov.f32	s0, s12
 8001c7a:	eef0 0a66 	vmov.f32	s1, s13
 8001c7e:	eeb0 1a47 	vmov.f32	s2, s14
 8001c82:	eef0 1a67 	vmov.f32	s3, s15
 8001c86:	f007 f839 	bl	8008cfc <cexp>
 8001c8a:	eeb0 6a40 	vmov.f32	s12, s0
 8001c8e:	eef0 6a60 	vmov.f32	s13, s1
 8001c92:	eeb0 7a41 	vmov.f32	s14, s2
 8001c96:	eef0 7a61 	vmov.f32	s15, s3
 8001c9a:	eeb0 5a46 	vmov.f32	s10, s12
 8001c9e:	eef0 5a66 	vmov.f32	s11, s13
 8001ca2:	eeb0 4a47 	vmov.f32	s8, s14
 8001ca6:	eef0 4a67 	vmov.f32	s9, s15
 8001caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	ed93 7b00 	vldr	d7, [r3]
 8001cba:	ed93 6b02 	vldr	d6, [r3, #8]
 8001cbe:	eeb0 3a44 	vmov.f32	s6, s8
 8001cc2:	eef0 3a64 	vmov.f32	s7, s9
 8001cc6:	eeb0 2a45 	vmov.f32	s4, s10
 8001cca:	eef0 2a65 	vmov.f32	s5, s11
 8001cce:	eeb0 1a46 	vmov.f32	s2, s12
 8001cd2:	eef0 1a66 	vmov.f32	s3, s13
 8001cd6:	eeb0 0a47 	vmov.f32	s0, s14
 8001cda:	eef0 0a67 	vmov.f32	s1, s15
 8001cde:	f7fe ff6d 	bl	8000bbc <__muldc3>
 8001ce2:	ed87 0b08 	vstr	d0, [r7, #32]
 8001ce6:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8001cea:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001cee:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001cf2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001cf6:	e9c7 3404 	strd	r3, r4, [r7, #16]
            buf[a / 2] = out[a] + t;
 8001cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	4413      	add	r3, r2
 8001d02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d06:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8001d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0c:	0fda      	lsrs	r2, r3, #31
 8001d0e:	4413      	add	r3, r2
 8001d10:	105b      	asrs	r3, r3, #1
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	18d4      	adds	r4, r2, r3
 8001d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d1c:	f7fe fa6e 	bl	80001fc <__adddf3>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4615      	mov	r5, r2
 8001d26:	461e      	mov	r6, r3
 8001d28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d2c:	4640      	mov	r0, r8
 8001d2e:	4649      	mov	r1, r9
 8001d30:	f7fe fa64 	bl	80001fc <__adddf3>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	e9c4 5600 	strd	r5, r6, [r4]
 8001d3c:	e9c4 2302 	strd	r2, r3, [r4, #8]
            buf[(a + n) / 2] = out[a] - t;
 8001d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	4413      	add	r3, r2
 8001d48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d4c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8001d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	0fda      	lsrs	r2, r3, #31
 8001d58:	4413      	add	r3, r2
 8001d5a:	105b      	asrs	r3, r3, #1
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	18d4      	adds	r4, r2, r3
 8001d62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d66:	f7fe fa47 	bl	80001f8 <__aeabi_dsub>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4615      	mov	r5, r2
 8001d70:	461e      	mov	r6, r3
 8001d72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d76:	4640      	mov	r0, r8
 8001d78:	4649      	mov	r1, r9
 8001d7a:	f7fe fa3d 	bl	80001f8 <__aeabi_dsub>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	e9c4 5600 	strd	r5, r6, [r4]
 8001d86:	e9c4 2302 	strd	r2, r3, [r4, #8]
        for (int a = 0; a < n; a += 2 * step)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d90:	4413      	add	r3, r2
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
 8001d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f6ff af35 	blt.w	8001c08 <fftRecurse+0x48>
        }
    }
}
 8001d9e:	bf00      	nop
 8001da0:	373c      	adds	r7, #60	; 0x3c
 8001da2:	46bd      	mov	sp, r7
 8001da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001da8:	54442d18 	.word	0x54442d18
 8001dac:	c00921fb 	.word	0xc00921fb

08001db0 <getMagnitude>:

void getMagnitude(cplx vals[], float r[], int n)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
    for (int a = 0; a < n; a++){
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	e022      	b.n	8001e08 <getMagnitude+0x58>
        r[a] = cabs(vals[a]);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4413      	add	r3, r2
 8001dca:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001dce:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001dd2:	ec42 1b16 	vmov	d6, r1, r2
 8001dd6:	ec44 3b17 	vmov	d7, r3, r4
 8001dda:	eeb0 0a46 	vmov.f32	s0, s12
 8001dde:	eef0 0a66 	vmov.f32	s1, s13
 8001de2:	eeb0 1a47 	vmov.f32	s2, s14
 8001de6:	eef0 1a67 	vmov.f32	s3, s15
 8001dea:	f006 ff5e 	bl	8008caa <cabs>
 8001dee:	ec51 0b10 	vmov	r0, r1, d0
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	18d4      	adds	r4, r2, r3
 8001dfa:	f7fe fe77 	bl	8000aec <__aeabi_d2f>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6023      	str	r3, [r4, #0]
    for (int a = 0; a < n; a++){
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dbd8      	blt.n	8001dc2 <getMagnitude+0x12>
    }
}
 8001e10:	bf00      	nop
 8001e12:	371c      	adds	r7, #28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd90      	pop	{r4, r7, pc}

08001e18 <normalize>:

void normalize(float in[], int n)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
	float max = 0.0;
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
	for (int a = 0; a < n; a++){
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	e015      	b.n	8001e5a <normalize+0x42>
		if (in[a] > max)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e46:	d505      	bpl.n	8001e54 <normalize+0x3c>
			max = in[a];
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]
	for (int a = 0; a < n; a++){
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	3301      	adds	r3, #1
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	dbe5      	blt.n	8001e2e <normalize+0x16>
	}

	for (int a = 0; a < n; a++){
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	e012      	b.n	8001e8e <normalize+0x76>
		in[a] = in[a] / max;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	edd3 6a00 	vldr	s13, [r3]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e84:	edc3 7a00 	vstr	s15, [r3]
	for (int a = 0; a < n; a++){
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	dbe8      	blt.n	8001e68 <normalize+0x50>
	}
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0a0      	sub	sp, #128	; 0x80
 8001ea8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001eae:	2230      	movs	r2, #48	; 0x30
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f008 fc63 	bl	800a77e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	2230      	movs	r2, #48	; 0x30
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f008 fc54 	bl	800a77e <memset>

    /** Configure the main internal regulator output voltage 
  */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <SystemClock_Config+0x10c>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a34      	ldr	r2, [pc, #208]	; (8001fb0 <SystemClock_Config+0x10c>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b32      	ldr	r3, [pc, #200]	; (8001fb0 <SystemClock_Config+0x10c>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <SystemClock_Config+0x110>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2e      	ldr	r2, [pc, #184]	; (8001fb4 <SystemClock_Config+0x110>)
 8001efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <SystemClock_Config+0x110>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
    /** Initializes the CPU, AHB and APB busses clocks 
  */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f16:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f20:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8001f22:	2304      	movs	r3, #4
 8001f24:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_OscInitStruct.PLL.PLLN = 180;
 8001f26:	23b4      	movs	r3, #180	; 0xb4
 8001f28:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 f950 	bl	80061dc <HAL_RCC_OscConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <SystemClock_Config+0xa2>
    {
        Error_Handler();
 8001f42:	f000 fb7f 	bl	8002644 <Error_Handler>
    }
    /** Activate the Over-Drive mode 
  */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f46:	f004 f8f9 	bl	800613c <HAL_PWREx_EnableOverDrive>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <SystemClock_Config+0xb0>
    {
        Error_Handler();
 8001f50:	f000 fb78 	bl	8002644 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks 
  */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f54:	230f      	movs	r3, #15
 8001f56:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f64:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001f66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f70:	2105      	movs	r1, #5
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 fba2 	bl	80066bc <HAL_RCC_ClockConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0xde>
    {
        Error_Handler();
 8001f7e:	f000 fb61 	bl	8002644 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f82:	2308      	movs	r3, #8
 8001f84:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001f86:	2332      	movs	r3, #50	; 0x32
 8001f88:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 fdb4 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <SystemClock_Config+0x102>
    {
        Error_Handler();
 8001fa2:	f000 fb4f 	bl	8002644 <Error_Handler>
    }
}
 8001fa6:	bf00      	nop
 8001fa8:	3780      	adds	r7, #128	; 0x80
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40007000 	.word	0x40007000

08001fb8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
    /* USER CODE END CRC_Init 0 */

    /* USER CODE BEGIN CRC_Init 1 */

    /* USER CODE END CRC_Init 1 */
    hcrc.Instance = CRC;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_CRC_Init+0x20>)
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <MX_CRC_Init+0x24>)
 8001fc0:	601a      	str	r2, [r3, #0]
    if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_CRC_Init+0x20>)
 8001fc4:	f002 fb32 	bl	800462c <HAL_CRC_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_CRC_Init+0x1a>
    {
        Error_Handler();
 8001fce:	f000 fb39 	bl	8002644 <Error_Handler>
    }
    /* USER CODE BEGIN CRC_Init 2 */

    /* USER CODE END CRC_Init 2 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000348 	.word	0x20000348
 8001fdc:	40023000 	.word	0x40023000

08001fe0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
    /* USER CODE END DMA2D_Init 0 */

    /* USER CODE BEGIN DMA2D_Init 1 */

    /* USER CODE END DMA2D_Init 1 */
    hdma2d.Instance = DMA2D;
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <MX_DMA2D_Init+0x5c>)
 8001fe6:	4a16      	ldr	r2, [pc, #88]	; (8002040 <MX_DMA2D_Init+0x60>)
 8001fe8:	601a      	str	r2, [r3, #0]
    hdma2d.Init.Mode = DMA2D_M2M;
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <MX_DMA2D_Init+0x5c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
    hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <MX_DMA2D_Init+0x5c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
    hdma2d.Init.OutputOffset = 0;
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <MX_DMA2D_Init+0x5c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	60da      	str	r2, [r3, #12]
    hdma2d.LayerCfg[1].InputOffset = 0;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <MX_DMA2D_Init+0x5c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
    hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <MX_DMA2D_Init+0x5c>)
 8002004:	2200      	movs	r2, #0
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <MX_DMA2D_Init+0x5c>)
 800200a:	2200      	movs	r2, #0
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
    hdma2d.LayerCfg[1].InputAlpha = 0;
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <MX_DMA2D_Init+0x5c>)
 8002010:	2200      	movs	r2, #0
 8002012:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002014:	4809      	ldr	r0, [pc, #36]	; (800203c <MX_DMA2D_Init+0x5c>)
 8002016:	f002 fce1 	bl	80049dc <HAL_DMA2D_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_DMA2D_Init+0x44>
    {
        Error_Handler();
 8002020:	f000 fb10 	bl	8002644 <Error_Handler>
    }
    if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002024:	2101      	movs	r1, #1
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <MX_DMA2D_Init+0x5c>)
 8002028:	f002 ff46 	bl	8004eb8 <HAL_DMA2D_ConfigLayer>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_DMA2D_Init+0x56>
    {
        Error_Handler();
 8002032:	f000 fb07 	bl	8002644 <Error_Handler>
    }
    /* USER CODE BEGIN DMA2D_Init 2 */

    /* USER CODE END DMA2D_Init 2 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000478 	.word	0x20000478
 8002040:	4002b000 	.word	0x4002b000

08002044 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
    /* USER CODE END I2C3_Init 0 */

    /* USER CODE BEGIN I2C3_Init 1 */

    /* USER CODE END I2C3_Init 1 */
    hi2c3.Instance = I2C3;
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <MX_I2C3_Init+0x74>)
 800204a:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <MX_I2C3_Init+0x78>)
 800204c:	601a      	str	r2, [r3, #0]
    hi2c3.Init.ClockSpeed = 100000;
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <MX_I2C3_Init+0x74>)
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <MX_I2C3_Init+0x7c>)
 8002052:	605a      	str	r2, [r3, #4]
    hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <MX_I2C3_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
    hi2c3.Init.OwnAddress1 = 0;
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <MX_I2C3_Init+0x74>)
 800205c:	2200      	movs	r2, #0
 800205e:	60da      	str	r2, [r3, #12]
    hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002060:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <MX_I2C3_Init+0x74>)
 8002062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002066:	611a      	str	r2, [r3, #16]
    hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <MX_I2C3_Init+0x74>)
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]
    hi2c3.Init.OwnAddress2 = 0;
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <MX_I2C3_Init+0x74>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
    hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <MX_I2C3_Init+0x74>)
 8002076:	2200      	movs	r2, #0
 8002078:	61da      	str	r2, [r3, #28]
    hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <MX_I2C3_Init+0x74>)
 800207c:	2200      	movs	r2, #0
 800207e:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <MX_I2C3_Init+0x74>)
 8002082:	f003 fb15 	bl	80056b0 <HAL_I2C_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_I2C3_Init+0x4c>
    {
        Error_Handler();
 800208c:	f000 fada 	bl	8002644 <Error_Handler>
    }
    /** Configure Analogue filter 
  */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002090:	2100      	movs	r1, #0
 8002092:	4809      	ldr	r0, [pc, #36]	; (80020b8 <MX_I2C3_Init+0x74>)
 8002094:	f003 fc44 	bl	8005920 <HAL_I2CEx_ConfigAnalogFilter>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_I2C3_Init+0x5e>
    {
        Error_Handler();
 800209e:	f000 fad1 	bl	8002644 <Error_Handler>
    }
    /** Configure Digital filter 
  */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80020a2:	2100      	movs	r1, #0
 80020a4:	4804      	ldr	r0, [pc, #16]	; (80020b8 <MX_I2C3_Init+0x74>)
 80020a6:	f003 fc77 	bl	8005998 <HAL_I2CEx_ConfigDigitalFilter>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_I2C3_Init+0x70>
    {
        Error_Handler();
 80020b0:	f000 fac8 	bl	8002644 <Error_Handler>
    }
    /* USER CODE BEGIN I2C3_Init 2 */

    /* USER CODE END I2C3_Init 2 */
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	2000029c 	.word	0x2000029c
 80020bc:	40005c00 	.word	0x40005c00
 80020c0:	000186a0 	.word	0x000186a0

080020c4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08e      	sub	sp, #56	; 0x38
 80020c8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN LTDC_Init 0 */

    /* USER CODE END LTDC_Init 0 */

    LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	2234      	movs	r2, #52	; 0x34
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f008 fb54 	bl	800a77e <memset>

    /* USER CODE BEGIN LTDC_Init 1 */

    /* USER CODE END LTDC_Init 1 */
    hltdc.Instance = LTDC;
 80020d6:	4b39      	ldr	r3, [pc, #228]	; (80021bc <MX_LTDC_Init+0xf8>)
 80020d8:	4a39      	ldr	r2, [pc, #228]	; (80021c0 <MX_LTDC_Init+0xfc>)
 80020da:	601a      	str	r2, [r3, #0]
    hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80020dc:	4b37      	ldr	r3, [pc, #220]	; (80021bc <MX_LTDC_Init+0xf8>)
 80020de:	2200      	movs	r2, #0
 80020e0:	605a      	str	r2, [r3, #4]
    hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80020e2:	4b36      	ldr	r3, [pc, #216]	; (80021bc <MX_LTDC_Init+0xf8>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
    hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80020e8:	4b34      	ldr	r3, [pc, #208]	; (80021bc <MX_LTDC_Init+0xf8>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
    hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80020ee:	4b33      	ldr	r3, [pc, #204]	; (80021bc <MX_LTDC_Init+0xf8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
    hltdc.Init.HorizontalSync = 9;
 80020f4:	4b31      	ldr	r3, [pc, #196]	; (80021bc <MX_LTDC_Init+0xf8>)
 80020f6:	2209      	movs	r2, #9
 80020f8:	615a      	str	r2, [r3, #20]
    hltdc.Init.VerticalSync = 1;
 80020fa:	4b30      	ldr	r3, [pc, #192]	; (80021bc <MX_LTDC_Init+0xf8>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	619a      	str	r2, [r3, #24]
    hltdc.Init.AccumulatedHBP = 29;
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <MX_LTDC_Init+0xf8>)
 8002102:	221d      	movs	r2, #29
 8002104:	61da      	str	r2, [r3, #28]
    hltdc.Init.AccumulatedVBP = 3;
 8002106:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <MX_LTDC_Init+0xf8>)
 8002108:	2203      	movs	r2, #3
 800210a:	621a      	str	r2, [r3, #32]
    hltdc.Init.AccumulatedActiveW = 269;
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <MX_LTDC_Init+0xf8>)
 800210e:	f240 120d 	movw	r2, #269	; 0x10d
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
    hltdc.Init.AccumulatedActiveH = 323;
 8002114:	4b29      	ldr	r3, [pc, #164]	; (80021bc <MX_LTDC_Init+0xf8>)
 8002116:	f240 1243 	movw	r2, #323	; 0x143
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
    hltdc.Init.TotalWidth = 279;
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <MX_LTDC_Init+0xf8>)
 800211e:	f240 1217 	movw	r2, #279	; 0x117
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c
    hltdc.Init.TotalHeigh = 327;
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <MX_LTDC_Init+0xf8>)
 8002126:	f240 1247 	movw	r2, #327	; 0x147
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
    hltdc.Init.Backcolor.Blue = 0;
 800212c:	4b23      	ldr	r3, [pc, #140]	; (80021bc <MX_LTDC_Init+0xf8>)
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hltdc.Init.Backcolor.Green = 0;
 8002134:	4b21      	ldr	r3, [pc, #132]	; (80021bc <MX_LTDC_Init+0xf8>)
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hltdc.Init.Backcolor.Red = 0;
 800213c:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <MX_LTDC_Init+0xf8>)
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002144:	481d      	ldr	r0, [pc, #116]	; (80021bc <MX_LTDC_Init+0xf8>)
 8002146:	f003 fc67 	bl	8005a18 <HAL_LTDC_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_LTDC_Init+0x90>
    {
        Error_Handler();
 8002150:	f000 fa78 	bl	8002644 <Error_Handler>
    }
    pLayerCfg.WindowX0 = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	607b      	str	r3, [r7, #4]
    pLayerCfg.WindowX1 = 240;
 8002158:	23f0      	movs	r3, #240	; 0xf0
 800215a:	60bb      	str	r3, [r7, #8]
    pLayerCfg.WindowY0 = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
    pLayerCfg.WindowY1 = 320;
 8002160:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002164:	613b      	str	r3, [r7, #16]
    pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002166:	2302      	movs	r3, #2
 8002168:	617b      	str	r3, [r7, #20]
    pLayerCfg.Alpha = 255;
 800216a:	23ff      	movs	r3, #255	; 0xff
 800216c:	61bb      	str	r3, [r7, #24]
    pLayerCfg.Alpha0 = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
    pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002172:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002176:	623b      	str	r3, [r7, #32]
    pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002178:	2307      	movs	r3, #7
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
    pLayerCfg.FBStartAdress = 0xD0000000;
 800217c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
    pLayerCfg.ImageWidth = 240;
 8002182:	23f0      	movs	r3, #240	; 0xf0
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
    pLayerCfg.ImageHeight = 320;
 8002186:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
    pLayerCfg.Backcolor.Blue = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    pLayerCfg.Backcolor.Green = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    pLayerCfg.Backcolor.Red = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2200      	movs	r2, #0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_LTDC_Init+0xf8>)
 80021a6:	f003 fdc9 	bl	8005d3c <HAL_LTDC_ConfigLayer>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_LTDC_Init+0xf0>
    {
        Error_Handler();
 80021b0:	f000 fa48 	bl	8002644 <Error_Handler>
    }
    /* USER CODE BEGIN LTDC_Init 2 */

    /* USER CODE END LTDC_Init 2 */
}
 80021b4:	bf00      	nop
 80021b6:	3738      	adds	r7, #56	; 0x38
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000350 	.word	0x20000350
 80021c0:	40016800 	.word	0x40016800

080021c4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI5_Init 1 */

    /* USER CODE END SPI5_Init 1 */
    /* SPI5 parameter configuration*/
    hspi5.Instance = SPI5;
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <MX_SPI5_Init+0x64>)
 80021ca:	4a18      	ldr	r2, [pc, #96]	; (800222c <MX_SPI5_Init+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
    hspi5.Init.Mode = SPI_MODE_MASTER;
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <MX_SPI5_Init+0x64>)
 80021d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021d4:	605a      	str	r2, [r3, #4]
    hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <MX_SPI5_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
    hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <MX_SPI5_Init+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
    hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <MX_SPI5_Init+0x64>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
    hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <MX_SPI5_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
    hspi5.Init.NSS = SPI_NSS_SOFT;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <MX_SPI5_Init+0x64>)
 80021f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f4:	619a      	str	r2, [r3, #24]
    hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_SPI5_Init+0x64>)
 80021f8:	2218      	movs	r2, #24
 80021fa:	61da      	str	r2, [r3, #28]
    hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <MX_SPI5_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	621a      	str	r2, [r3, #32]
    hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_SPI5_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
    hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <MX_SPI5_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi5.Init.CRCPolynomial = 10;
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_SPI5_Init+0x64>)
 8002210:	220a      	movs	r2, #10
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002214:	4804      	ldr	r0, [pc, #16]	; (8002228 <MX_SPI5_Init+0x64>)
 8002216:	f004 feb2 	bl	8006f7e <HAL_SPI_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_SPI5_Init+0x60>
    {
        Error_Handler();
 8002220:	f000 fa10 	bl	8002644 <Error_Handler>
    }
    /* USER CODE BEGIN SPI5_Init 2 */

    /* USER CODE END SPI5_Init 2 */
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200002f0 	.word	0x200002f0
 800222c:	40015000 	.word	0x40015000

08002230 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002236:	f107 0308 	add.w	r3, r7, #8
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002244:	463b      	mov	r3, r7
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <MX_TIM1_Init+0x98>)
 800224e:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <MX_TIM1_Init+0x9c>)
 8002250:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <MX_TIM1_Init+0x98>)
 8002254:	2200      	movs	r2, #0
 8002256:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <MX_TIM1_Init+0x98>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 0;
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <MX_TIM1_Init+0x98>)
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <MX_TIM1_Init+0x98>)
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <MX_TIM1_Init+0x98>)
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <MX_TIM1_Init+0x98>)
 8002272:	2200      	movs	r2, #0
 8002274:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002276:	4814      	ldr	r0, [pc, #80]	; (80022c8 <MX_TIM1_Init+0x98>)
 8002278:	f005 fc0c 	bl	8007a94 <HAL_TIM_Base_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM1_Init+0x56>
    {
        Error_Handler();
 8002282:	f000 f9df 	bl	8002644 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800228a:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	4619      	mov	r1, r3
 8002292:	480d      	ldr	r0, [pc, #52]	; (80022c8 <MX_TIM1_Init+0x98>)
 8002294:	f005 fd55 	bl	8007d42 <HAL_TIM_ConfigClockSource>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM1_Init+0x72>
    {
        Error_Handler();
 800229e:	f000 f9d1 	bl	8002644 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022aa:	463b      	mov	r3, r7
 80022ac:	4619      	mov	r1, r3
 80022ae:	4806      	ldr	r0, [pc, #24]	; (80022c8 <MX_TIM1_Init+0x98>)
 80022b0:	f005 ff60 	bl	8008174 <HAL_TIMEx_MasterConfigSynchronization>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM1_Init+0x8e>
    {
        Error_Handler();
 80022ba:	f000 f9c3 	bl	8002644 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000438 	.word	0x20000438
 80022cc:	40010000 	.word	0x40010000

080022d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_USART1_UART_Init+0x4c>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <MX_USART1_UART_Init+0x50>)
 80022d8:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <MX_USART1_UART_Init+0x4c>)
 80022dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022e0:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <MX_USART1_UART_Init+0x4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <MX_USART1_UART_Init+0x4c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <MX_USART1_UART_Init+0x4c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <MX_USART1_UART_Init+0x4c>)
 80022f6:	220c      	movs	r2, #12
 80022f8:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <MX_USART1_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <MX_USART1_UART_Init+0x4c>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_USART1_UART_Init+0x4c>)
 8002308:	f005 ffc4 	bl	8008294 <HAL_UART_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8002312:	f000 f997 	bl	8002644 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200003f8 	.word	0x200003f8
 8002320:	40011000 	.word	0x40011000

08002324 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN FMC_Init 0 */

    /* USER CODE END FMC_Init 0 */

    FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
 8002338:	615a      	str	r2, [r3, #20]
 800233a:	619a      	str	r2, [r3, #24]

    /* USER CODE END FMC_Init 1 */

    /** Perform the SDRAM1 memory initialization sequence
  */
    hsdram1.Instance = FMC_SDRAM_DEVICE;
 800233c:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <MX_FMC_Init+0x98>)
 800233e:	4a20      	ldr	r2, [pc, #128]	; (80023c0 <MX_FMC_Init+0x9c>)
 8002340:	601a      	str	r2, [r3, #0]
    /* hsdram1.Init */
    hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8002342:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <MX_FMC_Init+0x98>)
 8002344:	2201      	movs	r2, #1
 8002346:	605a      	str	r2, [r3, #4]
    hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <MX_FMC_Init+0x98>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
    hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <MX_FMC_Init+0x98>)
 8002350:	2204      	movs	r2, #4
 8002352:	60da      	str	r2, [r3, #12]
    hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <MX_FMC_Init+0x98>)
 8002356:	2210      	movs	r2, #16
 8002358:	611a      	str	r2, [r3, #16]
    hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <MX_FMC_Init+0x98>)
 800235c:	2240      	movs	r2, #64	; 0x40
 800235e:	615a      	str	r2, [r3, #20]
    hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <MX_FMC_Init+0x98>)
 8002362:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002366:	619a      	str	r2, [r3, #24]
    hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <MX_FMC_Init+0x98>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
    hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <MX_FMC_Init+0x98>)
 8002370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002374:	621a      	str	r2, [r3, #32]
    hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <MX_FMC_Init+0x98>)
 8002378:	2200      	movs	r2, #0
 800237a:	625a      	str	r2, [r3, #36]	; 0x24
    hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <MX_FMC_Init+0x98>)
 800237e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
    /* SdramTiming */
    SdramTiming.LoadToActiveDelay = 2;
 8002384:	2302      	movs	r3, #2
 8002386:	607b      	str	r3, [r7, #4]
    SdramTiming.ExitSelfRefreshDelay = 7;
 8002388:	2307      	movs	r3, #7
 800238a:	60bb      	str	r3, [r7, #8]
    SdramTiming.SelfRefreshTime = 4;
 800238c:	2304      	movs	r3, #4
 800238e:	60fb      	str	r3, [r7, #12]
    SdramTiming.RowCycleDelay = 7;
 8002390:	2307      	movs	r3, #7
 8002392:	613b      	str	r3, [r7, #16]
    SdramTiming.WriteRecoveryTime = 3;
 8002394:	2303      	movs	r3, #3
 8002396:	617b      	str	r3, [r7, #20]
    SdramTiming.RPDelay = 2;
 8002398:	2302      	movs	r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
    SdramTiming.RCDDelay = 2;
 800239c:	2302      	movs	r3, #2
 800239e:	61fb      	str	r3, [r7, #28]

    if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	4619      	mov	r1, r3
 80023a4:	4805      	ldr	r0, [pc, #20]	; (80023bc <MX_FMC_Init+0x98>)
 80023a6:	f004 fd6b 	bl	8006e80 <HAL_SDRAM_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_FMC_Init+0x90>
    {
        Error_Handler();
 80023b0:	f000 f948 	bl	8002644 <Error_Handler>
    }

    /* USER CODE BEGIN FMC_Init 2 */

    /* USER CODE END FMC_Init 2 */
}
 80023b4:	bf00      	nop
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	200004b8 	.word	0x200004b8
 80023c0:	a0000140 	.word	0xa0000140

080023c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08e      	sub	sp, #56	; 0x38
 80023c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	4b89      	ldr	r3, [pc, #548]	; (8002604 <MX_GPIO_Init+0x240>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a88      	ldr	r2, [pc, #544]	; (8002604 <MX_GPIO_Init+0x240>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b86      	ldr	r3, [pc, #536]	; (8002604 <MX_GPIO_Init+0x240>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	623b      	str	r3, [r7, #32]
 80023f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	4b82      	ldr	r3, [pc, #520]	; (8002604 <MX_GPIO_Init+0x240>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a81      	ldr	r2, [pc, #516]	; (8002604 <MX_GPIO_Init+0x240>)
 8002400:	f043 0320 	orr.w	r3, r3, #32
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b7f      	ldr	r3, [pc, #508]	; (8002604 <MX_GPIO_Init+0x240>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	4b7b      	ldr	r3, [pc, #492]	; (8002604 <MX_GPIO_Init+0x240>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a7a      	ldr	r2, [pc, #488]	; (8002604 <MX_GPIO_Init+0x240>)
 800241c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b78      	ldr	r3, [pc, #480]	; (8002604 <MX_GPIO_Init+0x240>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	4b74      	ldr	r3, [pc, #464]	; (8002604 <MX_GPIO_Init+0x240>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a73      	ldr	r2, [pc, #460]	; (8002604 <MX_GPIO_Init+0x240>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b71      	ldr	r3, [pc, #452]	; (8002604 <MX_GPIO_Init+0x240>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b6d      	ldr	r3, [pc, #436]	; (8002604 <MX_GPIO_Init+0x240>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a6c      	ldr	r2, [pc, #432]	; (8002604 <MX_GPIO_Init+0x240>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b6a      	ldr	r3, [pc, #424]	; (8002604 <MX_GPIO_Init+0x240>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b66      	ldr	r3, [pc, #408]	; (8002604 <MX_GPIO_Init+0x240>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a65      	ldr	r2, [pc, #404]	; (8002604 <MX_GPIO_Init+0x240>)
 8002470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b63      	ldr	r3, [pc, #396]	; (8002604 <MX_GPIO_Init+0x240>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	4b5f      	ldr	r3, [pc, #380]	; (8002604 <MX_GPIO_Init+0x240>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a5e      	ldr	r2, [pc, #376]	; (8002604 <MX_GPIO_Init+0x240>)
 800248c:	f043 0310 	orr.w	r3, r3, #16
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b5c      	ldr	r3, [pc, #368]	; (8002604 <MX_GPIO_Init+0x240>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	4b58      	ldr	r3, [pc, #352]	; (8002604 <MX_GPIO_Init+0x240>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a57      	ldr	r2, [pc, #348]	; (8002604 <MX_GPIO_Init+0x240>)
 80024a8:	f043 0308 	orr.w	r3, r3, #8
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b55      	ldr	r3, [pc, #340]	; (8002604 <MX_GPIO_Init+0x240>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2116      	movs	r1, #22
 80024be:	4852      	ldr	r0, [pc, #328]	; (8002608 <MX_GPIO_Init+0x244>)
 80024c0:	f003 f8dc 	bl	800567c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2180      	movs	r1, #128	; 0x80
 80024c8:	4850      	ldr	r0, [pc, #320]	; (800260c <MX_GPIO_Init+0x248>)
 80024ca:	f003 f8d7 	bl	800567c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, RDX_Pin | WRX_DCX_Pin, GPIO_PIN_RESET);
 80024ce:	2200      	movs	r2, #0
 80024d0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80024d4:	484e      	ldr	r0, [pc, #312]	; (8002610 <MX_GPIO_Init+0x24c>)
 80024d6:	f003 f8d1 	bl	800567c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOG, LD3_Pin | LD4_Pin, GPIO_PIN_RESET);
 80024da:	2200      	movs	r2, #0
 80024dc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80024e0:	484c      	ldr	r0, [pc, #304]	; (8002614 <MX_GPIO_Init+0x250>)
 80024e2:	f003 f8cb 	bl	800567c <HAL_GPIO_WritePin>

    /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
    GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 80024e6:	2316      	movs	r3, #22
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fa:	4619      	mov	r1, r3
 80024fc:	4842      	ldr	r0, [pc, #264]	; (8002608 <MX_GPIO_Init+0x244>)
 80024fe:	f002 fe09 	bl	8005114 <HAL_GPIO_Init>

    /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
    GPIO_InitStruct.Pin = B1_Pin | MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 8002502:	f248 0307 	movw	r3, #32775	; 0x8007
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002508:	4b43      	ldr	r3, [pc, #268]	; (8002618 <MX_GPIO_Init+0x254>)
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002514:	4619      	mov	r1, r3
 8002516:	483d      	ldr	r0, [pc, #244]	; (800260c <MX_GPIO_Init+0x248>)
 8002518:	f002 fdfc 	bl	8005114 <HAL_GPIO_Init>

    /*Configure GPIO pin : ACP_RST_Pin */
    GPIO_InitStruct.Pin = ACP_RST_Pin;
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002520:	2301      	movs	r3, #1
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2300      	movs	r3, #0
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800252c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002530:	4619      	mov	r1, r3
 8002532:	4836      	ldr	r0, [pc, #216]	; (800260c <MX_GPIO_Init+0x248>)
 8002534:	f002 fdee 	bl	8005114 <HAL_GPIO_Init>

    /*Configure GPIO pin : OTG_FS_OC_Pin */
    GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002538:	2320      	movs	r3, #32
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800253c:	4b36      	ldr	r3, [pc, #216]	; (8002618 <MX_GPIO_Init+0x254>)
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002548:	4619      	mov	r1, r3
 800254a:	482f      	ldr	r0, [pc, #188]	; (8002608 <MX_GPIO_Init+0x244>)
 800254c:	f002 fde2 	bl	8005114 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOOT1_Pin */
    GPIO_InitStruct.Pin = BOOT1_Pin;
 8002550:	2304      	movs	r3, #4
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002554:	2300      	movs	r3, #0
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800255c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002560:	4619      	mov	r1, r3
 8002562:	482e      	ldr	r0, [pc, #184]	; (800261c <MX_GPIO_Init+0x258>)
 8002564:	f002 fdd6 	bl	8005114 <HAL_GPIO_Init>

    /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin | OTG_HS_DM_Pin | OTG_HS_DP_Pin;
 8002568:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002576:	2300      	movs	r3, #0
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800257a:	230c      	movs	r3, #12
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002582:	4619      	mov	r1, r3
 8002584:	4825      	ldr	r0, [pc, #148]	; (800261c <MX_GPIO_Init+0x258>)
 8002586:	f002 fdc5 	bl	8005114 <HAL_GPIO_Init>

    /*Configure GPIO pin : VBUS_HS_Pin */
    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800258a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002590:	2300      	movs	r3, #0
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259c:	4619      	mov	r1, r3
 800259e:	481f      	ldr	r0, [pc, #124]	; (800261c <MX_GPIO_Init+0x258>)
 80025a0:	f002 fdb8 	bl	8005114 <HAL_GPIO_Init>

    /*Configure GPIO pin : TE_Pin */
    GPIO_InitStruct.Pin = TE_Pin;
 80025a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80025b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b6:	4619      	mov	r1, r3
 80025b8:	4815      	ldr	r0, [pc, #84]	; (8002610 <MX_GPIO_Init+0x24c>)
 80025ba:	f002 fdab 	bl	8005114 <HAL_GPIO_Init>

    /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
    GPIO_InitStruct.Pin = RDX_Pin | WRX_DCX_Pin;
 80025be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d4:	4619      	mov	r1, r3
 80025d6:	480e      	ldr	r0, [pc, #56]	; (8002610 <MX_GPIO_Init+0x24c>)
 80025d8:	f002 fd9c 	bl	8005114 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD3_Pin LD4_Pin */
    GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin;
 80025dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e2:	2301      	movs	r3, #1
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f2:	4619      	mov	r1, r3
 80025f4:	4807      	ldr	r0, [pc, #28]	; (8002614 <MX_GPIO_Init+0x250>)
 80025f6:	f002 fd8d 	bl	8005114 <HAL_GPIO_Init>
}
 80025fa:	bf00      	nop
 80025fc:	3738      	adds	r7, #56	; 0x38
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	40020800 	.word	0x40020800
 800260c:	40020000 	.word	0x40020000
 8002610:	40020c00 	.word	0x40020c00
 8002614:	40021800 	.word	0x40021800
 8002618:	10120000 	.word	0x10120000
 800261c:	40020400 	.word	0x40020400

08002620 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM6)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 8002632:	f001 fed7 	bl	80043e4 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40001000 	.word	0x40001000

08002644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_MspInit+0x4c>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4a0f      	ldr	r2, [pc, #60]	; (80026a0 <HAL_MspInit+0x4c>)
 8002664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <HAL_MspInit+0x4c>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002672:	607b      	str	r3, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_MspInit+0x4c>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <HAL_MspInit+0x4c>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_MspInit+0x4c>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800

080026a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <HAL_CRC_MspInit+0x3c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10d      	bne.n	80026d2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_CRC_MspInit+0x40>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a09      	ldr	r2, [pc, #36]	; (80026e4 <HAL_CRC_MspInit+0x40>)
 80026c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <HAL_CRC_MspInit+0x40>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023000 	.word	0x40023000
 80026e4:	40023800 	.word	0x40023800

080026e8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <HAL_DMA2D_MspInit+0x48>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d115      	bne.n	8002726 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_DMA2D_MspInit+0x4c>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <HAL_DMA2D_MspInit+0x4c>)
 8002704:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <HAL_DMA2D_MspInit+0x4c>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2105      	movs	r1, #5
 800271a:	205a      	movs	r0, #90	; 0x5a
 800271c:	f001 ff5c 	bl	80045d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002720:	205a      	movs	r0, #90	; 0x5a
 8002722:	f001 ff75 	bl	8004610 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	4002b000 	.word	0x4002b000
 8002734:	40023800 	.word	0x40023800

08002738 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a29      	ldr	r2, [pc, #164]	; (80027fc <HAL_I2C_MspInit+0xc4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d14b      	bne.n	80027f2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b28      	ldr	r3, [pc, #160]	; (8002800 <HAL_I2C_MspInit+0xc8>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a27      	ldr	r2, [pc, #156]	; (8002800 <HAL_I2C_MspInit+0xc8>)
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b25      	ldr	r3, [pc, #148]	; (8002800 <HAL_I2C_MspInit+0xc8>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b21      	ldr	r3, [pc, #132]	; (8002800 <HAL_I2C_MspInit+0xc8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a20      	ldr	r2, [pc, #128]	; (8002800 <HAL_I2C_MspInit+0xc8>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <HAL_I2C_MspInit+0xc8>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002792:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002798:	2312      	movs	r3, #18
 800279a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800279c:	2301      	movs	r3, #1
 800279e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027a4:	2304      	movs	r3, #4
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	4619      	mov	r1, r3
 80027ae:	4815      	ldr	r0, [pc, #84]	; (8002804 <HAL_I2C_MspInit+0xcc>)
 80027b0:	f002 fcb0 	bl	8005114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80027b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ba:	2312      	movs	r3, #18
 80027bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027be:	2301      	movs	r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027c6:	2304      	movs	r3, #4
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4619      	mov	r1, r3
 80027d0:	480d      	ldr	r0, [pc, #52]	; (8002808 <HAL_I2C_MspInit+0xd0>)
 80027d2:	f002 fc9f 	bl	8005114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_I2C_MspInit+0xc8>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_I2C_MspInit+0xc8>)
 80027e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_I2C_MspInit+0xc8>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80027f2:	bf00      	nop
 80027f4:	3728      	adds	r7, #40	; 0x28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40005c00 	.word	0x40005c00
 8002800:	40023800 	.word	0x40023800
 8002804:	40020800 	.word	0x40020800
 8002808:	40020000 	.word	0x40020000

0800280c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08e      	sub	sp, #56	; 0x38
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a7b      	ldr	r2, [pc, #492]	; (8002a18 <HAL_LTDC_MspInit+0x20c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	f040 80f0 	bne.w	8002a10 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	4b79      	ldr	r3, [pc, #484]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	4a78      	ldr	r2, [pc, #480]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 800283a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800283e:	6453      	str	r3, [r2, #68]	; 0x44
 8002840:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002848:	623b      	str	r3, [r7, #32]
 800284a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800284c:	2300      	movs	r3, #0
 800284e:	61fb      	str	r3, [r7, #28]
 8002850:	4b72      	ldr	r3, [pc, #456]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	4a71      	ldr	r2, [pc, #452]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 8002856:	f043 0320 	orr.w	r3, r3, #32
 800285a:	6313      	str	r3, [r2, #48]	; 0x30
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002868:	2300      	movs	r3, #0
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	4a6a      	ldr	r2, [pc, #424]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6313      	str	r3, [r2, #48]	; 0x30
 8002878:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	4b64      	ldr	r3, [pc, #400]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	4a63      	ldr	r2, [pc, #396]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 800288e:	f043 0302 	orr.w	r3, r3, #2
 8002892:	6313      	str	r3, [r2, #48]	; 0x30
 8002894:	4b61      	ldr	r3, [pc, #388]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	4a5c      	ldr	r2, [pc, #368]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 80028aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ae:	6313      	str	r3, [r2, #48]	; 0x30
 80028b0:	4b5a      	ldr	r3, [pc, #360]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	4b56      	ldr	r3, [pc, #344]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	4a55      	ldr	r2, [pc, #340]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	6313      	str	r3, [r2, #48]	; 0x30
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d8:	2300      	movs	r3, #0
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	4b4f      	ldr	r3, [pc, #316]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	4a4e      	ldr	r2, [pc, #312]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	6313      	str	r3, [r2, #48]	; 0x30
 80028e8:	4b4c      	ldr	r3, [pc, #304]	; (8002a1c <HAL_LTDC_MspInit+0x210>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80028f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002906:	230e      	movs	r3, #14
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800290a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290e:	4619      	mov	r1, r3
 8002910:	4843      	ldr	r0, [pc, #268]	; (8002a20 <HAL_LTDC_MspInit+0x214>)
 8002912:	f002 fbff 	bl	8005114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8002916:	f641 0358 	movw	r3, #6232	; 0x1858
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002928:	230e      	movs	r3, #14
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002930:	4619      	mov	r1, r3
 8002932:	483c      	ldr	r0, [pc, #240]	; (8002a24 <HAL_LTDC_MspInit+0x218>)
 8002934:	f002 fbee 	bl	8005114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002938:	2303      	movs	r3, #3
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002948:	2309      	movs	r3, #9
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	4619      	mov	r1, r3
 8002952:	4835      	ldr	r0, [pc, #212]	; (8002a28 <HAL_LTDC_MspInit+0x21c>)
 8002954:	f002 fbde 	bl	8005114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002958:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800296a:	230e      	movs	r3, #14
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002972:	4619      	mov	r1, r3
 8002974:	482c      	ldr	r0, [pc, #176]	; (8002a28 <HAL_LTDC_MspInit+0x21c>)
 8002976:	f002 fbcd 	bl	8005114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800297a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002988:	2300      	movs	r3, #0
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800298c:	230e      	movs	r3, #14
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002994:	4619      	mov	r1, r3
 8002996:	4825      	ldr	r0, [pc, #148]	; (8002a2c <HAL_LTDC_MspInit+0x220>)
 8002998:	f002 fbbc 	bl	8005114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800299c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80029ae:	230e      	movs	r3, #14
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b6:	4619      	mov	r1, r3
 80029b8:	481d      	ldr	r0, [pc, #116]	; (8002a30 <HAL_LTDC_MspInit+0x224>)
 80029ba:	f002 fbab 	bl	8005114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80029be:	2348      	movs	r3, #72	; 0x48
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80029ce:	230e      	movs	r3, #14
 80029d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d6:	4619      	mov	r1, r3
 80029d8:	4816      	ldr	r0, [pc, #88]	; (8002a34 <HAL_LTDC_MspInit+0x228>)
 80029da:	f002 fb9b 	bl	8005114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80029de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80029f0:	2309      	movs	r3, #9
 80029f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f8:	4619      	mov	r1, r3
 80029fa:	480c      	ldr	r0, [pc, #48]	; (8002a2c <HAL_LTDC_MspInit+0x220>)
 80029fc:	f002 fb8a 	bl	8005114 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2105      	movs	r1, #5
 8002a04:	2058      	movs	r0, #88	; 0x58
 8002a06:	f001 fde7 	bl	80045d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002a0a:	2058      	movs	r0, #88	; 0x58
 8002a0c:	f001 fe00 	bl	8004610 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002a10:	bf00      	nop
 8002a12:	3738      	adds	r7, #56	; 0x38
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40016800 	.word	0x40016800
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40021400 	.word	0x40021400
 8002a24:	40020000 	.word	0x40020000
 8002a28:	40020400 	.word	0x40020400
 8002a2c:	40021800 	.word	0x40021800
 8002a30:	40020800 	.word	0x40020800
 8002a34:	40020c00 	.word	0x40020c00

08002a38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a19      	ldr	r2, [pc, #100]	; (8002abc <HAL_SPI_MspInit+0x84>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d12c      	bne.n	8002ab4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_SPI_MspInit+0x88>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <HAL_SPI_MspInit+0x88>)
 8002a64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a68:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_SPI_MspInit+0x88>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_SPI_MspInit+0x88>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a10      	ldr	r2, [pc, #64]	; (8002ac0 <HAL_SPI_MspInit+0x88>)
 8002a80:	f043 0320 	orr.w	r3, r3, #32
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <HAL_SPI_MspInit+0x88>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002a92:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002aa4:	2305      	movs	r3, #5
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <HAL_SPI_MspInit+0x8c>)
 8002ab0:	f002 fb30 	bl	8005114 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002ab4:	bf00      	nop
 8002ab6:	3728      	adds	r7, #40	; 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40015000 	.word	0x40015000
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40021400 	.word	0x40021400

08002ac8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a08      	ldr	r2, [pc, #32]	; (8002af8 <HAL_SPI_MspDeInit+0x30>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d10a      	bne.n	8002af0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <HAL_SPI_MspDeInit+0x34>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	4a07      	ldr	r2, [pc, #28]	; (8002afc <HAL_SPI_MspDeInit+0x34>)
 8002ae0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ae4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002ae6:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002aea:	4805      	ldr	r0, [pc, #20]	; (8002b00 <HAL_SPI_MspDeInit+0x38>)
 8002aec:	f002 fcbc 	bl	8005468 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40015000 	.word	0x40015000
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40021400 	.word	0x40021400

08002b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <HAL_TIM_Base_MspInit+0x3c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d10d      	bne.n	8002b32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <HAL_TIM_Base_MspInit+0x40>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <HAL_TIM_Base_MspInit+0x40>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <HAL_TIM_Base_MspInit+0x40>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40023800 	.word	0x40023800

08002b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a19      	ldr	r2, [pc, #100]	; (8002bcc <HAL_UART_MspInit+0x84>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d12c      	bne.n	8002bc4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <HAL_UART_MspInit+0x88>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <HAL_UART_MspInit+0x88>)
 8002b74:	f043 0310 	orr.w	r3, r3, #16
 8002b78:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_UART_MspInit+0x88>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_UART_MspInit+0x88>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4a10      	ldr	r2, [pc, #64]	; (8002bd0 <HAL_UART_MspInit+0x88>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <HAL_UART_MspInit+0x88>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002ba2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bb4:	2307      	movs	r3, #7
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4805      	ldr	r0, [pc, #20]	; (8002bd4 <HAL_UART_MspInit+0x8c>)
 8002bc0:	f002 faa8 	bl	8005114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bc4:	bf00      	nop
 8002bc6:	3728      	adds	r7, #40	; 0x28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40011000 	.word	0x40011000
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40020000 	.word	0x40020000

08002bd8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002bec:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <HAL_FMC_MspInit+0x104>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d16f      	bne.n	8002cd4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002bf4:	4b39      	ldr	r3, [pc, #228]	; (8002cdc <HAL_FMC_MspInit+0x104>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	4b38      	ldr	r3, [pc, #224]	; (8002ce0 <HAL_FMC_MspInit+0x108>)
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	4a37      	ldr	r2, [pc, #220]	; (8002ce0 <HAL_FMC_MspInit+0x108>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6393      	str	r3, [r2, #56]	; 0x38
 8002c0a:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <HAL_FMC_MspInit+0x108>)
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8002c16:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002c1a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c24:	2303      	movs	r3, #3
 8002c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c28:	230c      	movs	r3, #12
 8002c2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	4619      	mov	r1, r3
 8002c30:	482c      	ldr	r0, [pc, #176]	; (8002ce4 <HAL_FMC_MspInit+0x10c>)
 8002c32:	f002 fa6f 	bl	8005114 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002c36:	2301      	movs	r3, #1
 8002c38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c42:	2303      	movs	r3, #3
 8002c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c46:	230c      	movs	r3, #12
 8002c48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4826      	ldr	r0, [pc, #152]	; (8002ce8 <HAL_FMC_MspInit+0x110>)
 8002c50:	f002 fa60 	bl	8005114 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8002c54:	f248 1333 	movw	r3, #33075	; 0x8133
 8002c58:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c62:	2303      	movs	r3, #3
 8002c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c66:	230c      	movs	r3, #12
 8002c68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	481f      	ldr	r0, [pc, #124]	; (8002cec <HAL_FMC_MspInit+0x114>)
 8002c70:	f002 fa50 	bl	8005114 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8002c74:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002c78:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c82:	2303      	movs	r3, #3
 8002c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c86:	230c      	movs	r3, #12
 8002c88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4818      	ldr	r0, [pc, #96]	; (8002cf0 <HAL_FMC_MspInit+0x118>)
 8002c90:	f002 fa40 	bl	8005114 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8002c94:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002c98:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ca6:	230c      	movs	r3, #12
 8002ca8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	4811      	ldr	r0, [pc, #68]	; (8002cf4 <HAL_FMC_MspInit+0x11c>)
 8002cb0:	f002 fa30 	bl	8005114 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002cb4:	2360      	movs	r3, #96	; 0x60
 8002cb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	480a      	ldr	r0, [pc, #40]	; (8002cf8 <HAL_FMC_MspInit+0x120>)
 8002cce:	f002 fa21 	bl	8005114 <HAL_GPIO_Init>
 8002cd2:	e000      	b.n	8002cd6 <HAL_FMC_MspInit+0xfe>
    return;
 8002cd4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	200000e4 	.word	0x200000e4
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40021400 	.word	0x40021400
 8002ce8:	40020800 	.word	0x40020800
 8002cec:	40021800 	.word	0x40021800
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40020c00 	.word	0x40020c00
 8002cf8:	40020400 	.word	0x40020400

08002cfc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002d04:	f7ff ff68 	bl	8002bd8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002d20:	2200      	movs	r2, #0
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	2036      	movs	r0, #54	; 0x36
 8002d26:	f001 fc57 	bl	80045d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002d2a:	2036      	movs	r0, #54	; 0x36
 8002d2c:	f001 fc70 	bl	8004610 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <HAL_InitTick+0xa4>)
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	4a1e      	ldr	r2, [pc, #120]	; (8002db4 <HAL_InitTick+0xa4>)
 8002d3a:	f043 0310 	orr.w	r3, r3, #16
 8002d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d40:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <HAL_InitTick+0xa4>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d4c:	f107 0210 	add.w	r2, r7, #16
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 fea2 	bl	8006aa0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002d5c:	f003 fe78 	bl	8006a50 <HAL_RCC_GetPCLK1Freq>
 8002d60:	4603      	mov	r3, r0
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	4a13      	ldr	r2, [pc, #76]	; (8002db8 <HAL_InitTick+0xa8>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	0c9b      	lsrs	r3, r3, #18
 8002d70:	3b01      	subs	r3, #1
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <HAL_InitTick+0xac>)
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <HAL_InitTick+0xb0>)
 8002d78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_InitTick+0xac>)
 8002d7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d80:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d82:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <HAL_InitTick+0xac>)
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_InitTick+0xac>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_InitTick+0xac>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d94:	4809      	ldr	r0, [pc, #36]	; (8002dbc <HAL_InitTick+0xac>)
 8002d96:	f004 fe7d 	bl	8007a94 <HAL_TIM_Base_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d104      	bne.n	8002daa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002da0:	4806      	ldr	r0, [pc, #24]	; (8002dbc <HAL_InitTick+0xac>)
 8002da2:	f004 fea2 	bl	8007aea <HAL_TIM_Base_Start_IT>
 8002da6:	4603      	mov	r3, r0
 8002da8:	e000      	b.n	8002dac <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3730      	adds	r7, #48	; 0x30
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800
 8002db8:	431bde83 	.word	0x431bde83
 8002dbc:	200004ec 	.word	0x200004ec
 8002dc0:	40001000 	.word	0x40001000

08002dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd6:	e7fe      	b.n	8002dd6 <HardFault_Handler+0x4>

08002dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ddc:	e7fe      	b.n	8002ddc <MemManage_Handler+0x4>

08002dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de2:	e7fe      	b.n	8002de2 <BusFault_Handler+0x4>

08002de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de8:	e7fe      	b.n	8002de8 <UsageFault_Handler+0x4>

08002dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <TIM6_DAC_IRQHandler+0x10>)
 8002e1a:	f004 fe8a 	bl	8007b32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200004ec 	.word	0x200004ec

08002e28 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <LTDC_IRQHandler+0x10>)
 8002e2e:	f002 fec3 	bl	8005bb8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000350 	.word	0x20000350

08002e3c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <DMA2D_IRQHandler+0x10>)
 8002e42:	f001 ff28 	bl	8004c96 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000478 	.word	0x20000478

08002e50 <_sbrk>:
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <_sbrk+0x50>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <_sbrk+0x16>
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <_sbrk+0x50>)
 8002e62:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <_sbrk+0x54>)
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <_sbrk+0x50>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <_sbrk+0x50>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	466a      	mov	r2, sp
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d907      	bls.n	8002e8a <_sbrk+0x3a>
 8002e7a:	f007 fc4b 	bl	800a714 <__errno>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	230c      	movs	r3, #12
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295
 8002e88:	e006      	b.n	8002e98 <_sbrk+0x48>
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <_sbrk+0x50>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	4a03      	ldr	r2, [pc, #12]	; (8002ea0 <_sbrk+0x50>)
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	200000e8 	.word	0x200000e8
 8002ea4:	200005e0 	.word	0x200005e0

08002ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <SystemInit+0x28>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <SystemInit+0x28>)
 8002eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <SystemInit+0x28>)
 8002ebe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ec2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <Reset_Handler>:
 8002ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f0c <LoopFillZerobss+0x14>
 8002ed8:	2100      	movs	r1, #0
 8002eda:	e003      	b.n	8002ee4 <LoopCopyDataInit>

08002edc <CopyDataInit>:
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <LoopFillZerobss+0x18>)
 8002ede:	585b      	ldr	r3, [r3, r1]
 8002ee0:	5043      	str	r3, [r0, r1]
 8002ee2:	3104      	adds	r1, #4

08002ee4 <LoopCopyDataInit>:
 8002ee4:	480b      	ldr	r0, [pc, #44]	; (8002f14 <LoopFillZerobss+0x1c>)
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <LoopFillZerobss+0x20>)
 8002ee8:	1842      	adds	r2, r0, r1
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d3f6      	bcc.n	8002edc <CopyDataInit>
 8002eee:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <LoopFillZerobss+0x24>)
 8002ef0:	e002      	b.n	8002ef8 <LoopFillZerobss>

08002ef2 <FillZerobss>:
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f842 3b04 	str.w	r3, [r2], #4

08002ef8 <LoopFillZerobss>:
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <LoopFillZerobss+0x28>)
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d3f9      	bcc.n	8002ef2 <FillZerobss>
 8002efe:	f7ff ffd3 	bl	8002ea8 <SystemInit>
 8002f02:	f007 fc0d 	bl	800a720 <__libc_init_array>
 8002f06:	f7fe fa97 	bl	8001438 <main>
 8002f0a:	4770      	bx	lr
 8002f0c:	20030000 	.word	0x20030000
 8002f10:	0800ef1c 	.word	0x0800ef1c
 8002f14:	20000000 	.word	0x20000000
 8002f18:	200000c8 	.word	0x200000c8
 8002f1c:	200000c8 	.word	0x200000c8
 8002f20:	200005e0 	.word	0x200005e0

08002f24 <ADC_IRQHandler>:
 8002f24:	e7fe      	b.n	8002f24 <ADC_IRQHandler>

08002f26 <ili9341_Init>:
 8002f26:	b580      	push	{r7, lr}
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	f000 fa5d 	bl	80033e8 <LCD_IO_Init>
 8002f2e:	20ca      	movs	r0, #202	; 0xca
 8002f30:	f000 f95d 	bl	80031ee <ili9341_WriteReg>
 8002f34:	20c3      	movs	r0, #195	; 0xc3
 8002f36:	f000 f967 	bl	8003208 <ili9341_WriteData>
 8002f3a:	2008      	movs	r0, #8
 8002f3c:	f000 f964 	bl	8003208 <ili9341_WriteData>
 8002f40:	2050      	movs	r0, #80	; 0x50
 8002f42:	f000 f961 	bl	8003208 <ili9341_WriteData>
 8002f46:	20cf      	movs	r0, #207	; 0xcf
 8002f48:	f000 f951 	bl	80031ee <ili9341_WriteReg>
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f000 f95b 	bl	8003208 <ili9341_WriteData>
 8002f52:	20c1      	movs	r0, #193	; 0xc1
 8002f54:	f000 f958 	bl	8003208 <ili9341_WriteData>
 8002f58:	2030      	movs	r0, #48	; 0x30
 8002f5a:	f000 f955 	bl	8003208 <ili9341_WriteData>
 8002f5e:	20ed      	movs	r0, #237	; 0xed
 8002f60:	f000 f945 	bl	80031ee <ili9341_WriteReg>
 8002f64:	2064      	movs	r0, #100	; 0x64
 8002f66:	f000 f94f 	bl	8003208 <ili9341_WriteData>
 8002f6a:	2003      	movs	r0, #3
 8002f6c:	f000 f94c 	bl	8003208 <ili9341_WriteData>
 8002f70:	2012      	movs	r0, #18
 8002f72:	f000 f949 	bl	8003208 <ili9341_WriteData>
 8002f76:	2081      	movs	r0, #129	; 0x81
 8002f78:	f000 f946 	bl	8003208 <ili9341_WriteData>
 8002f7c:	20e8      	movs	r0, #232	; 0xe8
 8002f7e:	f000 f936 	bl	80031ee <ili9341_WriteReg>
 8002f82:	2085      	movs	r0, #133	; 0x85
 8002f84:	f000 f940 	bl	8003208 <ili9341_WriteData>
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f000 f93d 	bl	8003208 <ili9341_WriteData>
 8002f8e:	2078      	movs	r0, #120	; 0x78
 8002f90:	f000 f93a 	bl	8003208 <ili9341_WriteData>
 8002f94:	20cb      	movs	r0, #203	; 0xcb
 8002f96:	f000 f92a 	bl	80031ee <ili9341_WriteReg>
 8002f9a:	2039      	movs	r0, #57	; 0x39
 8002f9c:	f000 f934 	bl	8003208 <ili9341_WriteData>
 8002fa0:	202c      	movs	r0, #44	; 0x2c
 8002fa2:	f000 f931 	bl	8003208 <ili9341_WriteData>
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f000 f92e 	bl	8003208 <ili9341_WriteData>
 8002fac:	2034      	movs	r0, #52	; 0x34
 8002fae:	f000 f92b 	bl	8003208 <ili9341_WriteData>
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	f000 f928 	bl	8003208 <ili9341_WriteData>
 8002fb8:	20f7      	movs	r0, #247	; 0xf7
 8002fba:	f000 f918 	bl	80031ee <ili9341_WriteReg>
 8002fbe:	2020      	movs	r0, #32
 8002fc0:	f000 f922 	bl	8003208 <ili9341_WriteData>
 8002fc4:	20ea      	movs	r0, #234	; 0xea
 8002fc6:	f000 f912 	bl	80031ee <ili9341_WriteReg>
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f000 f91c 	bl	8003208 <ili9341_WriteData>
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f000 f919 	bl	8003208 <ili9341_WriteData>
 8002fd6:	20b1      	movs	r0, #177	; 0xb1
 8002fd8:	f000 f909 	bl	80031ee <ili9341_WriteReg>
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f000 f913 	bl	8003208 <ili9341_WriteData>
 8002fe2:	201b      	movs	r0, #27
 8002fe4:	f000 f910 	bl	8003208 <ili9341_WriteData>
 8002fe8:	20b6      	movs	r0, #182	; 0xb6
 8002fea:	f000 f900 	bl	80031ee <ili9341_WriteReg>
 8002fee:	200a      	movs	r0, #10
 8002ff0:	f000 f90a 	bl	8003208 <ili9341_WriteData>
 8002ff4:	20a2      	movs	r0, #162	; 0xa2
 8002ff6:	f000 f907 	bl	8003208 <ili9341_WriteData>
 8002ffa:	20c0      	movs	r0, #192	; 0xc0
 8002ffc:	f000 f8f7 	bl	80031ee <ili9341_WriteReg>
 8003000:	2010      	movs	r0, #16
 8003002:	f000 f901 	bl	8003208 <ili9341_WriteData>
 8003006:	20c1      	movs	r0, #193	; 0xc1
 8003008:	f000 f8f1 	bl	80031ee <ili9341_WriteReg>
 800300c:	2010      	movs	r0, #16
 800300e:	f000 f8fb 	bl	8003208 <ili9341_WriteData>
 8003012:	20c5      	movs	r0, #197	; 0xc5
 8003014:	f000 f8eb 	bl	80031ee <ili9341_WriteReg>
 8003018:	2045      	movs	r0, #69	; 0x45
 800301a:	f000 f8f5 	bl	8003208 <ili9341_WriteData>
 800301e:	2015      	movs	r0, #21
 8003020:	f000 f8f2 	bl	8003208 <ili9341_WriteData>
 8003024:	20c7      	movs	r0, #199	; 0xc7
 8003026:	f000 f8e2 	bl	80031ee <ili9341_WriteReg>
 800302a:	2090      	movs	r0, #144	; 0x90
 800302c:	f000 f8ec 	bl	8003208 <ili9341_WriteData>
 8003030:	2036      	movs	r0, #54	; 0x36
 8003032:	f000 f8dc 	bl	80031ee <ili9341_WriteReg>
 8003036:	20c8      	movs	r0, #200	; 0xc8
 8003038:	f000 f8e6 	bl	8003208 <ili9341_WriteData>
 800303c:	20f2      	movs	r0, #242	; 0xf2
 800303e:	f000 f8d6 	bl	80031ee <ili9341_WriteReg>
 8003042:	2000      	movs	r0, #0
 8003044:	f000 f8e0 	bl	8003208 <ili9341_WriteData>
 8003048:	20b0      	movs	r0, #176	; 0xb0
 800304a:	f000 f8d0 	bl	80031ee <ili9341_WriteReg>
 800304e:	20c2      	movs	r0, #194	; 0xc2
 8003050:	f000 f8da 	bl	8003208 <ili9341_WriteData>
 8003054:	20b6      	movs	r0, #182	; 0xb6
 8003056:	f000 f8ca 	bl	80031ee <ili9341_WriteReg>
 800305a:	200a      	movs	r0, #10
 800305c:	f000 f8d4 	bl	8003208 <ili9341_WriteData>
 8003060:	20a7      	movs	r0, #167	; 0xa7
 8003062:	f000 f8d1 	bl	8003208 <ili9341_WriteData>
 8003066:	2027      	movs	r0, #39	; 0x27
 8003068:	f000 f8ce 	bl	8003208 <ili9341_WriteData>
 800306c:	2004      	movs	r0, #4
 800306e:	f000 f8cb 	bl	8003208 <ili9341_WriteData>
 8003072:	202a      	movs	r0, #42	; 0x2a
 8003074:	f000 f8bb 	bl	80031ee <ili9341_WriteReg>
 8003078:	2000      	movs	r0, #0
 800307a:	f000 f8c5 	bl	8003208 <ili9341_WriteData>
 800307e:	2000      	movs	r0, #0
 8003080:	f000 f8c2 	bl	8003208 <ili9341_WriteData>
 8003084:	2000      	movs	r0, #0
 8003086:	f000 f8bf 	bl	8003208 <ili9341_WriteData>
 800308a:	20ef      	movs	r0, #239	; 0xef
 800308c:	f000 f8bc 	bl	8003208 <ili9341_WriteData>
 8003090:	202b      	movs	r0, #43	; 0x2b
 8003092:	f000 f8ac 	bl	80031ee <ili9341_WriteReg>
 8003096:	2000      	movs	r0, #0
 8003098:	f000 f8b6 	bl	8003208 <ili9341_WriteData>
 800309c:	2000      	movs	r0, #0
 800309e:	f000 f8b3 	bl	8003208 <ili9341_WriteData>
 80030a2:	2001      	movs	r0, #1
 80030a4:	f000 f8b0 	bl	8003208 <ili9341_WriteData>
 80030a8:	203f      	movs	r0, #63	; 0x3f
 80030aa:	f000 f8ad 	bl	8003208 <ili9341_WriteData>
 80030ae:	20f6      	movs	r0, #246	; 0xf6
 80030b0:	f000 f89d 	bl	80031ee <ili9341_WriteReg>
 80030b4:	2001      	movs	r0, #1
 80030b6:	f000 f8a7 	bl	8003208 <ili9341_WriteData>
 80030ba:	2000      	movs	r0, #0
 80030bc:	f000 f8a4 	bl	8003208 <ili9341_WriteData>
 80030c0:	2006      	movs	r0, #6
 80030c2:	f000 f8a1 	bl	8003208 <ili9341_WriteData>
 80030c6:	202c      	movs	r0, #44	; 0x2c
 80030c8:	f000 f891 	bl	80031ee <ili9341_WriteReg>
 80030cc:	20c8      	movs	r0, #200	; 0xc8
 80030ce:	f000 fa79 	bl	80035c4 <LCD_Delay>
 80030d2:	2026      	movs	r0, #38	; 0x26
 80030d4:	f000 f88b 	bl	80031ee <ili9341_WriteReg>
 80030d8:	2001      	movs	r0, #1
 80030da:	f000 f895 	bl	8003208 <ili9341_WriteData>
 80030de:	20e0      	movs	r0, #224	; 0xe0
 80030e0:	f000 f885 	bl	80031ee <ili9341_WriteReg>
 80030e4:	200f      	movs	r0, #15
 80030e6:	f000 f88f 	bl	8003208 <ili9341_WriteData>
 80030ea:	2029      	movs	r0, #41	; 0x29
 80030ec:	f000 f88c 	bl	8003208 <ili9341_WriteData>
 80030f0:	2024      	movs	r0, #36	; 0x24
 80030f2:	f000 f889 	bl	8003208 <ili9341_WriteData>
 80030f6:	200c      	movs	r0, #12
 80030f8:	f000 f886 	bl	8003208 <ili9341_WriteData>
 80030fc:	200e      	movs	r0, #14
 80030fe:	f000 f883 	bl	8003208 <ili9341_WriteData>
 8003102:	2009      	movs	r0, #9
 8003104:	f000 f880 	bl	8003208 <ili9341_WriteData>
 8003108:	204e      	movs	r0, #78	; 0x4e
 800310a:	f000 f87d 	bl	8003208 <ili9341_WriteData>
 800310e:	2078      	movs	r0, #120	; 0x78
 8003110:	f000 f87a 	bl	8003208 <ili9341_WriteData>
 8003114:	203c      	movs	r0, #60	; 0x3c
 8003116:	f000 f877 	bl	8003208 <ili9341_WriteData>
 800311a:	2009      	movs	r0, #9
 800311c:	f000 f874 	bl	8003208 <ili9341_WriteData>
 8003120:	2013      	movs	r0, #19
 8003122:	f000 f871 	bl	8003208 <ili9341_WriteData>
 8003126:	2005      	movs	r0, #5
 8003128:	f000 f86e 	bl	8003208 <ili9341_WriteData>
 800312c:	2017      	movs	r0, #23
 800312e:	f000 f86b 	bl	8003208 <ili9341_WriteData>
 8003132:	2011      	movs	r0, #17
 8003134:	f000 f868 	bl	8003208 <ili9341_WriteData>
 8003138:	2000      	movs	r0, #0
 800313a:	f000 f865 	bl	8003208 <ili9341_WriteData>
 800313e:	20e1      	movs	r0, #225	; 0xe1
 8003140:	f000 f855 	bl	80031ee <ili9341_WriteReg>
 8003144:	2000      	movs	r0, #0
 8003146:	f000 f85f 	bl	8003208 <ili9341_WriteData>
 800314a:	2016      	movs	r0, #22
 800314c:	f000 f85c 	bl	8003208 <ili9341_WriteData>
 8003150:	201b      	movs	r0, #27
 8003152:	f000 f859 	bl	8003208 <ili9341_WriteData>
 8003156:	2004      	movs	r0, #4
 8003158:	f000 f856 	bl	8003208 <ili9341_WriteData>
 800315c:	2011      	movs	r0, #17
 800315e:	f000 f853 	bl	8003208 <ili9341_WriteData>
 8003162:	2007      	movs	r0, #7
 8003164:	f000 f850 	bl	8003208 <ili9341_WriteData>
 8003168:	2031      	movs	r0, #49	; 0x31
 800316a:	f000 f84d 	bl	8003208 <ili9341_WriteData>
 800316e:	2033      	movs	r0, #51	; 0x33
 8003170:	f000 f84a 	bl	8003208 <ili9341_WriteData>
 8003174:	2042      	movs	r0, #66	; 0x42
 8003176:	f000 f847 	bl	8003208 <ili9341_WriteData>
 800317a:	2005      	movs	r0, #5
 800317c:	f000 f844 	bl	8003208 <ili9341_WriteData>
 8003180:	200c      	movs	r0, #12
 8003182:	f000 f841 	bl	8003208 <ili9341_WriteData>
 8003186:	200a      	movs	r0, #10
 8003188:	f000 f83e 	bl	8003208 <ili9341_WriteData>
 800318c:	2028      	movs	r0, #40	; 0x28
 800318e:	f000 f83b 	bl	8003208 <ili9341_WriteData>
 8003192:	202f      	movs	r0, #47	; 0x2f
 8003194:	f000 f838 	bl	8003208 <ili9341_WriteData>
 8003198:	200f      	movs	r0, #15
 800319a:	f000 f835 	bl	8003208 <ili9341_WriteData>
 800319e:	2011      	movs	r0, #17
 80031a0:	f000 f825 	bl	80031ee <ili9341_WriteReg>
 80031a4:	20c8      	movs	r0, #200	; 0xc8
 80031a6:	f000 fa0d 	bl	80035c4 <LCD_Delay>
 80031aa:	2029      	movs	r0, #41	; 0x29
 80031ac:	f000 f81f 	bl	80031ee <ili9341_WriteReg>
 80031b0:	202c      	movs	r0, #44	; 0x2c
 80031b2:	f000 f81c 	bl	80031ee <ili9341_WriteReg>
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}

080031ba <ili9341_ReadID>:
 80031ba:	b580      	push	{r7, lr}
 80031bc:	af00      	add	r7, sp, #0
 80031be:	f000 f913 	bl	80033e8 <LCD_IO_Init>
 80031c2:	2103      	movs	r1, #3
 80031c4:	20d3      	movs	r0, #211	; 0xd3
 80031c6:	f000 f82c 	bl	8003222 <ili9341_ReadData>
 80031ca:	4603      	mov	r3, r0
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <ili9341_DisplayOn>:
 80031d2:	b580      	push	{r7, lr}
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	2029      	movs	r0, #41	; 0x29
 80031d8:	f000 f809 	bl	80031ee <ili9341_WriteReg>
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}

080031e0 <ili9341_DisplayOff>:
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	2028      	movs	r0, #40	; 0x28
 80031e6:	f000 f802 	bl	80031ee <ili9341_WriteReg>
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}

080031ee <ili9341_WriteReg>:
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	71fb      	strb	r3, [r7, #7]
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f98e 	bl	800351c <LCD_IO_WriteReg>
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <ili9341_WriteData>:
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	80fb      	strh	r3, [r7, #6]
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 f95f 	bl	80034d8 <LCD_IO_WriteData>
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <ili9341_ReadData>:
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	460a      	mov	r2, r1
 800322c:	80fb      	strh	r3, [r7, #6]
 800322e:	4613      	mov	r3, r2
 8003230:	717b      	strb	r3, [r7, #5]
 8003232:	797a      	ldrb	r2, [r7, #5]
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f000 f991 	bl	8003560 <LCD_IO_ReadData>
 800323e:	4603      	mov	r3, r0
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <ili9341_GetLcdPixelWidth>:
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
 800324c:	23f0      	movs	r3, #240	; 0xf0
 800324e:	4618      	mov	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <ili9341_GetLcdPixelHeight>:
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
 800325c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003270:	4819      	ldr	r0, [pc, #100]	; (80032d8 <SPIx_Init+0x6c>)
 8003272:	f004 faef 	bl	8007854 <HAL_SPI_GetState>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d12b      	bne.n	80032d4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800327c:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <SPIx_Init+0x6c>)
 800327e:	4a17      	ldr	r2, [pc, #92]	; (80032dc <SPIx_Init+0x70>)
 8003280:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <SPIx_Init+0x6c>)
 8003284:	2218      	movs	r2, #24
 8003286:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003288:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <SPIx_Init+0x6c>)
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <SPIx_Init+0x6c>)
 8003290:	2200      	movs	r2, #0
 8003292:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <SPIx_Init+0x6c>)
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800329a:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <SPIx_Init+0x6c>)
 800329c:	2200      	movs	r2, #0
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <SPIx_Init+0x6c>)
 80032a2:	2207      	movs	r2, #7
 80032a4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80032a6:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <SPIx_Init+0x6c>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <SPIx_Init+0x6c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <SPIx_Init+0x6c>)
 80032b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80032ba:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <SPIx_Init+0x6c>)
 80032bc:	2200      	movs	r2, #0
 80032be:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <SPIx_Init+0x6c>)
 80032c2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032c6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80032c8:	4803      	ldr	r0, [pc, #12]	; (80032d8 <SPIx_Init+0x6c>)
 80032ca:	f000 f853 	bl	8003374 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80032ce:	4802      	ldr	r0, [pc, #8]	; (80032d8 <SPIx_Init+0x6c>)
 80032d0:	f003 fe55 	bl	8006f7e <HAL_SPI_Init>
  } 
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	200000ec 	.word	0x200000ec
 80032dc:	40015000 	.word	0x40015000

080032e0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <SPIx_Read+0x38>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f107 0108 	add.w	r1, r7, #8
 80032fa:	4808      	ldr	r0, [pc, #32]	; (800331c <SPIx_Read+0x3c>)
 80032fc:	f003 ffff 	bl	80072fe <HAL_SPI_Receive>
 8003300:	4603      	mov	r3, r0
 8003302:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800330a:	f000 f827 	bl	800335c <SPIx_Error>
  }
  
  return readvalue;
 800330e:	68bb      	ldr	r3, [r7, #8]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000044 	.word	0x20000044
 800331c:	200000ec 	.word	0x200000ec

08003320 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <SPIx_Write+0x34>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	1db9      	adds	r1, r7, #6
 8003334:	2201      	movs	r2, #1
 8003336:	4808      	ldr	r0, [pc, #32]	; (8003358 <SPIx_Write+0x38>)
 8003338:	f003 fead 	bl	8007096 <HAL_SPI_Transmit>
 800333c:	4603      	mov	r3, r0
 800333e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003346:	f000 f809 	bl	800335c <SPIx_Error>
  }
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000044 	.word	0x20000044
 8003358:	200000ec 	.word	0x200000ec

0800335c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003360:	4803      	ldr	r0, [pc, #12]	; (8003370 <SPIx_Error+0x14>)
 8003362:	f003 fe70 	bl	8007046 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003366:	f7ff ff81 	bl	800326c <SPIx_Init>
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200000ec 	.word	0x200000ec

08003374 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <SPIx_MspInit+0x6c>)
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	4a16      	ldr	r2, [pc, #88]	; (80033e0 <SPIx_MspInit+0x6c>)
 8003386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800338a:	6453      	str	r3, [r2, #68]	; 0x44
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <SPIx_MspInit+0x6c>)
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <SPIx_MspInit+0x6c>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	4a0f      	ldr	r2, [pc, #60]	; (80033e0 <SPIx_MspInit+0x6c>)
 80033a2:	f043 0320 	orr.w	r3, r3, #32
 80033a6:	6313      	str	r3, [r2, #48]	; 0x30
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <SPIx_MspInit+0x6c>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80033b4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80033b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80033be:	2302      	movs	r3, #2
 80033c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80033c2:	2301      	movs	r3, #1
 80033c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80033c6:	2305      	movs	r3, #5
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80033ca:	f107 0314 	add.w	r3, r7, #20
 80033ce:	4619      	mov	r1, r3
 80033d0:	4804      	ldr	r0, [pc, #16]	; (80033e4 <SPIx_MspInit+0x70>)
 80033d2:	f001 fe9f 	bl	8005114 <HAL_GPIO_Init>
}
 80033d6:	bf00      	nop
 80033d8:	3728      	adds	r7, #40	; 0x28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40021400 	.word	0x40021400

080033e8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80033ee:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <LCD_IO_Init+0xe0>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d164      	bne.n	80034c0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80033f6:	4b34      	ldr	r3, [pc, #208]	; (80034c8 <LCD_IO_Init+0xe0>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	4b32      	ldr	r3, [pc, #200]	; (80034cc <LCD_IO_Init+0xe4>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	4a31      	ldr	r2, [pc, #196]	; (80034cc <LCD_IO_Init+0xe4>)
 8003406:	f043 0308 	orr.w	r3, r3, #8
 800340a:	6313      	str	r3, [r2, #48]	; 0x30
 800340c:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <LCD_IO_Init+0xe4>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800341c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800341e:	2301      	movs	r3, #1
 8003420:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003426:	2302      	movs	r3, #2
 8003428:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800342a:	f107 030c 	add.w	r3, r7, #12
 800342e:	4619      	mov	r1, r3
 8003430:	4827      	ldr	r0, [pc, #156]	; (80034d0 <LCD_IO_Init+0xe8>)
 8003432:	f001 fe6f 	bl	8005114 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	4b24      	ldr	r3, [pc, #144]	; (80034cc <LCD_IO_Init+0xe4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a23      	ldr	r2, [pc, #140]	; (80034cc <LCD_IO_Init+0xe4>)
 8003440:	f043 0308 	orr.w	r3, r3, #8
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	4b21      	ldr	r3, [pc, #132]	; (80034cc <LCD_IO_Init+0xe4>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003456:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003458:	2301      	movs	r3, #1
 800345a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003460:	2302      	movs	r3, #2
 8003462:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003464:	f107 030c 	add.w	r3, r7, #12
 8003468:	4619      	mov	r1, r3
 800346a:	4819      	ldr	r0, [pc, #100]	; (80034d0 <LCD_IO_Init+0xe8>)
 800346c:	f001 fe52 	bl	8005114 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003470:	2300      	movs	r3, #0
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	4b15      	ldr	r3, [pc, #84]	; (80034cc <LCD_IO_Init+0xe4>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	4a14      	ldr	r2, [pc, #80]	; (80034cc <LCD_IO_Init+0xe4>)
 800347a:	f043 0304 	orr.w	r3, r3, #4
 800347e:	6313      	str	r3, [r2, #48]	; 0x30
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <LCD_IO_Init+0xe4>)
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800348c:	2304      	movs	r3, #4
 800348e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003490:	2301      	movs	r3, #1
 8003492:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003498:	2302      	movs	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800349c:	f107 030c 	add.w	r3, r7, #12
 80034a0:	4619      	mov	r1, r3
 80034a2:	480c      	ldr	r0, [pc, #48]	; (80034d4 <LCD_IO_Init+0xec>)
 80034a4:	f001 fe36 	bl	8005114 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80034a8:	2200      	movs	r2, #0
 80034aa:	2104      	movs	r1, #4
 80034ac:	4809      	ldr	r0, [pc, #36]	; (80034d4 <LCD_IO_Init+0xec>)
 80034ae:	f002 f8e5 	bl	800567c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80034b2:	2201      	movs	r2, #1
 80034b4:	2104      	movs	r1, #4
 80034b6:	4807      	ldr	r0, [pc, #28]	; (80034d4 <LCD_IO_Init+0xec>)
 80034b8:	f002 f8e0 	bl	800567c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80034bc:	f7ff fed6 	bl	800326c <SPIx_Init>
  }
}
 80034c0:	bf00      	nop
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000144 	.word	0x20000144
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40020c00 	.word	0x40020c00
 80034d4:	40020800 	.word	0x40020800

080034d8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80034e2:	2201      	movs	r2, #1
 80034e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034e8:	480a      	ldr	r0, [pc, #40]	; (8003514 <LCD_IO_WriteData+0x3c>)
 80034ea:	f002 f8c7 	bl	800567c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80034ee:	2200      	movs	r2, #0
 80034f0:	2104      	movs	r1, #4
 80034f2:	4809      	ldr	r0, [pc, #36]	; (8003518 <LCD_IO_WriteData+0x40>)
 80034f4:	f002 f8c2 	bl	800567c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ff10 	bl	8003320 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003500:	2201      	movs	r2, #1
 8003502:	2104      	movs	r1, #4
 8003504:	4804      	ldr	r0, [pc, #16]	; (8003518 <LCD_IO_WriteData+0x40>)
 8003506:	f002 f8b9 	bl	800567c <HAL_GPIO_WritePin>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40020800 	.word	0x40020800

0800351c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003526:	2200      	movs	r2, #0
 8003528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800352c:	480a      	ldr	r0, [pc, #40]	; (8003558 <LCD_IO_WriteReg+0x3c>)
 800352e:	f002 f8a5 	bl	800567c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003532:	2200      	movs	r2, #0
 8003534:	2104      	movs	r1, #4
 8003536:	4809      	ldr	r0, [pc, #36]	; (800355c <LCD_IO_WriteReg+0x40>)
 8003538:	f002 f8a0 	bl	800567c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	b29b      	uxth	r3, r3
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff feed 	bl	8003320 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003546:	2201      	movs	r2, #1
 8003548:	2104      	movs	r1, #4
 800354a:	4804      	ldr	r0, [pc, #16]	; (800355c <LCD_IO_WriteReg+0x40>)
 800354c:	f002 f896 	bl	800567c <HAL_GPIO_WritePin>
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40020c00 	.word	0x40020c00
 800355c:	40020800 	.word	0x40020800

08003560 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	460a      	mov	r2, r1
 800356a:	80fb      	strh	r3, [r7, #6]
 800356c:	4613      	mov	r3, r2
 800356e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003574:	2200      	movs	r2, #0
 8003576:	2104      	movs	r1, #4
 8003578:	4810      	ldr	r0, [pc, #64]	; (80035bc <LCD_IO_ReadData+0x5c>)
 800357a:	f002 f87f 	bl	800567c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800357e:	2200      	movs	r2, #0
 8003580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003584:	480e      	ldr	r0, [pc, #56]	; (80035c0 <LCD_IO_ReadData+0x60>)
 8003586:	f002 f879 	bl	800567c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fec7 	bl	8003320 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003592:	797b      	ldrb	r3, [r7, #5]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fea3 	bl	80032e0 <SPIx_Read>
 800359a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800359c:	2201      	movs	r2, #1
 800359e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035a2:	4807      	ldr	r0, [pc, #28]	; (80035c0 <LCD_IO_ReadData+0x60>)
 80035a4:	f002 f86a 	bl	800567c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80035a8:	2201      	movs	r2, #1
 80035aa:	2104      	movs	r1, #4
 80035ac:	4803      	ldr	r0, [pc, #12]	; (80035bc <LCD_IO_ReadData+0x5c>)
 80035ae:	f002 f865 	bl	800567c <HAL_GPIO_WritePin>
  
  return readvalue;
 80035b2:	68fb      	ldr	r3, [r7, #12]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40020800 	.word	0x40020800
 80035c0:	40020c00 	.word	0x40020c00

080035c4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 ff29 	bl	8004424 <HAL_Delay>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80035e0:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <BSP_LCD_Init+0xbc>)
 80035e2:	4a2e      	ldr	r2, [pc, #184]	; (800369c <BSP_LCD_Init+0xc0>)
 80035e4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80035e6:	4b2c      	ldr	r3, [pc, #176]	; (8003698 <BSP_LCD_Init+0xbc>)
 80035e8:	2209      	movs	r2, #9
 80035ea:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80035ec:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <BSP_LCD_Init+0xbc>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <BSP_LCD_Init+0xbc>)
 80035f4:	221d      	movs	r2, #29
 80035f6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80035f8:	4b27      	ldr	r3, [pc, #156]	; (8003698 <BSP_LCD_Init+0xbc>)
 80035fa:	2203      	movs	r2, #3
 80035fc:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80035fe:	4b26      	ldr	r3, [pc, #152]	; (8003698 <BSP_LCD_Init+0xbc>)
 8003600:	f240 120d 	movw	r2, #269	; 0x10d
 8003604:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <BSP_LCD_Init+0xbc>)
 8003608:	f240 1243 	movw	r2, #323	; 0x143
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800360e:	4b22      	ldr	r3, [pc, #136]	; (8003698 <BSP_LCD_Init+0xbc>)
 8003610:	f240 1217 	movw	r2, #279	; 0x117
 8003614:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003616:	4b20      	ldr	r3, [pc, #128]	; (8003698 <BSP_LCD_Init+0xbc>)
 8003618:	f240 1247 	movw	r2, #327	; 0x147
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800361e:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <BSP_LCD_Init+0xbc>)
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003626:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <BSP_LCD_Init+0xbc>)
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800362e:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <BSP_LCD_Init+0xbc>)
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <BSP_LCD_Init+0xc4>)
 8003638:	2208      	movs	r2, #8
 800363a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <BSP_LCD_Init+0xc4>)
 800363e:	22c0      	movs	r2, #192	; 0xc0
 8003640:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003642:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <BSP_LCD_Init+0xc4>)
 8003644:	2204      	movs	r2, #4
 8003646:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <BSP_LCD_Init+0xc4>)
 800364a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800364e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003650:	4813      	ldr	r0, [pc, #76]	; (80036a0 <BSP_LCD_Init+0xc4>)
 8003652:	f003 fa57 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003656:	4b10      	ldr	r3, [pc, #64]	; (8003698 <BSP_LCD_Init+0xbc>)
 8003658:	2200      	movs	r2, #0
 800365a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800365c:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <BSP_LCD_Init+0xbc>)
 800365e:	2200      	movs	r2, #0
 8003660:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <BSP_LCD_Init+0xbc>)
 8003664:	2200      	movs	r2, #0
 8003666:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <BSP_LCD_Init+0xbc>)
 800366a:	2200      	movs	r2, #0
 800366c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800366e:	f000 fadf 	bl	8003c30 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003672:	4809      	ldr	r0, [pc, #36]	; (8003698 <BSP_LCD_Init+0xbc>)
 8003674:	f002 f9d0 	bl	8005a18 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <BSP_LCD_Init+0xc8>)
 800367a:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <BSP_LCD_Init+0xcc>)
 800367c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800367e:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <BSP_LCD_Init+0xc8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003686:	f000 fcc1 	bl	800400c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800368a:	4808      	ldr	r0, [pc, #32]	; (80036ac <BSP_LCD_Init+0xd0>)
 800368c:	f000 f8ce 	bl	800382c <BSP_LCD_SetFont>

  return LCD_OK;
 8003690:	2300      	movs	r3, #0
}  
 8003692:	4618      	mov	r0, r3
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	2000052c 	.word	0x2000052c
 800369c:	40016800 	.word	0x40016800
 80036a0:	20000188 	.word	0x20000188
 80036a4:	200005d4 	.word	0x200005d4
 80036a8:	2000000c 	.word	0x2000000c
 80036ac:	20000048 	.word	0x20000048

080036b0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <BSP_LCD_GetXSize+0x14>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	4798      	blx	r3
 80036bc:	4603      	mov	r3, r0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	200005d4 	.word	0x200005d4

080036c8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80036cc:	4b03      	ldr	r3, [pc, #12]	; (80036dc <BSP_LCD_GetYSize+0x14>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	4798      	blx	r3
 80036d4:	4603      	mov	r3, r0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	200005d4 	.word	0x200005d4

080036e0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b090      	sub	sp, #64	; 0x40
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	6039      	str	r1, [r7, #0]
 80036ea:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80036f0:	f7ff ffde 	bl	80036b0 <BSP_LCD_GetXSize>
 80036f4:	4603      	mov	r3, r0
 80036f6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80036fc:	f7ff ffe4 	bl	80036c8 <BSP_LCD_GetYSize>
 8003700:	4603      	mov	r3, r0
 8003702:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800370c:	23ff      	movs	r3, #255	; 0xff
 800370e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003726:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800372c:	2307      	movs	r3, #7
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003730:	f7ff ffbe 	bl	80036b0 <BSP_LCD_GetXSize>
 8003734:	4603      	mov	r3, r0
 8003736:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003738:	f7ff ffc6 	bl	80036c8 <BSP_LCD_GetYSize>
 800373c:	4603      	mov	r3, r0
 800373e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003740:	88fa      	ldrh	r2, [r7, #6]
 8003742:	f107 030c 	add.w	r3, r7, #12
 8003746:	4619      	mov	r1, r3
 8003748:	4814      	ldr	r0, [pc, #80]	; (800379c <BSP_LCD_LayerDefaultInit+0xbc>)
 800374a:	f002 faf7 	bl	8005d3c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	4913      	ldr	r1, [pc, #76]	; (80037a0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3304      	adds	r3, #4
 800375e:	f04f 32ff 	mov.w	r2, #4294967295
 8003762:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003764:	88fa      	ldrh	r2, [r7, #6]
 8003766:	490e      	ldr	r1, [pc, #56]	; (80037a0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003768:	4613      	mov	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	3308      	adds	r3, #8
 8003774:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003776:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003778:	88fa      	ldrh	r2, [r7, #6]
 800377a:	4909      	ldr	r1, [pc, #36]	; (80037a0 <BSP_LCD_LayerDefaultInit+0xc0>)
 800377c:	4613      	mov	r3, r2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800378a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800378c:	4803      	ldr	r0, [pc, #12]	; (800379c <BSP_LCD_LayerDefaultInit+0xbc>)
 800378e:	f002 fb13 	bl	8005db8 <HAL_LTDC_EnableDither>
}
 8003792:	bf00      	nop
 8003794:	3740      	adds	r7, #64	; 0x40
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	2000052c 	.word	0x2000052c
 80037a0:	200001bc 	.word	0x200001bc
 80037a4:	20000048 	.word	0x20000048

080037a8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80037b0:	4a04      	ldr	r2, [pc, #16]	; (80037c4 <BSP_LCD_SelectLayer+0x1c>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6013      	str	r3, [r2, #0]
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	200001b8 	.word	0x200001b8

080037c8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <BSP_LCD_SetTextColor+0x28>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4907      	ldr	r1, [pc, #28]	; (80037f4 <BSP_LCD_SetTextColor+0x2c>)
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	200001b8 	.word	0x200001b8
 80037f4:	200001bc 	.word	0x200001bc

080037f8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <BSP_LCD_SetBackColor+0x2c>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4908      	ldr	r1, [pc, #32]	; (8003828 <BSP_LCD_SetBackColor+0x30>)
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	3304      	adds	r3, #4
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	200001b8 	.word	0x200001b8
 8003828:	200001bc 	.word	0x200001bc

0800382c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <BSP_LCD_SetFont+0x2c>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4908      	ldr	r1, [pc, #32]	; (800385c <BSP_LCD_SetFont+0x30>)
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	3308      	adds	r3, #8
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	601a      	str	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	200001b8 	.word	0x200001b8
 800385c:	200001bc 	.word	0x200001bc

08003860 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003862:	b085      	sub	sp, #20
 8003864:	af02      	add	r7, sp, #8
 8003866:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <BSP_LCD_Clear+0x48>)
 800386a:	681c      	ldr	r4, [r3, #0]
 800386c:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <BSP_LCD_Clear+0x48>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0e      	ldr	r2, [pc, #56]	; (80038ac <BSP_LCD_Clear+0x4c>)
 8003872:	2134      	movs	r1, #52	; 0x34
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	335c      	adds	r3, #92	; 0x5c
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461d      	mov	r5, r3
 8003880:	f7ff ff16 	bl	80036b0 <BSP_LCD_GetXSize>
 8003884:	4606      	mov	r6, r0
 8003886:	f7ff ff1f 	bl	80036c8 <BSP_LCD_GetYSize>
 800388a:	4602      	mov	r2, r0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	2300      	movs	r3, #0
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	4632      	mov	r2, r6
 8003898:	4629      	mov	r1, r5
 800389a:	4620      	mov	r0, r4
 800389c:	f000 fb7e 	bl	8003f9c <FillBuffer>
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a8:	200001b8 	.word	0x200001b8
 80038ac:	2000052c 	.word	0x2000052c

080038b0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	80fb      	strh	r3, [r7, #6]
 80038ba:	460b      	mov	r3, r1
 80038bc:	80bb      	strh	r3, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80038c2:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <BSP_LCD_DisplayChar+0x80>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	491b      	ldr	r1, [pc, #108]	; (8003934 <BSP_LCD_DisplayChar+0x84>)
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3308      	adds	r3, #8
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6819      	ldr	r1, [r3, #0]
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80038de:	4b14      	ldr	r3, [pc, #80]	; (8003930 <BSP_LCD_DisplayChar+0x80>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4c14      	ldr	r4, [pc, #80]	; (8003934 <BSP_LCD_DisplayChar+0x84>)
 80038e4:	4613      	mov	r3, r2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4423      	add	r3, r4
 80038ee:	3308      	adds	r3, #8
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80038f4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80038f8:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <BSP_LCD_DisplayChar+0x80>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4c0d      	ldr	r4, [pc, #52]	; (8003934 <BSP_LCD_DisplayChar+0x84>)
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4423      	add	r3, r4
 8003908:	3308      	adds	r3, #8
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	889b      	ldrh	r3, [r3, #4]
 800390e:	3307      	adds	r3, #7
 8003910:	2b00      	cmp	r3, #0
 8003912:	da00      	bge.n	8003916 <BSP_LCD_DisplayChar+0x66>
 8003914:	3307      	adds	r3, #7
 8003916:	10db      	asrs	r3, r3, #3
 8003918:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800391c:	18ca      	adds	r2, r1, r3
 800391e:	88b9      	ldrh	r1, [r7, #4]
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fa80 	bl	8003e28 <DrawChar>
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bd90      	pop	{r4, r7, pc}
 8003930:	200001b8 	.word	0x200001b8
 8003934:	200001bc 	.word	0x200001bc

08003938 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003938:	b5b0      	push	{r4, r5, r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	60ba      	str	r2, [r7, #8]
 8003940:	461a      	mov	r2, r3
 8003942:	4603      	mov	r3, r0
 8003944:	81fb      	strh	r3, [r7, #14]
 8003946:	460b      	mov	r3, r1
 8003948:	81bb      	strh	r3, [r7, #12]
 800394a:	4613      	mov	r3, r2
 800394c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800394e:	2301      	movs	r3, #1
 8003950:	83fb      	strh	r3, [r7, #30]
 8003952:	2300      	movs	r3, #0
 8003954:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003962:	e002      	b.n	800396a <BSP_LCD_DisplayStringAt+0x32>
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	3301      	adds	r3, #1
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	617a      	str	r2, [r7, #20]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f6      	bne.n	8003964 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003976:	f7ff fe9b 	bl	80036b0 <BSP_LCD_GetXSize>
 800397a:	4b4a      	ldr	r3, [pc, #296]	; (8003aa4 <BSP_LCD_DisplayStringAt+0x16c>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	494a      	ldr	r1, [pc, #296]	; (8003aa8 <BSP_LCD_DisplayStringAt+0x170>)
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	3308      	adds	r3, #8
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	889b      	ldrh	r3, [r3, #4]
 8003990:	fbb0 f3f3 	udiv	r3, r0, r3
 8003994:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d01c      	beq.n	80039d6 <BSP_LCD_DisplayStringAt+0x9e>
 800399c:	2b03      	cmp	r3, #3
 800399e:	d017      	beq.n	80039d0 <BSP_LCD_DisplayStringAt+0x98>
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d12e      	bne.n	8003a02 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	1ad1      	subs	r1, r2, r3
 80039aa:	4b3e      	ldr	r3, [pc, #248]	; (8003aa4 <BSP_LCD_DisplayStringAt+0x16c>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	483e      	ldr	r0, [pc, #248]	; (8003aa8 <BSP_LCD_DisplayStringAt+0x170>)
 80039b0:	4613      	mov	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4403      	add	r3, r0
 80039ba:	3308      	adds	r3, #8
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	889b      	ldrh	r3, [r3, #4]
 80039c0:	fb03 f301 	mul.w	r3, r3, r1
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	89fb      	ldrh	r3, [r7, #14]
 80039ca:	4413      	add	r3, r2
 80039cc:	83fb      	strh	r3, [r7, #30]
      break;
 80039ce:	e01b      	b.n	8003a08 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80039d0:	89fb      	ldrh	r3, [r7, #14]
 80039d2:	83fb      	strh	r3, [r7, #30]
      break;
 80039d4:	e018      	b.n	8003a08 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	b299      	uxth	r1, r3
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <BSP_LCD_DisplayStringAt+0x16c>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4831      	ldr	r0, [pc, #196]	; (8003aa8 <BSP_LCD_DisplayStringAt+0x170>)
 80039e4:	4613      	mov	r3, r2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4403      	add	r3, r0
 80039ee:	3308      	adds	r3, #8
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	889b      	ldrh	r3, [r3, #4]
 80039f4:	fb11 f303 	smulbb	r3, r1, r3
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	89fb      	ldrh	r3, [r7, #14]
 80039fc:	4413      	add	r3, r2
 80039fe:	83fb      	strh	r3, [r7, #30]
      break;
 8003a00:	e002      	b.n	8003a08 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8003a02:	89fb      	ldrh	r3, [r7, #14]
 8003a04:	83fb      	strh	r3, [r7, #30]
      break;
 8003a06:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003a08:	e01a      	b.n	8003a40 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	89b9      	ldrh	r1, [r7, #12]
 8003a10:	8bfb      	ldrh	r3, [r7, #30]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff ff4c 	bl	80038b0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003a18:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <BSP_LCD_DisplayStringAt+0x16c>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4922      	ldr	r1, [pc, #136]	; (8003aa8 <BSP_LCD_DisplayStringAt+0x170>)
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	3308      	adds	r3, #8
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	889a      	ldrh	r2, [r3, #4]
 8003a2e:	8bfb      	ldrh	r3, [r7, #30]
 8003a30:	4413      	add	r3, r2
 8003a32:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	3301      	adds	r3, #1
 8003a38:	60bb      	str	r3, [r7, #8]
    i++;
 8003a3a:	8bbb      	ldrh	r3, [r7, #28]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2dc      	uxtb	r4, r3
 8003a4e:	f7ff fe2f 	bl	80036b0 <BSP_LCD_GetXSize>
 8003a52:	4605      	mov	r5, r0
 8003a54:	8bb9      	ldrh	r1, [r7, #28]
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <BSP_LCD_DisplayStringAt+0x16c>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4813      	ldr	r0, [pc, #76]	; (8003aa8 <BSP_LCD_DisplayStringAt+0x170>)
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4403      	add	r3, r0
 8003a66:	3308      	adds	r3, #8
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	889b      	ldrh	r3, [r3, #4]
 8003a6c:	fb03 f301 	mul.w	r3, r3, r1
 8003a70:	1aeb      	subs	r3, r5, r3
 8003a72:	b299      	uxth	r1, r3
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <BSP_LCD_DisplayStringAt+0x16c>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	480b      	ldr	r0, [pc, #44]	; (8003aa8 <BSP_LCD_DisplayStringAt+0x170>)
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4403      	add	r3, r0
 8003a84:	3308      	adds	r3, #8
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	889b      	ldrh	r3, [r3, #4]
 8003a8a:	4299      	cmp	r1, r3
 8003a8c:	bf2c      	ite	cs
 8003a8e:	2301      	movcs	r3, #1
 8003a90:	2300      	movcc	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	4023      	ands	r3, r4
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1b6      	bne.n	8003a0a <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8003a9c:	bf00      	nop
 8003a9e:	3720      	adds	r7, #32
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa4:	200001b8 	.word	0x200001b8
 8003aa8:	200001bc 	.word	0x200001bc

08003aac <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003aac:	b5b0      	push	{r4, r5, r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	80fb      	strh	r3, [r7, #6]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	80bb      	strh	r3, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003ac2:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <BSP_LCD_DrawHLine+0x70>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <BSP_LCD_DrawHLine+0x74>)
 8003ac8:	2134      	movs	r1, #52	; 0x34
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	335c      	adds	r3, #92	; 0x5c
 8003ad2:	681c      	ldr	r4, [r3, #0]
 8003ad4:	f7ff fdec 	bl	80036b0 <BSP_LCD_GetXSize>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	88bb      	ldrh	r3, [r7, #4]
 8003adc:	fb03 f202 	mul.w	r2, r3, r2
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4423      	add	r3, r4
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <BSP_LCD_DrawHLine+0x70>)
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	68fc      	ldr	r4, [r7, #12]
 8003af0:	887d      	ldrh	r5, [r7, #2]
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <BSP_LCD_DrawHLine+0x70>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	490b      	ldr	r1, [pc, #44]	; (8003b24 <BSP_LCD_DrawHLine+0x78>)
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	2300      	movs	r3, #0
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	462a      	mov	r2, r5
 8003b0e:	4621      	mov	r1, r4
 8003b10:	f000 fa44 	bl	8003f9c <FillBuffer>
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b1c:	200001b8 	.word	0x200001b8
 8003b20:	2000052c 	.word	0x2000052c
 8003b24:	200001bc 	.word	0x200001bc

08003b28 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	4603      	mov	r3, r0
 8003b30:	80fb      	strh	r3, [r7, #6]
 8003b32:	460b      	mov	r3, r1
 8003b34:	80bb      	strh	r3, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003b3e:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <BSP_LCD_DrawVLine+0x78>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <BSP_LCD_DrawVLine+0x7c>)
 8003b44:	2134      	movs	r1, #52	; 0x34
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	335c      	adds	r3, #92	; 0x5c
 8003b4e:	681c      	ldr	r4, [r3, #0]
 8003b50:	f7ff fdae 	bl	80036b0 <BSP_LCD_GetXSize>
 8003b54:	4602      	mov	r2, r0
 8003b56:	88bb      	ldrh	r3, [r7, #4]
 8003b58:	fb03 f202 	mul.w	r2, r3, r2
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4423      	add	r3, r4
 8003b64:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <BSP_LCD_DrawVLine+0x78>)
 8003b68:	681c      	ldr	r4, [r3, #0]
 8003b6a:	68fd      	ldr	r5, [r7, #12]
 8003b6c:	887e      	ldrh	r6, [r7, #2]
 8003b6e:	f7ff fd9f 	bl	80036b0 <BSP_LCD_GetXSize>
 8003b72:	4603      	mov	r3, r0
 8003b74:	1e59      	subs	r1, r3, #1
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <BSP_LCD_DrawVLine+0x78>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	480b      	ldr	r0, [pc, #44]	; (8003ba8 <BSP_LCD_DrawVLine+0x80>)
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4403      	add	r3, r0
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	9100      	str	r1, [sp, #0]
 8003b8c:	4633      	mov	r3, r6
 8003b8e:	2201      	movs	r2, #1
 8003b90:	4629      	mov	r1, r5
 8003b92:	4620      	mov	r0, r4
 8003b94:	f000 fa02 	bl	8003f9c <FillBuffer>
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba0:	200001b8 	.word	0x200001b8
 8003ba4:	2000052c 	.word	0x2000052c
 8003ba8:	200001bc 	.word	0x200001bc

08003bac <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4623      	mov	r3, r4
 8003bbc:	80fb      	strh	r3, [r7, #6]
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	80bb      	strh	r3, [r7, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	807b      	strh	r3, [r7, #2]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	88b9      	ldrh	r1, [r7, #4]
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff ff6b 	bl	8003aac <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8003bd6:	88ba      	ldrh	r2, [r7, #4]
 8003bd8:	883b      	ldrh	r3, [r7, #0]
 8003bda:	4413      	add	r3, r2
 8003bdc:	b299      	uxth	r1, r3
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ff62 	bl	8003aac <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8003be8:	883a      	ldrh	r2, [r7, #0]
 8003bea:	88b9      	ldrh	r1, [r7, #4]
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ff9a 	bl	8003b28 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8003bf4:	88fa      	ldrh	r2, [r7, #6]
 8003bf6:	887b      	ldrh	r3, [r7, #2]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	883a      	ldrh	r2, [r7, #0]
 8003bfe:	88b9      	ldrh	r1, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff91 	bl	8003b28 <BSP_LCD_DrawVLine>
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd90      	pop	{r4, r7, pc}
	...

08003c10 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <BSP_LCD_DisplayOn+0x1c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003c1e:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <BSP_LCD_DisplayOn+0x1c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4798      	blx	r3
  }
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200005d4 	.word	0x200005d4

08003c30 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08e      	sub	sp, #56	; 0x38
 8003c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	623b      	str	r3, [r7, #32]
 8003c3a:	4b61      	ldr	r3, [pc, #388]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	4a60      	ldr	r2, [pc, #384]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003c40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c44:	6453      	str	r3, [r2, #68]	; 0x44
 8003c46:	4b5e      	ldr	r3, [pc, #376]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c4e:	623b      	str	r3, [r7, #32]
 8003c50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	4b5a      	ldr	r3, [pc, #360]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a59      	ldr	r2, [pc, #356]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003c5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b57      	ldr	r3, [pc, #348]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c6a:	61fb      	str	r3, [r7, #28]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	4a52      	ldr	r2, [pc, #328]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7e:	4b50      	ldr	r3, [pc, #320]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	4b4c      	ldr	r3, [pc, #304]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	4a4b      	ldr	r2, [pc, #300]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003c94:	f043 0302 	orr.w	r3, r3, #2
 8003c98:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9a:	4b49      	ldr	r3, [pc, #292]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	4b45      	ldr	r3, [pc, #276]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	4a44      	ldr	r2, [pc, #272]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003cb0:	f043 0304 	orr.w	r3, r3, #4
 8003cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb6:	4b42      	ldr	r3, [pc, #264]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	4b3e      	ldr	r3, [pc, #248]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	4a3d      	ldr	r2, [pc, #244]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003ccc:	f043 0308 	orr.w	r3, r3, #8
 8003cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd2:	4b3b      	ldr	r3, [pc, #236]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	4b37      	ldr	r3, [pc, #220]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	4a36      	ldr	r2, [pc, #216]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003ce8:	f043 0320 	orr.w	r3, r3, #32
 8003cec:	6313      	str	r3, [r2, #48]	; 0x30
 8003cee:	4b34      	ldr	r3, [pc, #208]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	4a2f      	ldr	r2, [pc, #188]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d08:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0a:	4b2d      	ldr	r3, [pc, #180]	; (8003dc0 <BSP_LCD_MspInit+0x190>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	607b      	str	r3, [r7, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003d16:	f641 0358 	movw	r3, #6232	; 0x1858
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003d24:	2302      	movs	r3, #2
 8003d26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003d28:	230e      	movs	r3, #14
 8003d2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d30:	4619      	mov	r1, r3
 8003d32:	4824      	ldr	r0, [pc, #144]	; (8003dc4 <BSP_LCD_MspInit+0x194>)
 8003d34:	f001 f9ee 	bl	8005114 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003d38:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d42:	4619      	mov	r1, r3
 8003d44:	4820      	ldr	r0, [pc, #128]	; (8003dc8 <BSP_LCD_MspInit+0x198>)
 8003d46:	f001 f9e5 	bl	8005114 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003d4a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d54:	4619      	mov	r1, r3
 8003d56:	481d      	ldr	r0, [pc, #116]	; (8003dcc <BSP_LCD_MspInit+0x19c>)
 8003d58:	f001 f9dc 	bl	8005114 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003d5c:	2348      	movs	r3, #72	; 0x48
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d64:	4619      	mov	r1, r3
 8003d66:	481a      	ldr	r0, [pc, #104]	; (8003dd0 <BSP_LCD_MspInit+0x1a0>)
 8003d68:	f001 f9d4 	bl	8005114 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d76:	4619      	mov	r1, r3
 8003d78:	4816      	ldr	r0, [pc, #88]	; (8003dd4 <BSP_LCD_MspInit+0x1a4>)
 8003d7a:	f001 f9cb 	bl	8005114 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003d7e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4813      	ldr	r0, [pc, #76]	; (8003dd8 <BSP_LCD_MspInit+0x1a8>)
 8003d8c:	f001 f9c2 	bl	8005114 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003d90:	2303      	movs	r3, #3
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003d94:	2309      	movs	r3, #9
 8003d96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	480a      	ldr	r0, [pc, #40]	; (8003dc8 <BSP_LCD_MspInit+0x198>)
 8003da0:	f001 f9b8 	bl	8005114 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003da4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dae:	4619      	mov	r1, r3
 8003db0:	4809      	ldr	r0, [pc, #36]	; (8003dd8 <BSP_LCD_MspInit+0x1a8>)
 8003db2:	f001 f9af 	bl	8005114 <HAL_GPIO_Init>
}
 8003db6:	bf00      	nop
 8003db8:	3738      	adds	r7, #56	; 0x38
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40020000 	.word	0x40020000
 8003dc8:	40020400 	.word	0x40020400
 8003dcc:	40020800 	.word	0x40020800
 8003dd0:	40020c00 	.word	0x40020c00
 8003dd4:	40021400 	.word	0x40021400
 8003dd8:	40021800 	.word	0x40021800

08003ddc <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003ddc:	b5b0      	push	{r4, r5, r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	603a      	str	r2, [r7, #0]
 8003de6:	80fb      	strh	r3, [r7, #6]
 8003de8:	460b      	mov	r3, r1
 8003dea:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <BSP_LCD_DrawPixel+0x44>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a0c      	ldr	r2, [pc, #48]	; (8003e24 <BSP_LCD_DrawPixel+0x48>)
 8003df2:	2134      	movs	r1, #52	; 0x34
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	335c      	adds	r3, #92	; 0x5c
 8003dfc:	681c      	ldr	r4, [r3, #0]
 8003dfe:	88bd      	ldrh	r5, [r7, #4]
 8003e00:	f7ff fc56 	bl	80036b0 <BSP_LCD_GetXSize>
 8003e04:	4603      	mov	r3, r0
 8003e06:	fb03 f205 	mul.w	r2, r3, r5
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4423      	add	r3, r4
 8003e12:	461a      	mov	r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6013      	str	r3, [r2, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e20:	200001b8 	.word	0x200001b8
 8003e24:	2000052c 	.word	0x2000052c

08003e28 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	603a      	str	r2, [r7, #0]
 8003e32:	80fb      	strh	r3, [r7, #6]
 8003e34:	460b      	mov	r3, r1
 8003e36:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003e44:	4b53      	ldr	r3, [pc, #332]	; (8003f94 <DrawChar+0x16c>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4953      	ldr	r1, [pc, #332]	; (8003f98 <DrawChar+0x170>)
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	3308      	adds	r3, #8
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	88db      	ldrh	r3, [r3, #6]
 8003e5a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003e5c:	4b4d      	ldr	r3, [pc, #308]	; (8003f94 <DrawChar+0x16c>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	494d      	ldr	r1, [pc, #308]	; (8003f98 <DrawChar+0x170>)
 8003e62:	4613      	mov	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	889b      	ldrh	r3, [r3, #4]
 8003e72:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003e74:	8a3b      	ldrh	r3, [r7, #16]
 8003e76:	3307      	adds	r3, #7
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	da00      	bge.n	8003e7e <DrawChar+0x56>
 8003e7c:	3307      	adds	r3, #7
 8003e7e:	10db      	asrs	r3, r3, #3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	8a3b      	ldrh	r3, [r7, #16]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	e076      	b.n	8003f82 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003e94:	8a3b      	ldrh	r3, [r7, #16]
 8003e96:	3307      	adds	r3, #7
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	da00      	bge.n	8003e9e <DrawChar+0x76>
 8003e9c:	3307      	adds	r3, #7
 8003e9e:	10db      	asrs	r3, r3, #3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	fb03 f302 	mul.w	r3, r3, r2
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	4413      	add	r3, r2
 8003eac:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003eae:	8a3b      	ldrh	r3, [r7, #16]
 8003eb0:	3307      	adds	r3, #7
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	da00      	bge.n	8003eb8 <DrawChar+0x90>
 8003eb6:	3307      	adds	r3, #7
 8003eb8:	10db      	asrs	r3, r3, #3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d002      	beq.n	8003ec4 <DrawChar+0x9c>
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d004      	beq.n	8003ecc <DrawChar+0xa4>
 8003ec2:	e00c      	b.n	8003ede <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	617b      	str	r3, [r7, #20]
      break;
 8003eca:	e016      	b.n	8003efa <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	3201      	adds	r2, #1
 8003ed6:	7812      	ldrb	r2, [r2, #0]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
      break;
 8003edc:	e00d      	b.n	8003efa <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	041a      	lsls	r2, r3, #16
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	021b      	lsls	r3, r3, #8
 8003eec:	4313      	orrs	r3, r2
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	3202      	adds	r2, #2
 8003ef2:	7812      	ldrb	r2, [r2, #0]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
      break;
 8003ef8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003efa:	2300      	movs	r3, #0
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	e036      	b.n	8003f6e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003f00:	8a3a      	ldrh	r2, [r7, #16]
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	1ad2      	subs	r2, r2, r3
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	4413      	add	r3, r2
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d012      	beq.n	8003f42 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	4413      	add	r3, r2
 8003f24:	b298      	uxth	r0, r3
 8003f26:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <DrawChar+0x16c>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	491b      	ldr	r1, [pc, #108]	; (8003f98 <DrawChar+0x170>)
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	88bb      	ldrh	r3, [r7, #4]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f7ff ff4e 	bl	8003ddc <BSP_LCD_DrawPixel>
 8003f40:	e012      	b.n	8003f68 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	88fb      	ldrh	r3, [r7, #6]
 8003f48:	4413      	add	r3, r2
 8003f4a:	b298      	uxth	r0, r3
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <DrawChar+0x16c>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4911      	ldr	r1, [pc, #68]	; (8003f98 <DrawChar+0x170>)
 8003f52:	4613      	mov	r3, r2
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	88bb      	ldrh	r3, [r7, #4]
 8003f62:	4619      	mov	r1, r3
 8003f64:	f7ff ff3a 	bl	8003ddc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	8a3b      	ldrh	r3, [r7, #16]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d3c4      	bcc.n	8003f00 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003f76:	88bb      	ldrh	r3, [r7, #4]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	8a7b      	ldrh	r3, [r7, #18]
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d384      	bcc.n	8003e94 <DrawChar+0x6c>
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	200001b8 	.word	0x200001b8
 8003f98:	200001bc 	.word	0x200001bc

08003f9c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003faa:	4b16      	ldr	r3, [pc, #88]	; (8004004 <FillBuffer+0x68>)
 8003fac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003fb0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003fb2:	4b14      	ldr	r3, [pc, #80]	; (8004004 <FillBuffer+0x68>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003fb8:	4a12      	ldr	r2, [pc, #72]	; (8004004 <FillBuffer+0x68>)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003fbe:	4b11      	ldr	r3, [pc, #68]	; (8004004 <FillBuffer+0x68>)
 8003fc0:	4a11      	ldr	r2, [pc, #68]	; (8004008 <FillBuffer+0x6c>)
 8003fc2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003fc4:	480f      	ldr	r0, [pc, #60]	; (8004004 <FillBuffer+0x68>)
 8003fc6:	f000 fd09 	bl	80049dc <HAL_DMA2D_Init>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d115      	bne.n	8003ffc <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003fd0:	68f9      	ldr	r1, [r7, #12]
 8003fd2:	480c      	ldr	r0, [pc, #48]	; (8004004 <FillBuffer+0x68>)
 8003fd4:	f000 ff70 	bl	8004eb8 <HAL_DMA2D_ConfigLayer>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10e      	bne.n	8003ffc <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69f9      	ldr	r1, [r7, #28]
 8003fe8:	4806      	ldr	r0, [pc, #24]	; (8004004 <FillBuffer+0x68>)
 8003fea:	f000 fd40 	bl	8004a6e <HAL_DMA2D_Start>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d103      	bne.n	8003ffc <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003ff4:	210a      	movs	r1, #10
 8003ff6:	4803      	ldr	r0, [pc, #12]	; (8004004 <FillBuffer+0x68>)
 8003ff8:	f000 fd64 	bl	8004ac4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000148 	.word	0x20000148
 8004008:	4002b000 	.word	0x4002b000

0800400c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004010:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <BSP_SDRAM_Init+0xac>)
 8004012:	4a2a      	ldr	r2, [pc, #168]	; (80040bc <BSP_SDRAM_Init+0xb0>)
 8004014:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004016:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <BSP_SDRAM_Init+0xb4>)
 8004018:	2202      	movs	r2, #2
 800401a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800401c:	4b28      	ldr	r3, [pc, #160]	; (80040c0 <BSP_SDRAM_Init+0xb4>)
 800401e:	2207      	movs	r2, #7
 8004020:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004022:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <BSP_SDRAM_Init+0xb4>)
 8004024:	2204      	movs	r2, #4
 8004026:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004028:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <BSP_SDRAM_Init+0xb4>)
 800402a:	2207      	movs	r2, #7
 800402c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800402e:	4b24      	ldr	r3, [pc, #144]	; (80040c0 <BSP_SDRAM_Init+0xb4>)
 8004030:	2202      	movs	r2, #2
 8004032:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004034:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <BSP_SDRAM_Init+0xb4>)
 8004036:	2202      	movs	r2, #2
 8004038:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800403a:	4b21      	ldr	r3, [pc, #132]	; (80040c0 <BSP_SDRAM_Init+0xb4>)
 800403c:	2202      	movs	r2, #2
 800403e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004040:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <BSP_SDRAM_Init+0xac>)
 8004042:	2201      	movs	r2, #1
 8004044:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004046:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <BSP_SDRAM_Init+0xac>)
 8004048:	2200      	movs	r2, #0
 800404a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800404c:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <BSP_SDRAM_Init+0xac>)
 800404e:	2204      	movs	r2, #4
 8004050:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004052:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <BSP_SDRAM_Init+0xac>)
 8004054:	2210      	movs	r2, #16
 8004056:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004058:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <BSP_SDRAM_Init+0xac>)
 800405a:	2240      	movs	r2, #64	; 0x40
 800405c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800405e:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <BSP_SDRAM_Init+0xac>)
 8004060:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004064:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <BSP_SDRAM_Init+0xac>)
 8004068:	2200      	movs	r2, #0
 800406a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800406c:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <BSP_SDRAM_Init+0xac>)
 800406e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004072:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004074:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <BSP_SDRAM_Init+0xac>)
 8004076:	2200      	movs	r2, #0
 8004078:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800407a:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <BSP_SDRAM_Init+0xac>)
 800407c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004080:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004082:	2100      	movs	r1, #0
 8004084:	480c      	ldr	r0, [pc, #48]	; (80040b8 <BSP_SDRAM_Init+0xac>)
 8004086:	f000 f87f 	bl	8004188 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800408a:	490d      	ldr	r1, [pc, #52]	; (80040c0 <BSP_SDRAM_Init+0xb4>)
 800408c:	480a      	ldr	r0, [pc, #40]	; (80040b8 <BSP_SDRAM_Init+0xac>)
 800408e:	f002 fef7 	bl	8006e80 <HAL_SDRAM_Init>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <BSP_SDRAM_Init+0xb8>)
 800409a:	2201      	movs	r2, #1
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	e002      	b.n	80040a6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <BSP_SDRAM_Init+0xb8>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80040a6:	f240 506a 	movw	r0, #1386	; 0x56a
 80040aa:	f000 f80d 	bl	80040c8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <BSP_SDRAM_Init+0xb8>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200001d4 	.word	0x200001d4
 80040bc:	a0000140 	.word	0xa0000140
 80040c0:	20000208 	.word	0x20000208
 80040c4:	20000058 	.word	0x20000058

080040c8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80040da:	4b29      	ldr	r3, [pc, #164]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80040dc:	2208      	movs	r2, #8
 80040de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80040e0:	4b27      	ldr	r3, [pc, #156]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80040e6:	4b26      	ldr	r3, [pc, #152]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80040ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040f0:	4923      	ldr	r1, [pc, #140]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80040f2:	4824      	ldr	r0, [pc, #144]	; (8004184 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80040f4:	f002 fef8 	bl	8006ee8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80040f8:	2001      	movs	r0, #1
 80040fa:	f000 f993 	bl	8004424 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004100:	2202      	movs	r2, #2
 8004102:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004104:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004106:	2208      	movs	r2, #8
 8004108:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800410c:	2201      	movs	r2, #1
 800410e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800411a:	4919      	ldr	r1, [pc, #100]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800411c:	4819      	ldr	r0, [pc, #100]	; (8004184 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800411e:	f002 fee3 	bl	8006ee8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004122:	4b17      	ldr	r3, [pc, #92]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004124:	2203      	movs	r2, #3
 8004126:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004128:	4b15      	ldr	r3, [pc, #84]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800412a:	2208      	movs	r2, #8
 800412c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800412e:	4b14      	ldr	r3, [pc, #80]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004130:	2204      	movs	r2, #4
 8004132:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004134:	4b12      	ldr	r3, [pc, #72]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004136:	2200      	movs	r2, #0
 8004138:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800413a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800413e:	4910      	ldr	r1, [pc, #64]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004140:	4810      	ldr	r0, [pc, #64]	; (8004184 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004142:	f002 fed1 	bl	8006ee8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004146:	f44f 730c 	mov.w	r3, #560	; 0x230
 800414a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800414e:	2204      	movs	r2, #4
 8004150:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004154:	2208      	movs	r2, #8
 8004156:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800415a:	2201      	movs	r2, #1
 800415c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4a07      	ldr	r2, [pc, #28]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004162:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004168:	4905      	ldr	r1, [pc, #20]	; (8004180 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800416a:	4806      	ldr	r0, [pc, #24]	; (8004184 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800416c:	f002 febc 	bl	8006ee8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4804      	ldr	r0, [pc, #16]	; (8004184 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004174:	f002 fee3 	bl	8006f3e <HAL_SDRAM_ProgramRefreshRate>
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000224 	.word	0x20000224
 8004184:	200001d4 	.word	0x200001d4

08004188 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b090      	sub	sp, #64	; 0x40
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80ec 	beq.w	8004372 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
 800419e:	4b77      	ldr	r3, [pc, #476]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	4a76      	ldr	r2, [pc, #472]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6393      	str	r3, [r2, #56]	; 0x38
 80041aa:	4b74      	ldr	r3, [pc, #464]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80041b6:	2300      	movs	r3, #0
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ba:	4b70      	ldr	r3, [pc, #448]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	4a6f      	ldr	r2, [pc, #444]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 80041c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041c4:	6313      	str	r3, [r2, #48]	; 0x30
 80041c6:	4b6d      	ldr	r3, [pc, #436]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041d2:	2300      	movs	r3, #0
 80041d4:	623b      	str	r3, [r7, #32]
 80041d6:	4b69      	ldr	r3, [pc, #420]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	4a68      	ldr	r2, [pc, #416]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	6313      	str	r3, [r2, #48]	; 0x30
 80041e2:	4b66      	ldr	r3, [pc, #408]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	623b      	str	r3, [r7, #32]
 80041ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	4b62      	ldr	r3, [pc, #392]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	4a61      	ldr	r2, [pc, #388]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 80041f8:	f043 0304 	orr.w	r3, r3, #4
 80041fc:	6313      	str	r3, [r2, #48]	; 0x30
 80041fe:	4b5f      	ldr	r3, [pc, #380]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	4b5b      	ldr	r3, [pc, #364]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	4a5a      	ldr	r2, [pc, #360]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 8004214:	f043 0308 	orr.w	r3, r3, #8
 8004218:	6313      	str	r3, [r2, #48]	; 0x30
 800421a:	4b58      	ldr	r3, [pc, #352]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	4b54      	ldr	r3, [pc, #336]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	4a53      	ldr	r2, [pc, #332]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 8004230:	f043 0310 	orr.w	r3, r3, #16
 8004234:	6313      	str	r3, [r2, #48]	; 0x30
 8004236:	4b51      	ldr	r3, [pc, #324]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	4b4d      	ldr	r3, [pc, #308]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	4a4c      	ldr	r2, [pc, #304]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 800424c:	f043 0320 	orr.w	r3, r3, #32
 8004250:	6313      	str	r3, [r2, #48]	; 0x30
 8004252:	4b4a      	ldr	r3, [pc, #296]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	4b46      	ldr	r3, [pc, #280]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	4a45      	ldr	r2, [pc, #276]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 8004268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800426c:	6313      	str	r3, [r2, #48]	; 0x30
 800426e:	4b43      	ldr	r3, [pc, #268]	; (800437c <BSP_SDRAM_MspInit+0x1f4>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800427a:	2302      	movs	r3, #2
 800427c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800427e:	2302      	movs	r3, #2
 8004280:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004282:	2300      	movs	r3, #0
 8004284:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004286:	230c      	movs	r3, #12
 8004288:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800428a:	2360      	movs	r3, #96	; 0x60
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800428e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004292:	4619      	mov	r1, r3
 8004294:	483a      	ldr	r0, [pc, #232]	; (8004380 <BSP_SDRAM_MspInit+0x1f8>)
 8004296:	f000 ff3d 	bl	8005114 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800429a:	2301      	movs	r3, #1
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800429e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042a2:	4619      	mov	r1, r3
 80042a4:	4837      	ldr	r0, [pc, #220]	; (8004384 <BSP_SDRAM_MspInit+0x1fc>)
 80042a6:	f000 ff35 	bl	8005114 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80042aa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80042b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042b4:	4619      	mov	r1, r3
 80042b6:	4834      	ldr	r0, [pc, #208]	; (8004388 <BSP_SDRAM_MspInit+0x200>)
 80042b8:	f000 ff2c 	bl	8005114 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80042bc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80042c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042c6:	4619      	mov	r1, r3
 80042c8:	4830      	ldr	r0, [pc, #192]	; (800438c <BSP_SDRAM_MspInit+0x204>)
 80042ca:	f000 ff23 	bl	8005114 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80042ce:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80042d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042d8:	4619      	mov	r1, r3
 80042da:	482d      	ldr	r0, [pc, #180]	; (8004390 <BSP_SDRAM_MspInit+0x208>)
 80042dc:	f000 ff1a 	bl	8005114 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80042e0:	f248 1333 	movw	r3, #33075	; 0x8133
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80042e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042ea:	4619      	mov	r1, r3
 80042ec:	4829      	ldr	r0, [pc, #164]	; (8004394 <BSP_SDRAM_MspInit+0x20c>)
 80042ee:	f000 ff11 	bl	8005114 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80042f2:	4b29      	ldr	r3, [pc, #164]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80042f8:	4b27      	ldr	r3, [pc, #156]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 80042fa:	2280      	movs	r2, #128	; 0x80
 80042fc:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80042fe:	4b26      	ldr	r3, [pc, #152]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 8004300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004304:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004306:	4b24      	ldr	r3, [pc, #144]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 8004308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800430c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800430e:	4b22      	ldr	r3, [pc, #136]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 8004310:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004314:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004316:	4b20      	ldr	r3, [pc, #128]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 8004318:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800431c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 8004320:	2200      	movs	r2, #0
 8004322:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004324:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 8004326:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800432a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 800432e:	2200      	movs	r2, #0
 8004330:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004332:	4b19      	ldr	r3, [pc, #100]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 8004334:	2203      	movs	r2, #3
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 800433a:	2200      	movs	r2, #0
 800433c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800433e:	4b16      	ldr	r3, [pc, #88]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004344:	4b14      	ldr	r3, [pc, #80]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 8004346:	4a15      	ldr	r2, [pc, #84]	; (800439c <BSP_SDRAM_MspInit+0x214>)
 8004348:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a12      	ldr	r2, [pc, #72]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 800434e:	631a      	str	r2, [r3, #48]	; 0x30
 8004350:	4a11      	ldr	r2, [pc, #68]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004356:	4810      	ldr	r0, [pc, #64]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 8004358:	f000 fa32 	bl	80047c0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800435c:	480e      	ldr	r0, [pc, #56]	; (8004398 <BSP_SDRAM_MspInit+0x210>)
 800435e:	f000 f981 	bl	8004664 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004362:	2200      	movs	r2, #0
 8004364:	210f      	movs	r1, #15
 8004366:	2038      	movs	r0, #56	; 0x38
 8004368:	f000 f936 	bl	80045d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800436c:	2038      	movs	r0, #56	; 0x38
 800436e:	f000 f94f 	bl	8004610 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004372:	bf00      	nop
 8004374:	3740      	adds	r7, #64	; 0x40
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	40020400 	.word	0x40020400
 8004384:	40020800 	.word	0x40020800
 8004388:	40020c00 	.word	0x40020c00
 800438c:	40021000 	.word	0x40021000
 8004390:	40021400 	.word	0x40021400
 8004394:	40021800 	.word	0x40021800
 8004398:	20000234 	.word	0x20000234
 800439c:	40026410 	.word	0x40026410

080043a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <HAL_Init+0x40>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a0d      	ldr	r2, [pc, #52]	; (80043e0 <HAL_Init+0x40>)
 80043aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_Init+0x40>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <HAL_Init+0x40>)
 80043b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043bc:	4b08      	ldr	r3, [pc, #32]	; (80043e0 <HAL_Init+0x40>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a07      	ldr	r2, [pc, #28]	; (80043e0 <HAL_Init+0x40>)
 80043c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043c8:	2003      	movs	r0, #3
 80043ca:	f000 f8fa 	bl	80045c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ce:	2000      	movs	r0, #0
 80043d0:	f7fe fc9e 	bl	8002d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043d4:	f7fe f93e 	bl	8002654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40023c00 	.word	0x40023c00

080043e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_IncTick+0x20>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_IncTick+0x24>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4413      	add	r3, r2
 80043f4:	4a04      	ldr	r2, [pc, #16]	; (8004408 <HAL_IncTick+0x24>)
 80043f6:	6013      	str	r3, [r2, #0]
}
 80043f8:	bf00      	nop
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000060 	.word	0x20000060
 8004408:	200005d8 	.word	0x200005d8

0800440c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return uwTick;
 8004410:	4b03      	ldr	r3, [pc, #12]	; (8004420 <HAL_GetTick+0x14>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	200005d8 	.word	0x200005d8

08004424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800442c:	f7ff ffee 	bl	800440c <HAL_GetTick>
 8004430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d005      	beq.n	800444a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800443e:	4b09      	ldr	r3, [pc, #36]	; (8004464 <HAL_Delay+0x40>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800444a:	bf00      	nop
 800444c:	f7ff ffde 	bl	800440c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	429a      	cmp	r2, r3
 800445a:	d8f7      	bhi.n	800444c <HAL_Delay+0x28>
  {
  }
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000060 	.word	0x20000060

08004468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <__NVIC_SetPriorityGrouping+0x44>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004484:	4013      	ands	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800449a:	4a04      	ldr	r2, [pc, #16]	; (80044ac <__NVIC_SetPriorityGrouping+0x44>)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	60d3      	str	r3, [r2, #12]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	e000ed00 	.word	0xe000ed00

080044b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044b4:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <__NVIC_GetPriorityGrouping+0x18>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	0a1b      	lsrs	r3, r3, #8
 80044ba:	f003 0307 	and.w	r3, r3, #7
}
 80044be:	4618      	mov	r0, r3
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	db0b      	blt.n	80044f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044de:	79fb      	ldrb	r3, [r7, #7]
 80044e0:	f003 021f 	and.w	r2, r3, #31
 80044e4:	4907      	ldr	r1, [pc, #28]	; (8004504 <__NVIC_EnableIRQ+0x38>)
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	2001      	movs	r0, #1
 80044ee:	fa00 f202 	lsl.w	r2, r0, r2
 80044f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	e000e100 	.word	0xe000e100

08004508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	6039      	str	r1, [r7, #0]
 8004512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004518:	2b00      	cmp	r3, #0
 800451a:	db0a      	blt.n	8004532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	b2da      	uxtb	r2, r3
 8004520:	490c      	ldr	r1, [pc, #48]	; (8004554 <__NVIC_SetPriority+0x4c>)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	0112      	lsls	r2, r2, #4
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	440b      	add	r3, r1
 800452c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004530:	e00a      	b.n	8004548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	4908      	ldr	r1, [pc, #32]	; (8004558 <__NVIC_SetPriority+0x50>)
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	3b04      	subs	r3, #4
 8004540:	0112      	lsls	r2, r2, #4
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	440b      	add	r3, r1
 8004546:	761a      	strb	r2, [r3, #24]
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000e100 	.word	0xe000e100
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800455c:	b480      	push	{r7}
 800455e:	b089      	sub	sp, #36	; 0x24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f1c3 0307 	rsb	r3, r3, #7
 8004576:	2b04      	cmp	r3, #4
 8004578:	bf28      	it	cs
 800457a:	2304      	movcs	r3, #4
 800457c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3304      	adds	r3, #4
 8004582:	2b06      	cmp	r3, #6
 8004584:	d902      	bls.n	800458c <NVIC_EncodePriority+0x30>
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	3b03      	subs	r3, #3
 800458a:	e000      	b.n	800458e <NVIC_EncodePriority+0x32>
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004590:	f04f 32ff 	mov.w	r2, #4294967295
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43da      	mvns	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	401a      	ands	r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045a4:	f04f 31ff 	mov.w	r1, #4294967295
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	fa01 f303 	lsl.w	r3, r1, r3
 80045ae:	43d9      	mvns	r1, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	4313      	orrs	r3, r2
         );
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3724      	adds	r7, #36	; 0x24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff ff4c 	bl	8004468 <__NVIC_SetPriorityGrouping>
}
 80045d0:	bf00      	nop
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045ea:	f7ff ff61 	bl	80044b0 <__NVIC_GetPriorityGrouping>
 80045ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	6978      	ldr	r0, [r7, #20]
 80045f6:	f7ff ffb1 	bl	800455c <NVIC_EncodePriority>
 80045fa:	4602      	mov	r2, r0
 80045fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff ff80 	bl	8004508 <__NVIC_SetPriority>
}
 8004608:	bf00      	nop
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800461a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff ff54 	bl	80044cc <__NVIC_EnableIRQ>
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e00e      	b.n	800465c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	795b      	ldrb	r3, [r3, #5]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d105      	bne.n	8004654 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fe f828 	bl	80026a4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004670:	f7ff fecc 	bl	800440c <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e099      	b.n	80047b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046a0:	e00f      	b.n	80046c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046a2:	f7ff feb3 	bl	800440c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b05      	cmp	r3, #5
 80046ae:	d908      	bls.n	80046c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2203      	movs	r2, #3
 80046ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e078      	b.n	80047b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e8      	bne.n	80046a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4b38      	ldr	r3, [pc, #224]	; (80047bc <HAL_DMA_Init+0x158>)
 80046dc:	4013      	ands	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004706:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	2b04      	cmp	r3, #4
 800471a:	d107      	bne.n	800472c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	4313      	orrs	r3, r2
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f023 0307 	bic.w	r3, r3, #7
 8004742:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	2b04      	cmp	r3, #4
 8004754:	d117      	bne.n	8004786 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00e      	beq.n	8004786 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f8bd 	bl	80048e8 <DMA_CheckFifoParam>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2240      	movs	r2, #64	; 0x40
 8004778:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004782:	2301      	movs	r3, #1
 8004784:	e016      	b.n	80047b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f874 	bl	800487c <DMA_CalcBaseAndBitshift>
 8004794:	4603      	mov	r3, r0
 8004796:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479c:	223f      	movs	r2, #63	; 0x3f
 800479e:	409a      	lsls	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	f010803f 	.word	0xf010803f

080047c0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e050      	b.n	8004874 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d101      	bne.n	80047e2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
 80047e0:	e048      	b.n	8004874 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2200      	movs	r2, #0
 8004800:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2200      	movs	r2, #0
 8004818:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2221      	movs	r2, #33	; 0x21
 8004820:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f82a 	bl	800487c <DMA_CalcBaseAndBitshift>
 8004828:	4603      	mov	r3, r0
 800482a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004854:	223f      	movs	r2, #63	; 0x3f
 8004856:	409a      	lsls	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	3b10      	subs	r3, #16
 800488c:	4a14      	ldr	r2, [pc, #80]	; (80048e0 <DMA_CalcBaseAndBitshift+0x64>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004896:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d909      	bls.n	80048be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	1d1a      	adds	r2, r3, #4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	659a      	str	r2, [r3, #88]	; 0x58
 80048bc:	e007      	b.n	80048ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	aaaaaaab 	.word	0xaaaaaaab
 80048e4:	0800ebe0 	.word	0x0800ebe0

080048e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d11f      	bne.n	8004942 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d855      	bhi.n	80049b4 <DMA_CheckFifoParam+0xcc>
 8004908:	a201      	add	r2, pc, #4	; (adr r2, 8004910 <DMA_CheckFifoParam+0x28>)
 800490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490e:	bf00      	nop
 8004910:	08004921 	.word	0x08004921
 8004914:	08004933 	.word	0x08004933
 8004918:	08004921 	.word	0x08004921
 800491c:	080049b5 	.word	0x080049b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d045      	beq.n	80049b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004930:	e042      	b.n	80049b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800493a:	d13f      	bne.n	80049bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004940:	e03c      	b.n	80049bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494a:	d121      	bne.n	8004990 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b03      	cmp	r3, #3
 8004950:	d836      	bhi.n	80049c0 <DMA_CheckFifoParam+0xd8>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <DMA_CheckFifoParam+0x70>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	08004969 	.word	0x08004969
 800495c:	0800496f 	.word	0x0800496f
 8004960:	08004969 	.word	0x08004969
 8004964:	08004981 	.word	0x08004981
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	e02f      	b.n	80049ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d024      	beq.n	80049c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800497e:	e021      	b.n	80049c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004988:	d11e      	bne.n	80049c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800498e:	e01b      	b.n	80049c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d902      	bls.n	800499c <DMA_CheckFifoParam+0xb4>
 8004996:	2b03      	cmp	r3, #3
 8004998:	d003      	beq.n	80049a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800499a:	e018      	b.n	80049ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
      break;
 80049a0:	e015      	b.n	80049ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00e      	beq.n	80049cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
      break;
 80049b2:	e00b      	b.n	80049cc <DMA_CheckFifoParam+0xe4>
      break;
 80049b4:	bf00      	nop
 80049b6:	e00a      	b.n	80049ce <DMA_CheckFifoParam+0xe6>
      break;
 80049b8:	bf00      	nop
 80049ba:	e008      	b.n	80049ce <DMA_CheckFifoParam+0xe6>
      break;
 80049bc:	bf00      	nop
 80049be:	e006      	b.n	80049ce <DMA_CheckFifoParam+0xe6>
      break;
 80049c0:	bf00      	nop
 80049c2:	e004      	b.n	80049ce <DMA_CheckFifoParam+0xe6>
      break;
 80049c4:	bf00      	nop
 80049c6:	e002      	b.n	80049ce <DMA_CheckFifoParam+0xe6>
      break;   
 80049c8:	bf00      	nop
 80049ca:	e000      	b.n	80049ce <DMA_CheckFifoParam+0xe6>
      break;
 80049cc:	bf00      	nop
    }
  } 
  
  return status; 
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e03b      	b.n	8004a66 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fd fe70 	bl	80026e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2c:	f023 0107 	bic.w	r1, r3, #7
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68d1      	ldr	r1, [r2, #12]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	430b      	orrs	r3, r1
 8004a54:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af02      	add	r7, sp, #8
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_DMA2D_Start+0x1c>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e018      	b.n	8004abc <HAL_DMA2D_Start+0x4e>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fa99 	bl	8004fdc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d056      	beq.n	8004b8e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004ae0:	f7ff fc94 	bl	800440c <HAL_GetTick>
 8004ae4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004ae6:	e04b      	b.n	8004b80 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d023      	beq.n	8004b42 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	f043 0202 	orr.w	r2, r3, #2
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	f043 0201 	orr.w	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2221      	movs	r2, #33	; 0x21
 8004b2c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2204      	movs	r2, #4
 8004b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e0a5      	b.n	8004c8e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d01a      	beq.n	8004b80 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004b4a:	f7ff fc5f 	bl	800440c <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d302      	bcc.n	8004b60 <HAL_DMA2D_PollForTransfer+0x9c>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10f      	bne.n	8004b80 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	f043 0220 	orr.w	r2, r3, #32
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2203      	movs	r2, #3
 8004b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e086      	b.n	8004c8e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0ac      	beq.n	8004ae8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d061      	beq.n	8004c74 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb0:	f7ff fc2c 	bl	800440c <HAL_GetTick>
 8004bb4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004bb6:	e056      	b.n	8004c66 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d02e      	beq.n	8004c28 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd8:	f043 0204 	orr.w	r2, r3, #4
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	f043 0202 	orr.w	r2, r3, #2
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c04:	f043 0201 	orr.w	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2229      	movs	r2, #41	; 0x29
 8004c12:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2204      	movs	r2, #4
 8004c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e032      	b.n	8004c8e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2e:	d01a      	beq.n	8004c66 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004c30:	f7ff fbec 	bl	800440c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d302      	bcc.n	8004c46 <HAL_DMA2D_PollForTransfer+0x182>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10f      	bne.n	8004c66 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	f043 0220 	orr.w	r2, r3, #32
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2203      	movs	r2, #3
 8004c56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e013      	b.n	8004c8e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0a1      	beq.n	8004bb8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2212      	movs	r2, #18
 8004c7a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d026      	beq.n	8004d06 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d021      	beq.n	8004d06 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cd0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	f043 0201 	orr.w	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2204      	movs	r2, #4
 8004cea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d026      	beq.n	8004d5e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d021      	beq.n	8004d5e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d28:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	f043 0202 	orr.w	r2, r3, #2
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2204      	movs	r2, #4
 8004d42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d026      	beq.n	8004db6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d021      	beq.n	8004db6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d80:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2208      	movs	r2, #8
 8004d88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	f043 0204 	orr.w	r2, r3, #4
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2204      	movs	r2, #4
 8004d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d013      	beq.n	8004de8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00e      	beq.n	8004de8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2204      	movs	r2, #4
 8004de0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f853 	bl	8004e8e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d024      	beq.n	8004e3c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01f      	beq.n	8004e3c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e0a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2202      	movs	r2, #2
 8004e12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01f      	beq.n	8004e86 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01a      	beq.n	8004e86 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e5e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2210      	movs	r2, #16
 8004e66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f80e 	bl	8004ea2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_DMA2D_ConfigLayer+0x20>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e079      	b.n	8004fcc <HAL_DMA2D_ConfigLayer+0x114>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	3318      	adds	r3, #24
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004f02:	4b35      	ldr	r3, [pc, #212]	; (8004fd8 <HAL_DMA2D_ConfigLayer+0x120>)
 8004f04:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b0a      	cmp	r3, #10
 8004f0c:	d003      	beq.n	8004f16 <HAL_DMA2D_ConfigLayer+0x5e>
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b09      	cmp	r3, #9
 8004f14:	d107      	bne.n	8004f26 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	e005      	b.n	8004f32 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	061b      	lsls	r3, r3, #24
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d120      	bne.n	8004f7a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	43db      	mvns	r3, r3
 8004f42:	ea02 0103 	and.w	r1, r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b0a      	cmp	r3, #10
 8004f60:	d003      	beq.n	8004f6a <HAL_DMA2D_ConfigLayer+0xb2>
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b09      	cmp	r3, #9
 8004f68:	d127      	bne.n	8004fba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004f76:	629a      	str	r2, [r3, #40]	; 0x28
 8004f78:	e01f      	b.n	8004fba <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	ea02 0103 	and.w	r1, r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b0a      	cmp	r3, #10
 8004fa2:	d003      	beq.n	8004fac <HAL_DMA2D_ConfigLayer+0xf4>
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b09      	cmp	r3, #9
 8004faa:	d106      	bne.n	8004fba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004fb8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	ff03000f 	.word	0xff03000f

08004fdc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b08b      	sub	sp, #44	; 0x2c
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	041a      	lsls	r2, r3, #16
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005014:	d174      	bne.n	8005100 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800501c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005024:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800502c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d108      	bne.n	800504e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	431a      	orrs	r2, r3
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	4313      	orrs	r3, r2
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
 800504c:	e053      	b.n	80050f6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d106      	bne.n	8005064 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4313      	orrs	r3, r2
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
 8005062:	e048      	b.n	80050f6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d111      	bne.n	8005090 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	0cdb      	lsrs	r3, r3, #19
 8005070:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	0a9b      	lsrs	r3, r3, #10
 8005076:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	08db      	lsrs	r3, r3, #3
 800507c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	02db      	lsls	r3, r3, #11
 8005086:	4313      	orrs	r3, r2
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
 800508e:	e032      	b.n	80050f6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d117      	bne.n	80050c8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	0fdb      	lsrs	r3, r3, #31
 800509c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	0cdb      	lsrs	r3, r3, #19
 80050a2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	0adb      	lsrs	r3, r3, #11
 80050a8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	08db      	lsrs	r3, r3, #3
 80050ae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	029b      	lsls	r3, r3, #10
 80050b8:	431a      	orrs	r2, r3
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	03db      	lsls	r3, r3, #15
 80050be:	4313      	orrs	r3, r2
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
 80050c6:	e016      	b.n	80050f6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	0f1b      	lsrs	r3, r3, #28
 80050cc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	0d1b      	lsrs	r3, r3, #20
 80050d2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	0b1b      	lsrs	r3, r3, #12
 80050d8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	011a      	lsls	r2, r3, #4
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	431a      	orrs	r2, r3
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	031b      	lsls	r3, r3, #12
 80050ee:	4313      	orrs	r3, r2
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80050fe:	e003      	b.n	8005108 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	60da      	str	r2, [r3, #12]
}
 8005108:	bf00      	nop
 800510a:	372c      	adds	r7, #44	; 0x2c
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	; 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	e177      	b.n	8005420 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005130:	2201      	movs	r2, #1
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4013      	ands	r3, r2
 8005142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	429a      	cmp	r2, r3
 800514a:	f040 8166 	bne.w	800541a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d00b      	beq.n	800516e <HAL_GPIO_Init+0x5a>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d007      	beq.n	800516e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005162:	2b11      	cmp	r3, #17
 8005164:	d003      	beq.n	800516e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b12      	cmp	r3, #18
 800516c:	d130      	bne.n	80051d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	2203      	movs	r2, #3
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4013      	ands	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4313      	orrs	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051a4:	2201      	movs	r2, #1
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	43db      	mvns	r3, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4013      	ands	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 0201 	and.w	r2, r3, #1
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	2203      	movs	r2, #3
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	43db      	mvns	r3, r3
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4013      	ands	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d003      	beq.n	8005210 <HAL_GPIO_Init+0xfc>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b12      	cmp	r3, #18
 800520e:	d123      	bne.n	8005258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	08da      	lsrs	r2, r3, #3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3208      	adds	r2, #8
 8005218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	220f      	movs	r2, #15
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4313      	orrs	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	08da      	lsrs	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3208      	adds	r2, #8
 8005252:	69b9      	ldr	r1, [r7, #24]
 8005254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	2203      	movs	r2, #3
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4013      	ands	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f003 0203 	and.w	r2, r3, #3
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4313      	orrs	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80c0 	beq.w	800541a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	4b65      	ldr	r3, [pc, #404]	; (8005434 <HAL_GPIO_Init+0x320>)
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	4a64      	ldr	r2, [pc, #400]	; (8005434 <HAL_GPIO_Init+0x320>)
 80052a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052a8:	6453      	str	r3, [r2, #68]	; 0x44
 80052aa:	4b62      	ldr	r3, [pc, #392]	; (8005434 <HAL_GPIO_Init+0x320>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052b6:	4a60      	ldr	r2, [pc, #384]	; (8005438 <HAL_GPIO_Init+0x324>)
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	089b      	lsrs	r3, r3, #2
 80052bc:	3302      	adds	r3, #2
 80052be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	220f      	movs	r2, #15
 80052ce:	fa02 f303 	lsl.w	r3, r2, r3
 80052d2:	43db      	mvns	r3, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	4013      	ands	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a57      	ldr	r2, [pc, #348]	; (800543c <HAL_GPIO_Init+0x328>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d037      	beq.n	8005352 <HAL_GPIO_Init+0x23e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a56      	ldr	r2, [pc, #344]	; (8005440 <HAL_GPIO_Init+0x32c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d031      	beq.n	800534e <HAL_GPIO_Init+0x23a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a55      	ldr	r2, [pc, #340]	; (8005444 <HAL_GPIO_Init+0x330>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d02b      	beq.n	800534a <HAL_GPIO_Init+0x236>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a54      	ldr	r2, [pc, #336]	; (8005448 <HAL_GPIO_Init+0x334>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d025      	beq.n	8005346 <HAL_GPIO_Init+0x232>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a53      	ldr	r2, [pc, #332]	; (800544c <HAL_GPIO_Init+0x338>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d01f      	beq.n	8005342 <HAL_GPIO_Init+0x22e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a52      	ldr	r2, [pc, #328]	; (8005450 <HAL_GPIO_Init+0x33c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d019      	beq.n	800533e <HAL_GPIO_Init+0x22a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a51      	ldr	r2, [pc, #324]	; (8005454 <HAL_GPIO_Init+0x340>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_GPIO_Init+0x226>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a50      	ldr	r2, [pc, #320]	; (8005458 <HAL_GPIO_Init+0x344>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00d      	beq.n	8005336 <HAL_GPIO_Init+0x222>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a4f      	ldr	r2, [pc, #316]	; (800545c <HAL_GPIO_Init+0x348>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d007      	beq.n	8005332 <HAL_GPIO_Init+0x21e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a4e      	ldr	r2, [pc, #312]	; (8005460 <HAL_GPIO_Init+0x34c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d101      	bne.n	800532e <HAL_GPIO_Init+0x21a>
 800532a:	2309      	movs	r3, #9
 800532c:	e012      	b.n	8005354 <HAL_GPIO_Init+0x240>
 800532e:	230a      	movs	r3, #10
 8005330:	e010      	b.n	8005354 <HAL_GPIO_Init+0x240>
 8005332:	2308      	movs	r3, #8
 8005334:	e00e      	b.n	8005354 <HAL_GPIO_Init+0x240>
 8005336:	2307      	movs	r3, #7
 8005338:	e00c      	b.n	8005354 <HAL_GPIO_Init+0x240>
 800533a:	2306      	movs	r3, #6
 800533c:	e00a      	b.n	8005354 <HAL_GPIO_Init+0x240>
 800533e:	2305      	movs	r3, #5
 8005340:	e008      	b.n	8005354 <HAL_GPIO_Init+0x240>
 8005342:	2304      	movs	r3, #4
 8005344:	e006      	b.n	8005354 <HAL_GPIO_Init+0x240>
 8005346:	2303      	movs	r3, #3
 8005348:	e004      	b.n	8005354 <HAL_GPIO_Init+0x240>
 800534a:	2302      	movs	r3, #2
 800534c:	e002      	b.n	8005354 <HAL_GPIO_Init+0x240>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <HAL_GPIO_Init+0x240>
 8005352:	2300      	movs	r3, #0
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	f002 0203 	and.w	r2, r2, #3
 800535a:	0092      	lsls	r2, r2, #2
 800535c:	4093      	lsls	r3, r2
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4313      	orrs	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005364:	4934      	ldr	r1, [pc, #208]	; (8005438 <HAL_GPIO_Init+0x324>)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	089b      	lsrs	r3, r3, #2
 800536a:	3302      	adds	r3, #2
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005372:	4b3c      	ldr	r3, [pc, #240]	; (8005464 <HAL_GPIO_Init+0x350>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	43db      	mvns	r3, r3
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	4013      	ands	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005396:	4a33      	ldr	r2, [pc, #204]	; (8005464 <HAL_GPIO_Init+0x350>)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800539c:	4b31      	ldr	r3, [pc, #196]	; (8005464 <HAL_GPIO_Init+0x350>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	43db      	mvns	r3, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4013      	ands	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053c0:	4a28      	ldr	r2, [pc, #160]	; (8005464 <HAL_GPIO_Init+0x350>)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053c6:	4b27      	ldr	r3, [pc, #156]	; (8005464 <HAL_GPIO_Init+0x350>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	43db      	mvns	r3, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4013      	ands	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053ea:	4a1e      	ldr	r2, [pc, #120]	; (8005464 <HAL_GPIO_Init+0x350>)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053f0:	4b1c      	ldr	r3, [pc, #112]	; (8005464 <HAL_GPIO_Init+0x350>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	4013      	ands	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005414:	4a13      	ldr	r2, [pc, #76]	; (8005464 <HAL_GPIO_Init+0x350>)
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	3301      	adds	r3, #1
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b0f      	cmp	r3, #15
 8005424:	f67f ae84 	bls.w	8005130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005428:	bf00      	nop
 800542a:	3724      	adds	r7, #36	; 0x24
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	40023800 	.word	0x40023800
 8005438:	40013800 	.word	0x40013800
 800543c:	40020000 	.word	0x40020000
 8005440:	40020400 	.word	0x40020400
 8005444:	40020800 	.word	0x40020800
 8005448:	40020c00 	.word	0x40020c00
 800544c:	40021000 	.word	0x40021000
 8005450:	40021400 	.word	0x40021400
 8005454:	40021800 	.word	0x40021800
 8005458:	40021c00 	.word	0x40021c00
 800545c:	40022000 	.word	0x40022000
 8005460:	40022400 	.word	0x40022400
 8005464:	40013c00 	.word	0x40013c00

08005468 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	e0d9      	b.n	8005638 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005484:	2201      	movs	r2, #1
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	4013      	ands	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	429a      	cmp	r2, r3
 800549c:	f040 80c9 	bne.w	8005632 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80054a0:	4a6a      	ldr	r2, [pc, #424]	; (800564c <HAL_GPIO_DeInit+0x1e4>)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	089b      	lsrs	r3, r3, #2
 80054a6:	3302      	adds	r3, #2
 80054a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	220f      	movs	r2, #15
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	4013      	ands	r3, r2
 80054c0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a62      	ldr	r2, [pc, #392]	; (8005650 <HAL_GPIO_DeInit+0x1e8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d037      	beq.n	800553a <HAL_GPIO_DeInit+0xd2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a61      	ldr	r2, [pc, #388]	; (8005654 <HAL_GPIO_DeInit+0x1ec>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d031      	beq.n	8005536 <HAL_GPIO_DeInit+0xce>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a60      	ldr	r2, [pc, #384]	; (8005658 <HAL_GPIO_DeInit+0x1f0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d02b      	beq.n	8005532 <HAL_GPIO_DeInit+0xca>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a5f      	ldr	r2, [pc, #380]	; (800565c <HAL_GPIO_DeInit+0x1f4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d025      	beq.n	800552e <HAL_GPIO_DeInit+0xc6>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a5e      	ldr	r2, [pc, #376]	; (8005660 <HAL_GPIO_DeInit+0x1f8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01f      	beq.n	800552a <HAL_GPIO_DeInit+0xc2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a5d      	ldr	r2, [pc, #372]	; (8005664 <HAL_GPIO_DeInit+0x1fc>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d019      	beq.n	8005526 <HAL_GPIO_DeInit+0xbe>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a5c      	ldr	r2, [pc, #368]	; (8005668 <HAL_GPIO_DeInit+0x200>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <HAL_GPIO_DeInit+0xba>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a5b      	ldr	r2, [pc, #364]	; (800566c <HAL_GPIO_DeInit+0x204>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00d      	beq.n	800551e <HAL_GPIO_DeInit+0xb6>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a5a      	ldr	r2, [pc, #360]	; (8005670 <HAL_GPIO_DeInit+0x208>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <HAL_GPIO_DeInit+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a59      	ldr	r2, [pc, #356]	; (8005674 <HAL_GPIO_DeInit+0x20c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d101      	bne.n	8005516 <HAL_GPIO_DeInit+0xae>
 8005512:	2309      	movs	r3, #9
 8005514:	e012      	b.n	800553c <HAL_GPIO_DeInit+0xd4>
 8005516:	230a      	movs	r3, #10
 8005518:	e010      	b.n	800553c <HAL_GPIO_DeInit+0xd4>
 800551a:	2308      	movs	r3, #8
 800551c:	e00e      	b.n	800553c <HAL_GPIO_DeInit+0xd4>
 800551e:	2307      	movs	r3, #7
 8005520:	e00c      	b.n	800553c <HAL_GPIO_DeInit+0xd4>
 8005522:	2306      	movs	r3, #6
 8005524:	e00a      	b.n	800553c <HAL_GPIO_DeInit+0xd4>
 8005526:	2305      	movs	r3, #5
 8005528:	e008      	b.n	800553c <HAL_GPIO_DeInit+0xd4>
 800552a:	2304      	movs	r3, #4
 800552c:	e006      	b.n	800553c <HAL_GPIO_DeInit+0xd4>
 800552e:	2303      	movs	r3, #3
 8005530:	e004      	b.n	800553c <HAL_GPIO_DeInit+0xd4>
 8005532:	2302      	movs	r3, #2
 8005534:	e002      	b.n	800553c <HAL_GPIO_DeInit+0xd4>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <HAL_GPIO_DeInit+0xd4>
 800553a:	2300      	movs	r3, #0
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	f002 0203 	and.w	r2, r2, #3
 8005542:	0092      	lsls	r2, r2, #2
 8005544:	4093      	lsls	r3, r2
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	429a      	cmp	r2, r3
 800554a:	d132      	bne.n	80055b2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800554c:	4b4a      	ldr	r3, [pc, #296]	; (8005678 <HAL_GPIO_DeInit+0x210>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	43db      	mvns	r3, r3
 8005554:	4948      	ldr	r1, [pc, #288]	; (8005678 <HAL_GPIO_DeInit+0x210>)
 8005556:	4013      	ands	r3, r2
 8005558:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800555a:	4b47      	ldr	r3, [pc, #284]	; (8005678 <HAL_GPIO_DeInit+0x210>)
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	43db      	mvns	r3, r3
 8005562:	4945      	ldr	r1, [pc, #276]	; (8005678 <HAL_GPIO_DeInit+0x210>)
 8005564:	4013      	ands	r3, r2
 8005566:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005568:	4b43      	ldr	r3, [pc, #268]	; (8005678 <HAL_GPIO_DeInit+0x210>)
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	43db      	mvns	r3, r3
 8005570:	4941      	ldr	r1, [pc, #260]	; (8005678 <HAL_GPIO_DeInit+0x210>)
 8005572:	4013      	ands	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005576:	4b40      	ldr	r3, [pc, #256]	; (8005678 <HAL_GPIO_DeInit+0x210>)
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	43db      	mvns	r3, r3
 800557e:	493e      	ldr	r1, [pc, #248]	; (8005678 <HAL_GPIO_DeInit+0x210>)
 8005580:	4013      	ands	r3, r2
 8005582:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	220f      	movs	r2, #15
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005594:	4a2d      	ldr	r2, [pc, #180]	; (800564c <HAL_GPIO_DeInit+0x1e4>)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	089b      	lsrs	r3, r3, #2
 800559a:	3302      	adds	r3, #2
 800559c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	43da      	mvns	r2, r3
 80055a4:	4829      	ldr	r0, [pc, #164]	; (800564c <HAL_GPIO_DeInit+0x1e4>)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	089b      	lsrs	r3, r3, #2
 80055aa:	400a      	ands	r2, r1
 80055ac:	3302      	adds	r3, #2
 80055ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	2103      	movs	r1, #3
 80055bc:	fa01 f303 	lsl.w	r3, r1, r3
 80055c0:	43db      	mvns	r3, r3
 80055c2:	401a      	ands	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	08da      	lsrs	r2, r3, #3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3208      	adds	r2, #8
 80055d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	220f      	movs	r2, #15
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43db      	mvns	r3, r3
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	08d2      	lsrs	r2, r2, #3
 80055e8:	4019      	ands	r1, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3208      	adds	r2, #8
 80055ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	2103      	movs	r1, #3
 80055fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005600:	43db      	mvns	r3, r3
 8005602:	401a      	ands	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	2101      	movs	r1, #1
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	fa01 f303 	lsl.w	r3, r1, r3
 8005614:	43db      	mvns	r3, r3
 8005616:	401a      	ands	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	2103      	movs	r1, #3
 8005626:	fa01 f303 	lsl.w	r3, r1, r3
 800562a:	43db      	mvns	r3, r3
 800562c:	401a      	ands	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	3301      	adds	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2b0f      	cmp	r3, #15
 800563c:	f67f af22 	bls.w	8005484 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	40013800 	.word	0x40013800
 8005650:	40020000 	.word	0x40020000
 8005654:	40020400 	.word	0x40020400
 8005658:	40020800 	.word	0x40020800
 800565c:	40020c00 	.word	0x40020c00
 8005660:	40021000 	.word	0x40021000
 8005664:	40021400 	.word	0x40021400
 8005668:	40021800 	.word	0x40021800
 800566c:	40021c00 	.word	0x40021c00
 8005670:	40022000 	.word	0x40022000
 8005674:	40022400 	.word	0x40022400
 8005678:	40013c00 	.word	0x40013c00

0800567c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	807b      	strh	r3, [r7, #2]
 8005688:	4613      	mov	r3, r2
 800568a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800568c:	787b      	ldrb	r3, [r7, #1]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005692:	887a      	ldrh	r2, [r7, #2]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005698:	e003      	b.n	80056a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800569a:	887b      	ldrh	r3, [r7, #2]
 800569c:	041a      	lsls	r2, r3, #16
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	619a      	str	r2, [r3, #24]
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e11f      	b.n	8005902 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fd f82e 	bl	8002738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2224      	movs	r2, #36	; 0x24
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005714:	f001 f99c 	bl	8006a50 <HAL_RCC_GetPCLK1Freq>
 8005718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4a7b      	ldr	r2, [pc, #492]	; (800590c <HAL_I2C_Init+0x25c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d807      	bhi.n	8005734 <HAL_I2C_Init+0x84>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a7a      	ldr	r2, [pc, #488]	; (8005910 <HAL_I2C_Init+0x260>)
 8005728:	4293      	cmp	r3, r2
 800572a:	bf94      	ite	ls
 800572c:	2301      	movls	r3, #1
 800572e:	2300      	movhi	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	e006      	b.n	8005742 <HAL_I2C_Init+0x92>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4a77      	ldr	r2, [pc, #476]	; (8005914 <HAL_I2C_Init+0x264>)
 8005738:	4293      	cmp	r3, r2
 800573a:	bf94      	ite	ls
 800573c:	2301      	movls	r3, #1
 800573e:	2300      	movhi	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e0db      	b.n	8005902 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4a72      	ldr	r2, [pc, #456]	; (8005918 <HAL_I2C_Init+0x268>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	0c9b      	lsrs	r3, r3, #18
 8005754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	4a64      	ldr	r2, [pc, #400]	; (800590c <HAL_I2C_Init+0x25c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d802      	bhi.n	8005784 <HAL_I2C_Init+0xd4>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	3301      	adds	r3, #1
 8005782:	e009      	b.n	8005798 <HAL_I2C_Init+0xe8>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	4a63      	ldr	r2, [pc, #396]	; (800591c <HAL_I2C_Init+0x26c>)
 8005790:	fba2 2303 	umull	r2, r3, r2, r3
 8005794:	099b      	lsrs	r3, r3, #6
 8005796:	3301      	adds	r3, #1
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	430b      	orrs	r3, r1
 800579e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	4956      	ldr	r1, [pc, #344]	; (800590c <HAL_I2C_Init+0x25c>)
 80057b4:	428b      	cmp	r3, r1
 80057b6:	d80d      	bhi.n	80057d4 <HAL_I2C_Init+0x124>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1e59      	subs	r1, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80057c6:	3301      	adds	r3, #1
 80057c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	bf38      	it	cc
 80057d0:	2304      	movcc	r3, #4
 80057d2:	e04f      	b.n	8005874 <HAL_I2C_Init+0x1c4>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d111      	bne.n	8005800 <HAL_I2C_Init+0x150>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	1e58      	subs	r0, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6859      	ldr	r1, [r3, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	440b      	add	r3, r1
 80057ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ee:	3301      	adds	r3, #1
 80057f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bf0c      	ite	eq
 80057f8:	2301      	moveq	r3, #1
 80057fa:	2300      	movne	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	e012      	b.n	8005826 <HAL_I2C_Init+0x176>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	1e58      	subs	r0, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6859      	ldr	r1, [r3, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	0099      	lsls	r1, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	fbb0 f3f3 	udiv	r3, r0, r3
 8005816:	3301      	adds	r3, #1
 8005818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800581c:	2b00      	cmp	r3, #0
 800581e:	bf0c      	ite	eq
 8005820:	2301      	moveq	r3, #1
 8005822:	2300      	movne	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_I2C_Init+0x17e>
 800582a:	2301      	movs	r3, #1
 800582c:	e022      	b.n	8005874 <HAL_I2C_Init+0x1c4>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10e      	bne.n	8005854 <HAL_I2C_Init+0x1a4>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	1e58      	subs	r0, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6859      	ldr	r1, [r3, #4]
 800583e:	460b      	mov	r3, r1
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	440b      	add	r3, r1
 8005844:	fbb0 f3f3 	udiv	r3, r0, r3
 8005848:	3301      	adds	r3, #1
 800584a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800584e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005852:	e00f      	b.n	8005874 <HAL_I2C_Init+0x1c4>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	1e58      	subs	r0, r3, #1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6859      	ldr	r1, [r3, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	0099      	lsls	r1, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	fbb0 f3f3 	udiv	r3, r0, r3
 800586a:	3301      	adds	r3, #1
 800586c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	6809      	ldr	r1, [r1, #0]
 8005878:	4313      	orrs	r3, r2
 800587a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69da      	ldr	r2, [r3, #28]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80058a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6911      	ldr	r1, [r2, #16]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	68d2      	ldr	r2, [r2, #12]
 80058ae:	4311      	orrs	r1, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	000186a0 	.word	0x000186a0
 8005910:	001e847f 	.word	0x001e847f
 8005914:	003d08ff 	.word	0x003d08ff
 8005918:	431bde83 	.word	0x431bde83
 800591c:	10624dd3 	.word	0x10624dd3

08005920 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b20      	cmp	r3, #32
 8005934:	d129      	bne.n	800598a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2224      	movs	r2, #36	; 0x24
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0210 	bic.w	r2, r2, #16
 800595c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0201 	orr.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	e000      	b.n	800598c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800598a:	2302      	movs	r3, #2
  }
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d12a      	bne.n	8005a08 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2224      	movs	r2, #36	; 0x24
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80059d2:	89fb      	ldrh	r3, [r7, #14]
 80059d4:	f023 030f 	bic.w	r3, r3, #15
 80059d8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	b29a      	uxth	r2, r3
 80059de:	89fb      	ldrh	r3, [r7, #14]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	89fa      	ldrh	r2, [r7, #14]
 80059ea:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	e000      	b.n	8005a0a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005a08:	2302      	movs	r3, #2
  }
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
	...

08005a18 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e0bf      	b.n	8005baa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fc fee4 	bl	800280c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005a5a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6999      	ldr	r1, [r3, #24]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a70:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6899      	ldr	r1, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b4a      	ldr	r3, [pc, #296]	; (8005bb4 <HAL_LTDC_Init+0x19c>)
 8005a8c:	400b      	ands	r3, r1
 8005a8e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	041b      	lsls	r3, r3, #16
 8005a96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6899      	ldr	r1, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68d9      	ldr	r1, [r3, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	4b3e      	ldr	r3, [pc, #248]	; (8005bb4 <HAL_LTDC_Init+0x19c>)
 8005aba:	400b      	ands	r3, r1
 8005abc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68d9      	ldr	r1, [r3, #12]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a1a      	ldr	r2, [r3, #32]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6919      	ldr	r1, [r3, #16]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b33      	ldr	r3, [pc, #204]	; (8005bb4 <HAL_LTDC_Init+0x19c>)
 8005ae8:	400b      	ands	r3, r1
 8005aea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	041b      	lsls	r3, r3, #16
 8005af2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6919      	ldr	r1, [r3, #16]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	431a      	orrs	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6959      	ldr	r1, [r3, #20]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <HAL_LTDC_Init+0x19c>)
 8005b16:	400b      	ands	r3, r1
 8005b18:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	041b      	lsls	r3, r3, #16
 8005b20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6959      	ldr	r1, [r3, #20]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005b48:	041b      	lsls	r3, r3, #16
 8005b4a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0206 	orr.w	r2, r2, #6
 8005b86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	f000f800 	.word	0xf000f800

08005bb8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d023      	beq.n	8005c22 <HAL_LTDC_IRQHandler+0x6a>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01e      	beq.n	8005c22 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0204 	bic.w	r2, r2, #4
 8005bf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2204      	movs	r2, #4
 8005bfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c02:	f043 0201 	orr.w	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2204      	movs	r2, #4
 8005c10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f86f 	bl	8005d00 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d023      	beq.n	8005c74 <HAL_LTDC_IRQHandler+0xbc>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01e      	beq.n	8005c74 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0202 	bic.w	r2, r2, #2
 8005c44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c54:	f043 0202 	orr.w	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2204      	movs	r2, #4
 8005c62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f846 	bl	8005d00 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01b      	beq.n	8005cb6 <HAL_LTDC_IRQHandler+0xfe>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d016      	beq.n	8005cb6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f82f 	bl	8005d14 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01b      	beq.n	8005cf8 <HAL_LTDC_IRQHandler+0x140>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d016      	beq.n	8005cf8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0208 	bic.w	r2, r2, #8
 8005cd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2208      	movs	r2, #8
 8005ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f818 	bl	8005d28 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d3c:	b5b0      	push	{r4, r5, r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d101      	bne.n	8005d56 <HAL_LTDC_ConfigLayer+0x1a>
 8005d52:	2302      	movs	r3, #2
 8005d54:	e02c      	b.n	8005db0 <HAL_LTDC_ConfigLayer+0x74>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2202      	movs	r2, #2
 8005d62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2134      	movs	r1, #52	; 0x34
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	4413      	add	r3, r2
 8005d72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	4614      	mov	r4, r2
 8005d7a:	461d      	mov	r5, r3
 8005d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f83b 	bl	8005e0c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bdb0      	pop	{r4, r5, r7, pc}

08005db8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d101      	bne.n	8005dce <HAL_LTDC_EnableDither+0x16>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	e016      	b.n	8005dfc <HAL_LTDC_EnableDither+0x44>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005dde:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <HAL_LTDC_EnableDither+0x50>)
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	4a09      	ldr	r2, [pc, #36]	; (8005e08 <HAL_LTDC_EnableDither+0x50>)
 8005de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40016800 	.word	0x40016800

08005e0c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b089      	sub	sp, #36	; 0x24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	0c1b      	lsrs	r3, r3, #16
 8005e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e28:	4413      	add	r3, r2
 8005e2a:	041b      	lsls	r3, r3, #16
 8005e2c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	01db      	lsls	r3, r3, #7
 8005e38:	4413      	add	r3, r2
 8005e3a:	3384      	adds	r3, #132	; 0x84
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	6812      	ldr	r2, [r2, #0]
 8005e42:	4611      	mov	r1, r2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	01d2      	lsls	r2, r2, #7
 8005e48:	440a      	add	r2, r1
 8005e4a:	3284      	adds	r2, #132	; 0x84
 8005e4c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e50:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	0c1b      	lsrs	r3, r3, #16
 8005e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e62:	4413      	add	r3, r2
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	01db      	lsls	r3, r3, #7
 8005e70:	440b      	add	r3, r1
 8005e72:	3384      	adds	r3, #132	; 0x84
 8005e74:	4619      	mov	r1, r3
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e8a:	4413      	add	r3, r2
 8005e8c:	041b      	lsls	r3, r3, #16
 8005e8e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	01db      	lsls	r3, r3, #7
 8005e9a:	4413      	add	r3, r2
 8005e9c:	3384      	adds	r3, #132	; 0x84
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	01d2      	lsls	r2, r2, #7
 8005eaa:	440a      	add	r2, r1
 8005eac:	3284      	adds	r2, #132	; 0x84
 8005eae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005eb2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ec2:	4413      	add	r3, r2
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	01db      	lsls	r3, r3, #7
 8005ed0:	440b      	add	r3, r1
 8005ed2:	3384      	adds	r3, #132	; 0x84
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	01db      	lsls	r3, r3, #7
 8005ee6:	4413      	add	r3, r2
 8005ee8:	3384      	adds	r3, #132	; 0x84
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	01d2      	lsls	r2, r2, #7
 8005ef6:	440a      	add	r2, r1
 8005ef8:	3284      	adds	r2, #132	; 0x84
 8005efa:	f023 0307 	bic.w	r3, r3, #7
 8005efe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	461a      	mov	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	01db      	lsls	r3, r3, #7
 8005f0a:	4413      	add	r3, r2
 8005f0c:	3384      	adds	r3, #132	; 0x84
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	061b      	lsls	r3, r3, #24
 8005f30:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	01db      	lsls	r3, r3, #7
 8005f3c:	4413      	add	r3, r2
 8005f3e:	3384      	adds	r3, #132	; 0x84
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	01db      	lsls	r3, r3, #7
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3384      	adds	r3, #132	; 0x84
 8005f50:	461a      	mov	r2, r3
 8005f52:	2300      	movs	r3, #0
 8005f54:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	431a      	orrs	r2, r3
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	431a      	orrs	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	01db      	lsls	r3, r3, #7
 8005f70:	440b      	add	r3, r1
 8005f72:	3384      	adds	r3, #132	; 0x84
 8005f74:	4619      	mov	r1, r3
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	461a      	mov	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	01db      	lsls	r3, r3, #7
 8005f86:	4413      	add	r3, r2
 8005f88:	3384      	adds	r3, #132	; 0x84
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	4611      	mov	r1, r2
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	01d2      	lsls	r2, r2, #7
 8005f96:	440a      	add	r2, r1
 8005f98:	3284      	adds	r2, #132	; 0x84
 8005f9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	01db      	lsls	r3, r3, #7
 8005faa:	4413      	add	r3, r2
 8005fac:	3384      	adds	r3, #132	; 0x84
 8005fae:	461a      	mov	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	01db      	lsls	r3, r3, #7
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3384      	adds	r3, #132	; 0x84
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	4611      	mov	r1, r2
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	01d2      	lsls	r2, r2, #7
 8005fd0:	440a      	add	r2, r1
 8005fd2:	3284      	adds	r2, #132	; 0x84
 8005fd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005fd8:	f023 0307 	bic.w	r3, r3, #7
 8005fdc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	69da      	ldr	r2, [r3, #28]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	68f9      	ldr	r1, [r7, #12]
 8005fe8:	6809      	ldr	r1, [r1, #0]
 8005fea:	4608      	mov	r0, r1
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	01c9      	lsls	r1, r1, #7
 8005ff0:	4401      	add	r1, r0
 8005ff2:	3184      	adds	r1, #132	; 0x84
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	01db      	lsls	r3, r3, #7
 8006002:	4413      	add	r3, r2
 8006004:	3384      	adds	r3, #132	; 0x84
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	01db      	lsls	r3, r3, #7
 8006012:	4413      	add	r3, r2
 8006014:	3384      	adds	r3, #132	; 0x84
 8006016:	461a      	mov	r2, r3
 8006018:	2300      	movs	r3, #0
 800601a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	01db      	lsls	r3, r3, #7
 8006026:	4413      	add	r3, r2
 8006028:	3384      	adds	r3, #132	; 0x84
 800602a:	461a      	mov	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d102      	bne.n	8006040 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800603a:	2304      	movs	r3, #4
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	e01b      	b.n	8006078 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d102      	bne.n	800604e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006048:	2303      	movs	r3, #3
 800604a:	61fb      	str	r3, [r7, #28]
 800604c:	e014      	b.n	8006078 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b04      	cmp	r3, #4
 8006054:	d00b      	beq.n	800606e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800605a:	2b02      	cmp	r3, #2
 800605c:	d007      	beq.n	800606e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006062:	2b03      	cmp	r3, #3
 8006064:	d003      	beq.n	800606e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800606a:	2b07      	cmp	r3, #7
 800606c:	d102      	bne.n	8006074 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800606e:	2302      	movs	r3, #2
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	e001      	b.n	8006078 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006074:	2301      	movs	r3, #1
 8006076:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	01db      	lsls	r3, r3, #7
 8006082:	4413      	add	r3, r2
 8006084:	3384      	adds	r3, #132	; 0x84
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	4611      	mov	r1, r2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	01d2      	lsls	r2, r2, #7
 8006092:	440a      	add	r2, r1
 8006094:	3284      	adds	r2, #132	; 0x84
 8006096:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800609a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	fb02 f303 	mul.w	r3, r2, r3
 80060a6:	041a      	lsls	r2, r3, #16
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6859      	ldr	r1, [r3, #4]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	1acb      	subs	r3, r1, r3
 80060b2:	69f9      	ldr	r1, [r7, #28]
 80060b4:	fb01 f303 	mul.w	r3, r1, r3
 80060b8:	3303      	adds	r3, #3
 80060ba:	68f9      	ldr	r1, [r7, #12]
 80060bc:	6809      	ldr	r1, [r1, #0]
 80060be:	4608      	mov	r0, r1
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	01c9      	lsls	r1, r1, #7
 80060c4:	4401      	add	r1, r0
 80060c6:	3184      	adds	r1, #132	; 0x84
 80060c8:	4313      	orrs	r3, r2
 80060ca:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	01db      	lsls	r3, r3, #7
 80060d6:	4413      	add	r3, r2
 80060d8:	3384      	adds	r3, #132	; 0x84
 80060da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	4611      	mov	r1, r2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	01d2      	lsls	r2, r2, #7
 80060e6:	440a      	add	r2, r1
 80060e8:	3284      	adds	r2, #132	; 0x84
 80060ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060ee:	f023 0307 	bic.w	r3, r3, #7
 80060f2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	01db      	lsls	r3, r3, #7
 80060fe:	4413      	add	r3, r2
 8006100:	3384      	adds	r3, #132	; 0x84
 8006102:	461a      	mov	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	01db      	lsls	r3, r3, #7
 8006114:	4413      	add	r3, r2
 8006116:	3384      	adds	r3, #132	; 0x84
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	4611      	mov	r1, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	01d2      	lsls	r2, r2, #7
 8006124:	440a      	add	r2, r1
 8006126:	3284      	adds	r2, #132	; 0x84
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	6013      	str	r3, [r2, #0]
}
 800612e:	bf00      	nop
 8006130:	3724      	adds	r7, #36	; 0x24
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
	...

0800613c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006146:	2300      	movs	r3, #0
 8006148:	603b      	str	r3, [r7, #0]
 800614a:	4b20      	ldr	r3, [pc, #128]	; (80061cc <HAL_PWREx_EnableOverDrive+0x90>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	4a1f      	ldr	r2, [pc, #124]	; (80061cc <HAL_PWREx_EnableOverDrive+0x90>)
 8006150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006154:	6413      	str	r3, [r2, #64]	; 0x40
 8006156:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <HAL_PWREx_EnableOverDrive+0x90>)
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006162:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8006164:	2201      	movs	r2, #1
 8006166:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006168:	f7fe f950 	bl	800440c <HAL_GetTick>
 800616c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800616e:	e009      	b.n	8006184 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006170:	f7fe f94c 	bl	800440c <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800617e:	d901      	bls.n	8006184 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e01f      	b.n	80061c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006184:	4b13      	ldr	r3, [pc, #76]	; (80061d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800618c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006190:	d1ee      	bne.n	8006170 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006192:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006194:	2201      	movs	r2, #1
 8006196:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006198:	f7fe f938 	bl	800440c <HAL_GetTick>
 800619c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800619e:	e009      	b.n	80061b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80061a0:	f7fe f934 	bl	800440c <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061ae:	d901      	bls.n	80061b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e007      	b.n	80061c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80061b4:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061c0:	d1ee      	bne.n	80061a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40023800 	.word	0x40023800
 80061d0:	420e0040 	.word	0x420e0040
 80061d4:	40007000 	.word	0x40007000
 80061d8:	420e0044 	.word	0x420e0044

080061dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e25b      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d075      	beq.n	80062e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061fa:	4ba3      	ldr	r3, [pc, #652]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b04      	cmp	r3, #4
 8006204:	d00c      	beq.n	8006220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006206:	4ba0      	ldr	r3, [pc, #640]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800620e:	2b08      	cmp	r3, #8
 8006210:	d112      	bne.n	8006238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006212:	4b9d      	ldr	r3, [pc, #628]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800621e:	d10b      	bne.n	8006238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006220:	4b99      	ldr	r3, [pc, #612]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d05b      	beq.n	80062e4 <HAL_RCC_OscConfig+0x108>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d157      	bne.n	80062e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e236      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006240:	d106      	bne.n	8006250 <HAL_RCC_OscConfig+0x74>
 8006242:	4b91      	ldr	r3, [pc, #580]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a90      	ldr	r2, [pc, #576]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	e01d      	b.n	800628c <HAL_RCC_OscConfig+0xb0>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006258:	d10c      	bne.n	8006274 <HAL_RCC_OscConfig+0x98>
 800625a:	4b8b      	ldr	r3, [pc, #556]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a8a      	ldr	r2, [pc, #552]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	4b88      	ldr	r3, [pc, #544]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a87      	ldr	r2, [pc, #540]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 800626c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e00b      	b.n	800628c <HAL_RCC_OscConfig+0xb0>
 8006274:	4b84      	ldr	r3, [pc, #528]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a83      	ldr	r2, [pc, #524]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 800627a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	4b81      	ldr	r3, [pc, #516]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a80      	ldr	r2, [pc, #512]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800628a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d013      	beq.n	80062bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006294:	f7fe f8ba 	bl	800440c <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800629c:	f7fe f8b6 	bl	800440c <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b64      	cmp	r3, #100	; 0x64
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e1fb      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ae:	4b76      	ldr	r3, [pc, #472]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0f0      	beq.n	800629c <HAL_RCC_OscConfig+0xc0>
 80062ba:	e014      	b.n	80062e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062bc:	f7fe f8a6 	bl	800440c <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062c4:	f7fe f8a2 	bl	800440c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b64      	cmp	r3, #100	; 0x64
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e1e7      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062d6:	4b6c      	ldr	r3, [pc, #432]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f0      	bne.n	80062c4 <HAL_RCC_OscConfig+0xe8>
 80062e2:	e000      	b.n	80062e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d063      	beq.n	80063ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062f2:	4b65      	ldr	r3, [pc, #404]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 030c 	and.w	r3, r3, #12
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062fe:	4b62      	ldr	r3, [pc, #392]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006306:	2b08      	cmp	r3, #8
 8006308:	d11c      	bne.n	8006344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800630a:	4b5f      	ldr	r3, [pc, #380]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d116      	bne.n	8006344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006316:	4b5c      	ldr	r3, [pc, #368]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <HAL_RCC_OscConfig+0x152>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d001      	beq.n	800632e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e1bb      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632e:	4b56      	ldr	r3, [pc, #344]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	4952      	ldr	r1, [pc, #328]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 800633e:	4313      	orrs	r3, r2
 8006340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006342:	e03a      	b.n	80063ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d020      	beq.n	800638e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800634c:	4b4f      	ldr	r3, [pc, #316]	; (800648c <HAL_RCC_OscConfig+0x2b0>)
 800634e:	2201      	movs	r2, #1
 8006350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006352:	f7fe f85b 	bl	800440c <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006358:	e008      	b.n	800636c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800635a:	f7fe f857 	bl	800440c <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e19c      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636c:	4b46      	ldr	r3, [pc, #280]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0f0      	beq.n	800635a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006378:	4b43      	ldr	r3, [pc, #268]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	4940      	ldr	r1, [pc, #256]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006388:	4313      	orrs	r3, r2
 800638a:	600b      	str	r3, [r1, #0]
 800638c:	e015      	b.n	80063ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800638e:	4b3f      	ldr	r3, [pc, #252]	; (800648c <HAL_RCC_OscConfig+0x2b0>)
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006394:	f7fe f83a 	bl	800440c <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800639c:	f7fe f836 	bl	800440c <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e17b      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ae:	4b36      	ldr	r3, [pc, #216]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f0      	bne.n	800639c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d030      	beq.n	8006428 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d016      	beq.n	80063fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ce:	4b30      	ldr	r3, [pc, #192]	; (8006490 <HAL_RCC_OscConfig+0x2b4>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d4:	f7fe f81a 	bl	800440c <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063dc:	f7fe f816 	bl	800440c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e15b      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ee:	4b26      	ldr	r3, [pc, #152]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 80063f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0x200>
 80063fa:	e015      	b.n	8006428 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063fc:	4b24      	ldr	r3, [pc, #144]	; (8006490 <HAL_RCC_OscConfig+0x2b4>)
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006402:	f7fe f803 	bl	800440c <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006408:	e008      	b.n	800641c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800640a:	f7fd ffff 	bl	800440c <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e144      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800641c:	4b1a      	ldr	r3, [pc, #104]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 800641e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1f0      	bne.n	800640a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80a0 	beq.w	8006576 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006436:	2300      	movs	r3, #0
 8006438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800643a:	4b13      	ldr	r3, [pc, #76]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10f      	bne.n	8006466 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006446:	2300      	movs	r3, #0
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	4a0e      	ldr	r2, [pc, #56]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006454:	6413      	str	r3, [r2, #64]	; 0x40
 8006456:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <HAL_RCC_OscConfig+0x2ac>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800645e:	60bb      	str	r3, [r7, #8]
 8006460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006462:	2301      	movs	r3, #1
 8006464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006466:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <HAL_RCC_OscConfig+0x2b8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646e:	2b00      	cmp	r3, #0
 8006470:	d121      	bne.n	80064b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006472:	4b08      	ldr	r3, [pc, #32]	; (8006494 <HAL_RCC_OscConfig+0x2b8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a07      	ldr	r2, [pc, #28]	; (8006494 <HAL_RCC_OscConfig+0x2b8>)
 8006478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800647e:	f7fd ffc5 	bl	800440c <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006484:	e011      	b.n	80064aa <HAL_RCC_OscConfig+0x2ce>
 8006486:	bf00      	nop
 8006488:	40023800 	.word	0x40023800
 800648c:	42470000 	.word	0x42470000
 8006490:	42470e80 	.word	0x42470e80
 8006494:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006498:	f7fd ffb8 	bl	800440c <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e0fd      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064aa:	4b81      	ldr	r3, [pc, #516]	; (80066b0 <HAL_RCC_OscConfig+0x4d4>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0f0      	beq.n	8006498 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d106      	bne.n	80064cc <HAL_RCC_OscConfig+0x2f0>
 80064be:	4b7d      	ldr	r3, [pc, #500]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c2:	4a7c      	ldr	r2, [pc, #496]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 80064c4:	f043 0301 	orr.w	r3, r3, #1
 80064c8:	6713      	str	r3, [r2, #112]	; 0x70
 80064ca:	e01c      	b.n	8006506 <HAL_RCC_OscConfig+0x32a>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b05      	cmp	r3, #5
 80064d2:	d10c      	bne.n	80064ee <HAL_RCC_OscConfig+0x312>
 80064d4:	4b77      	ldr	r3, [pc, #476]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 80064d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d8:	4a76      	ldr	r2, [pc, #472]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 80064da:	f043 0304 	orr.w	r3, r3, #4
 80064de:	6713      	str	r3, [r2, #112]	; 0x70
 80064e0:	4b74      	ldr	r3, [pc, #464]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 80064e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e4:	4a73      	ldr	r2, [pc, #460]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	6713      	str	r3, [r2, #112]	; 0x70
 80064ec:	e00b      	b.n	8006506 <HAL_RCC_OscConfig+0x32a>
 80064ee:	4b71      	ldr	r3, [pc, #452]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 80064f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f2:	4a70      	ldr	r2, [pc, #448]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 80064f4:	f023 0301 	bic.w	r3, r3, #1
 80064f8:	6713      	str	r3, [r2, #112]	; 0x70
 80064fa:	4b6e      	ldr	r3, [pc, #440]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 80064fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fe:	4a6d      	ldr	r2, [pc, #436]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 8006500:	f023 0304 	bic.w	r3, r3, #4
 8006504:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d015      	beq.n	800653a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800650e:	f7fd ff7d 	bl	800440c <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006514:	e00a      	b.n	800652c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006516:	f7fd ff79 	bl	800440c <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	f241 3288 	movw	r2, #5000	; 0x1388
 8006524:	4293      	cmp	r3, r2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e0bc      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800652c:	4b61      	ldr	r3, [pc, #388]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 800652e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0ee      	beq.n	8006516 <HAL_RCC_OscConfig+0x33a>
 8006538:	e014      	b.n	8006564 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800653a:	f7fd ff67 	bl	800440c <HAL_GetTick>
 800653e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006540:	e00a      	b.n	8006558 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006542:	f7fd ff63 	bl	800440c <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006550:	4293      	cmp	r3, r2
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e0a6      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006558:	4b56      	ldr	r3, [pc, #344]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1ee      	bne.n	8006542 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d105      	bne.n	8006576 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800656a:	4b52      	ldr	r3, [pc, #328]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	4a51      	ldr	r2, [pc, #324]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 8006570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006574:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8092 	beq.w	80066a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006580:	4b4c      	ldr	r3, [pc, #304]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 030c 	and.w	r3, r3, #12
 8006588:	2b08      	cmp	r3, #8
 800658a:	d05c      	beq.n	8006646 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d141      	bne.n	8006618 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006594:	4b48      	ldr	r3, [pc, #288]	; (80066b8 <HAL_RCC_OscConfig+0x4dc>)
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800659a:	f7fd ff37 	bl	800440c <HAL_GetTick>
 800659e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065a0:	e008      	b.n	80065b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065a2:	f7fd ff33 	bl	800440c <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e078      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b4:	4b3f      	ldr	r3, [pc, #252]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1f0      	bne.n	80065a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	019b      	lsls	r3, r3, #6
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d6:	085b      	lsrs	r3, r3, #1
 80065d8:	3b01      	subs	r3, #1
 80065da:	041b      	lsls	r3, r3, #16
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e2:	061b      	lsls	r3, r3, #24
 80065e4:	4933      	ldr	r1, [pc, #204]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065ea:	4b33      	ldr	r3, [pc, #204]	; (80066b8 <HAL_RCC_OscConfig+0x4dc>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f0:	f7fd ff0c 	bl	800440c <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f8:	f7fd ff08 	bl	800440c <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e04d      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800660a:	4b2a      	ldr	r3, [pc, #168]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0f0      	beq.n	80065f8 <HAL_RCC_OscConfig+0x41c>
 8006616:	e045      	b.n	80066a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006618:	4b27      	ldr	r3, [pc, #156]	; (80066b8 <HAL_RCC_OscConfig+0x4dc>)
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800661e:	f7fd fef5 	bl	800440c <HAL_GetTick>
 8006622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006624:	e008      	b.n	8006638 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006626:	f7fd fef1 	bl	800440c <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e036      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006638:	4b1e      	ldr	r3, [pc, #120]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1f0      	bne.n	8006626 <HAL_RCC_OscConfig+0x44a>
 8006644:	e02e      	b.n	80066a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d101      	bne.n	8006652 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e029      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006652:	4b18      	ldr	r3, [pc, #96]	; (80066b4 <HAL_RCC_OscConfig+0x4d8>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	429a      	cmp	r2, r3
 8006664:	d11c      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006670:	429a      	cmp	r2, r3
 8006672:	d115      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800667a:	4013      	ands	r3, r2
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006680:	4293      	cmp	r3, r2
 8006682:	d10d      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800668e:	429a      	cmp	r2, r3
 8006690:	d106      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d001      	beq.n	80066a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40007000 	.word	0x40007000
 80066b4:	40023800 	.word	0x40023800
 80066b8:	42470060 	.word	0x42470060

080066bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0cc      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066d0:	4b68      	ldr	r3, [pc, #416]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d90c      	bls.n	80066f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066de:	4b65      	ldr	r3, [pc, #404]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e6:	4b63      	ldr	r3, [pc, #396]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d001      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0b8      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d020      	beq.n	8006746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d005      	beq.n	800671c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006710:	4b59      	ldr	r3, [pc, #356]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	4a58      	ldr	r2, [pc, #352]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800671a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d005      	beq.n	8006734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006728:	4b53      	ldr	r3, [pc, #332]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	4a52      	ldr	r2, [pc, #328]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006734:	4b50      	ldr	r3, [pc, #320]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	494d      	ldr	r1, [pc, #308]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006742:	4313      	orrs	r3, r2
 8006744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d044      	beq.n	80067dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d107      	bne.n	800676a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800675a:	4b47      	ldr	r3, [pc, #284]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d119      	bne.n	800679a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e07f      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d003      	beq.n	800677a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006776:	2b03      	cmp	r3, #3
 8006778:	d107      	bne.n	800678a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800677a:	4b3f      	ldr	r3, [pc, #252]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d109      	bne.n	800679a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e06f      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800678a:	4b3b      	ldr	r3, [pc, #236]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e067      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800679a:	4b37      	ldr	r3, [pc, #220]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f023 0203 	bic.w	r2, r3, #3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4934      	ldr	r1, [pc, #208]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067ac:	f7fd fe2e 	bl	800440c <HAL_GetTick>
 80067b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b2:	e00a      	b.n	80067ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b4:	f7fd fe2a 	bl	800440c <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e04f      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ca:	4b2b      	ldr	r3, [pc, #172]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 020c 	and.w	r2, r3, #12
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	429a      	cmp	r2, r3
 80067da:	d1eb      	bne.n	80067b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067dc:	4b25      	ldr	r3, [pc, #148]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d20c      	bcs.n	8006804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ea:	4b22      	ldr	r3, [pc, #136]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f2:	4b20      	ldr	r3, [pc, #128]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d001      	beq.n	8006804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e032      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d008      	beq.n	8006822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006810:	4b19      	ldr	r3, [pc, #100]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	4916      	ldr	r1, [pc, #88]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	4313      	orrs	r3, r2
 8006820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800682e:	4b12      	ldr	r3, [pc, #72]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	490e      	ldr	r1, [pc, #56]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	4313      	orrs	r3, r2
 8006840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006842:	f000 f821 	bl	8006888 <HAL_RCC_GetSysClockFreq>
 8006846:	4601      	mov	r1, r0
 8006848:	4b0b      	ldr	r3, [pc, #44]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	091b      	lsrs	r3, r3, #4
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	4a0a      	ldr	r2, [pc, #40]	; (800687c <HAL_RCC_ClockConfig+0x1c0>)
 8006854:	5cd3      	ldrb	r3, [r2, r3]
 8006856:	fa21 f303 	lsr.w	r3, r1, r3
 800685a:	4a09      	ldr	r2, [pc, #36]	; (8006880 <HAL_RCC_ClockConfig+0x1c4>)
 800685c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800685e:	4b09      	ldr	r3, [pc, #36]	; (8006884 <HAL_RCC_ClockConfig+0x1c8>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4618      	mov	r0, r3
 8006864:	f7fc fa54 	bl	8002d10 <HAL_InitTick>

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	40023c00 	.word	0x40023c00
 8006878:	40023800 	.word	0x40023800
 800687c:	0800ce18 	.word	0x0800ce18
 8006880:	20000008 	.word	0x20000008
 8006884:	2000005c 	.word	0x2000005c

08006888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	2300      	movs	r3, #0
 8006898:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800689e:	4b63      	ldr	r3, [pc, #396]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f003 030c 	and.w	r3, r3, #12
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d007      	beq.n	80068ba <HAL_RCC_GetSysClockFreq+0x32>
 80068aa:	2b08      	cmp	r3, #8
 80068ac:	d008      	beq.n	80068c0 <HAL_RCC_GetSysClockFreq+0x38>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f040 80b4 	bne.w	8006a1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068b4:	4b5e      	ldr	r3, [pc, #376]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80068b6:	60bb      	str	r3, [r7, #8]
       break;
 80068b8:	e0b3      	b.n	8006a22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ba:	4b5e      	ldr	r3, [pc, #376]	; (8006a34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80068bc:	60bb      	str	r3, [r7, #8]
      break;
 80068be:	e0b0      	b.n	8006a22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068c0:	4b5a      	ldr	r3, [pc, #360]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068ca:	4b58      	ldr	r3, [pc, #352]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d04a      	beq.n	800696c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068d6:	4b55      	ldr	r3, [pc, #340]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	099b      	lsrs	r3, r3, #6
 80068dc:	f04f 0400 	mov.w	r4, #0
 80068e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	ea03 0501 	and.w	r5, r3, r1
 80068ec:	ea04 0602 	and.w	r6, r4, r2
 80068f0:	4629      	mov	r1, r5
 80068f2:	4632      	mov	r2, r6
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	f04f 0400 	mov.w	r4, #0
 80068fc:	0154      	lsls	r4, r2, #5
 80068fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006902:	014b      	lsls	r3, r1, #5
 8006904:	4619      	mov	r1, r3
 8006906:	4622      	mov	r2, r4
 8006908:	1b49      	subs	r1, r1, r5
 800690a:	eb62 0206 	sbc.w	r2, r2, r6
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	f04f 0400 	mov.w	r4, #0
 8006916:	0194      	lsls	r4, r2, #6
 8006918:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800691c:	018b      	lsls	r3, r1, #6
 800691e:	1a5b      	subs	r3, r3, r1
 8006920:	eb64 0402 	sbc.w	r4, r4, r2
 8006924:	f04f 0100 	mov.w	r1, #0
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	00e2      	lsls	r2, r4, #3
 800692e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006932:	00d9      	lsls	r1, r3, #3
 8006934:	460b      	mov	r3, r1
 8006936:	4614      	mov	r4, r2
 8006938:	195b      	adds	r3, r3, r5
 800693a:	eb44 0406 	adc.w	r4, r4, r6
 800693e:	f04f 0100 	mov.w	r1, #0
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	0262      	lsls	r2, r4, #9
 8006948:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800694c:	0259      	lsls	r1, r3, #9
 800694e:	460b      	mov	r3, r1
 8006950:	4614      	mov	r4, r2
 8006952:	4618      	mov	r0, r3
 8006954:	4621      	mov	r1, r4
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f04f 0400 	mov.w	r4, #0
 800695c:	461a      	mov	r2, r3
 800695e:	4623      	mov	r3, r4
 8006960:	f7fa f914 	bl	8000b8c <__aeabi_uldivmod>
 8006964:	4603      	mov	r3, r0
 8006966:	460c      	mov	r4, r1
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	e049      	b.n	8006a00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800696c:	4b2f      	ldr	r3, [pc, #188]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	099b      	lsrs	r3, r3, #6
 8006972:	f04f 0400 	mov.w	r4, #0
 8006976:	f240 11ff 	movw	r1, #511	; 0x1ff
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	ea03 0501 	and.w	r5, r3, r1
 8006982:	ea04 0602 	and.w	r6, r4, r2
 8006986:	4629      	mov	r1, r5
 8006988:	4632      	mov	r2, r6
 800698a:	f04f 0300 	mov.w	r3, #0
 800698e:	f04f 0400 	mov.w	r4, #0
 8006992:	0154      	lsls	r4, r2, #5
 8006994:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006998:	014b      	lsls	r3, r1, #5
 800699a:	4619      	mov	r1, r3
 800699c:	4622      	mov	r2, r4
 800699e:	1b49      	subs	r1, r1, r5
 80069a0:	eb62 0206 	sbc.w	r2, r2, r6
 80069a4:	f04f 0300 	mov.w	r3, #0
 80069a8:	f04f 0400 	mov.w	r4, #0
 80069ac:	0194      	lsls	r4, r2, #6
 80069ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80069b2:	018b      	lsls	r3, r1, #6
 80069b4:	1a5b      	subs	r3, r3, r1
 80069b6:	eb64 0402 	sbc.w	r4, r4, r2
 80069ba:	f04f 0100 	mov.w	r1, #0
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	00e2      	lsls	r2, r4, #3
 80069c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80069c8:	00d9      	lsls	r1, r3, #3
 80069ca:	460b      	mov	r3, r1
 80069cc:	4614      	mov	r4, r2
 80069ce:	195b      	adds	r3, r3, r5
 80069d0:	eb44 0406 	adc.w	r4, r4, r6
 80069d4:	f04f 0100 	mov.w	r1, #0
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	02a2      	lsls	r2, r4, #10
 80069de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80069e2:	0299      	lsls	r1, r3, #10
 80069e4:	460b      	mov	r3, r1
 80069e6:	4614      	mov	r4, r2
 80069e8:	4618      	mov	r0, r3
 80069ea:	4621      	mov	r1, r4
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f04f 0400 	mov.w	r4, #0
 80069f2:	461a      	mov	r2, r3
 80069f4:	4623      	mov	r3, r4
 80069f6:	f7fa f8c9 	bl	8000b8c <__aeabi_uldivmod>
 80069fa:	4603      	mov	r3, r0
 80069fc:	460c      	mov	r4, r1
 80069fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a00:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	0c1b      	lsrs	r3, r3, #16
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a18:	60bb      	str	r3, [r7, #8]
      break;
 8006a1a:	e002      	b.n	8006a22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a1c:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006a1e:	60bb      	str	r3, [r7, #8]
      break;
 8006a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a22:	68bb      	ldr	r3, [r7, #8]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a2c:	40023800 	.word	0x40023800
 8006a30:	00f42400 	.word	0x00f42400
 8006a34:	007a1200 	.word	0x007a1200

08006a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a3c:	4b03      	ldr	r3, [pc, #12]	; (8006a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	20000008 	.word	0x20000008

08006a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a54:	f7ff fff0 	bl	8006a38 <HAL_RCC_GetHCLKFreq>
 8006a58:	4601      	mov	r1, r0
 8006a5a:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	0a9b      	lsrs	r3, r3, #10
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	4a03      	ldr	r2, [pc, #12]	; (8006a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a66:	5cd3      	ldrb	r3, [r2, r3]
 8006a68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	40023800 	.word	0x40023800
 8006a74:	0800ce28 	.word	0x0800ce28

08006a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a7c:	f7ff ffdc 	bl	8006a38 <HAL_RCC_GetHCLKFreq>
 8006a80:	4601      	mov	r1, r0
 8006a82:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	0b5b      	lsrs	r3, r3, #13
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	4a03      	ldr	r2, [pc, #12]	; (8006a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a8e:	5cd3      	ldrb	r3, [r2, r3]
 8006a90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40023800 	.word	0x40023800
 8006a9c:	0800ce28 	.word	0x0800ce28

08006aa0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	220f      	movs	r2, #15
 8006aae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ab0:	4b12      	ldr	r3, [pc, #72]	; (8006afc <HAL_RCC_GetClockConfig+0x5c>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0203 	and.w	r2, r3, #3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006abc:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <HAL_RCC_GetClockConfig+0x5c>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ac8:	4b0c      	ldr	r3, [pc, #48]	; (8006afc <HAL_RCC_GetClockConfig+0x5c>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ad4:	4b09      	ldr	r3, [pc, #36]	; (8006afc <HAL_RCC_GetClockConfig+0x5c>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	08db      	lsrs	r3, r3, #3
 8006ada:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ae2:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <HAL_RCC_GetClockConfig+0x60>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 020f 	and.w	r2, r3, #15
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	601a      	str	r2, [r3, #0]
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40023800 	.word	0x40023800
 8006b00:	40023c00 	.word	0x40023c00

08006b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10b      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d075      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b38:	4bad      	ldr	r3, [pc, #692]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b3e:	f7fd fc65 	bl	800440c <HAL_GetTick>
 8006b42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b44:	e008      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b46:	f7fd fc61 	bl	800440c <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d901      	bls.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e18b      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b58:	4ba6      	ldr	r3, [pc, #664]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1f0      	bne.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d009      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	019a      	lsls	r2, r3, #6
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	071b      	lsls	r3, r3, #28
 8006b7c:	499d      	ldr	r1, [pc, #628]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01f      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b90:	4b98      	ldr	r3, [pc, #608]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b96:	0f1b      	lsrs	r3, r3, #28
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	019a      	lsls	r2, r3, #6
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	061b      	lsls	r3, r3, #24
 8006baa:	431a      	orrs	r2, r3
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	071b      	lsls	r3, r3, #28
 8006bb0:	4990      	ldr	r1, [pc, #576]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006bb8:	4b8e      	ldr	r3, [pc, #568]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bbe:	f023 021f 	bic.w	r2, r3, #31
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	498a      	ldr	r1, [pc, #552]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00d      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	019a      	lsls	r2, r3, #6
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	061b      	lsls	r3, r3, #24
 8006be8:	431a      	orrs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	071b      	lsls	r3, r3, #28
 8006bf0:	4980      	ldr	r1, [pc, #512]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bf8:	4b7d      	ldr	r3, [pc, #500]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bfe:	f7fd fc05 	bl	800440c <HAL_GetTick>
 8006c02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c04:	e008      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c06:	f7fd fc01 	bl	800440c <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e12b      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c18:	4b76      	ldr	r3, [pc, #472]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0f0      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d105      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d079      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c3c:	4b6e      	ldr	r3, [pc, #440]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c42:	f7fd fbe3 	bl	800440c <HAL_GetTick>
 8006c46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c48:	e008      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006c4a:	f7fd fbdf 	bl	800440c <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d901      	bls.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e109      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c5c:	4b65      	ldr	r3, [pc, #404]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c68:	d0ef      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0304 	and.w	r3, r3, #4
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d020      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c76:	4b5f      	ldr	r3, [pc, #380]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7c:	0f1b      	lsrs	r3, r3, #28
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	019a      	lsls	r2, r3, #6
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	061b      	lsls	r3, r3, #24
 8006c90:	431a      	orrs	r2, r3
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	071b      	lsls	r3, r3, #28
 8006c96:	4957      	ldr	r1, [pc, #348]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c9e:	4b55      	ldr	r3, [pc, #340]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	021b      	lsls	r3, r3, #8
 8006cb0:	4950      	ldr	r1, [pc, #320]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01e      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cc4:	4b4b      	ldr	r3, [pc, #300]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cca:	0e1b      	lsrs	r3, r3, #24
 8006ccc:	f003 030f 	and.w	r3, r3, #15
 8006cd0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	019a      	lsls	r2, r3, #6
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	061b      	lsls	r3, r3, #24
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	071b      	lsls	r3, r3, #28
 8006ce4:	4943      	ldr	r1, [pc, #268]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006cec:	4b41      	ldr	r3, [pc, #260]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	493e      	ldr	r1, [pc, #248]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d02:	4b3d      	ldr	r3, [pc, #244]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d04:	2201      	movs	r2, #1
 8006d06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d08:	f7fd fb80 	bl	800440c <HAL_GetTick>
 8006d0c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d10:	f7fd fb7c 	bl	800440c <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e0a6      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d22:	4b34      	ldr	r3, [pc, #208]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d2e:	d1ef      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0320 	and.w	r3, r3, #32
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 808d 	beq.w	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	4b2c      	ldr	r3, [pc, #176]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	4a2b      	ldr	r2, [pc, #172]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d4e:	4b29      	ldr	r3, [pc, #164]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d5a:	4b28      	ldr	r3, [pc, #160]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a27      	ldr	r2, [pc, #156]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d66:	f7fd fb51 	bl	800440c <HAL_GetTick>
 8006d6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d6c:	e008      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d6e:	f7fd fb4d 	bl	800440c <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e077      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d80:	4b1e      	ldr	r3, [pc, #120]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0f0      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d8c:	4b19      	ldr	r3, [pc, #100]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d94:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d039      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d032      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006daa:	4b12      	ldr	r3, [pc, #72]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006db4:	4b12      	ldr	r3, [pc, #72]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dba:	4b11      	ldr	r3, [pc, #68]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006dc0:	4a0c      	ldr	r2, [pc, #48]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d11e      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006dd2:	f7fd fb1b 	bl	800440c <HAL_GetTick>
 8006dd6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd8:	e014      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dda:	f7fd fb17 	bl	800440c <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d90b      	bls.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e03f      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006df0:	42470068 	.word	0x42470068
 8006df4:	40023800 	.word	0x40023800
 8006df8:	42470070 	.word	0x42470070
 8006dfc:	40007000 	.word	0x40007000
 8006e00:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e04:	4b1c      	ldr	r3, [pc, #112]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0e4      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e1c:	d10d      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006e1e:	4b16      	ldr	r3, [pc, #88]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e32:	4911      	ldr	r1, [pc, #68]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	608b      	str	r3, [r1, #8]
 8006e38:	e005      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006e3a:	4b0f      	ldr	r3, [pc, #60]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	4a0e      	ldr	r2, [pc, #56]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e44:	6093      	str	r3, [r2, #8]
 8006e46:	4b0c      	ldr	r3, [pc, #48]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e52:	4909      	ldr	r1, [pc, #36]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0310 	and.w	r3, r3, #16
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006e6a:	4b04      	ldr	r3, [pc, #16]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006e6c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40023800 	.word	0x40023800
 8006e7c:	424711e0 	.word	0x424711e0

08006e80 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e025      	b.n	8006ee0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d106      	bne.n	8006eae <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7fb ff27 	bl	8002cfc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	f001 fdb1 	bl	8008a28 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	f001 fe1c 	bl	8008b0e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d101      	bne.n	8006f04 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006f00:	2302      	movs	r3, #2
 8006f02:	e018      	b.n	8006f36 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 fe79 	bl	8008c0c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d104      	bne.n	8006f2c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2205      	movs	r2, #5
 8006f26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006f2a:	e003      	b.n	8006f34 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d101      	bne.n	8006f58 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006f54:	2302      	movs	r3, #2
 8006f56:	e00e      	b.n	8006f76 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f001 fe8c 	bl	8008c84 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e056      	b.n	800703e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fb fd44 	bl	8002a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fec:	431a      	orrs	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	ea42 0103 	orr.w	r1, r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	0c1b      	lsrs	r3, r3, #16
 800700e:	f003 0104 	and.w	r1, r3, #4
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69da      	ldr	r2, [r3, #28]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800702c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e01a      	b.n	800708e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800706e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7fb fd29 	bl	8002ac8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b088      	sub	sp, #32
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	603b      	str	r3, [r7, #0]
 80070a2:	4613      	mov	r3, r2
 80070a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_SPI_Transmit+0x22>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e11e      	b.n	80072f6 <HAL_SPI_Transmit+0x260>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070c0:	f7fd f9a4 	bl	800440c <HAL_GetTick>
 80070c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80070c6:	88fb      	ldrh	r3, [r7, #6]
 80070c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d002      	beq.n	80070dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80070d6:	2302      	movs	r3, #2
 80070d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80070da:	e103      	b.n	80072e4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <HAL_SPI_Transmit+0x52>
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d102      	bne.n	80070ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80070ec:	e0fa      	b.n	80072e4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2203      	movs	r2, #3
 80070f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	88fa      	ldrh	r2, [r7, #6]
 8007106:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	88fa      	ldrh	r2, [r7, #6]
 800710c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007134:	d107      	bne.n	8007146 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007144:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007150:	2b40      	cmp	r3, #64	; 0x40
 8007152:	d007      	beq.n	8007164 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007162:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800716c:	d14b      	bne.n	8007206 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <HAL_SPI_Transmit+0xe6>
 8007176:	8afb      	ldrh	r3, [r7, #22]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d13e      	bne.n	80071fa <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007180:	881a      	ldrh	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	1c9a      	adds	r2, r3, #2
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007196:	b29b      	uxth	r3, r3
 8007198:	3b01      	subs	r3, #1
 800719a:	b29a      	uxth	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071a0:	e02b      	b.n	80071fa <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d112      	bne.n	80071d6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	881a      	ldrh	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	1c9a      	adds	r2, r3, #2
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80071d4:	e011      	b.n	80071fa <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071d6:	f7fd f919 	bl	800440c <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d803      	bhi.n	80071ee <HAL_SPI_Transmit+0x158>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ec:	d102      	bne.n	80071f4 <HAL_SPI_Transmit+0x15e>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071f8:	e074      	b.n	80072e4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1ce      	bne.n	80071a2 <HAL_SPI_Transmit+0x10c>
 8007204:	e04c      	b.n	80072a0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <HAL_SPI_Transmit+0x17e>
 800720e:	8afb      	ldrh	r3, [r7, #22]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d140      	bne.n	8007296 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	330c      	adds	r3, #12
 800721e:	7812      	ldrb	r2, [r2, #0]
 8007220:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007230:	b29b      	uxth	r3, r3
 8007232:	3b01      	subs	r3, #1
 8007234:	b29a      	uxth	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800723a:	e02c      	b.n	8007296 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b02      	cmp	r3, #2
 8007248:	d113      	bne.n	8007272 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	330c      	adds	r3, #12
 8007254:	7812      	ldrb	r2, [r2, #0]
 8007256:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007270:	e011      	b.n	8007296 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007272:	f7fd f8cb 	bl	800440c <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d803      	bhi.n	800728a <HAL_SPI_Transmit+0x1f4>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007288:	d102      	bne.n	8007290 <HAL_SPI_Transmit+0x1fa>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d102      	bne.n	8007296 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007294:	e026      	b.n	80072e4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1cd      	bne.n	800723c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 fbb3 	bl	8007a10 <SPI_EndRxTxTransaction>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2220      	movs	r2, #32
 80072b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10a      	bne.n	80072d4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072be:	2300      	movs	r3, #0
 80072c0:	613b      	str	r3, [r7, #16]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	613b      	str	r3, [r7, #16]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	613b      	str	r3, [r7, #16]
 80072d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	77fb      	strb	r3, [r7, #31]
 80072e0:	e000      	b.n	80072e4 <HAL_SPI_Transmit+0x24e>
  }

error:
 80072e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3720      	adds	r7, #32
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b088      	sub	sp, #32
 8007302:	af02      	add	r7, sp, #8
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	603b      	str	r3, [r7, #0]
 800730a:	4613      	mov	r3, r2
 800730c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800731a:	d112      	bne.n	8007342 <HAL_SPI_Receive+0x44>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10e      	bne.n	8007342 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2204      	movs	r2, #4
 8007328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800732c:	88fa      	ldrh	r2, [r7, #6]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	4613      	mov	r3, r2
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	68b9      	ldr	r1, [r7, #8]
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 f8e9 	bl	8007510 <HAL_SPI_TransmitReceive>
 800733e:	4603      	mov	r3, r0
 8007340:	e0e2      	b.n	8007508 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007348:	2b01      	cmp	r3, #1
 800734a:	d101      	bne.n	8007350 <HAL_SPI_Receive+0x52>
 800734c:	2302      	movs	r3, #2
 800734e:	e0db      	b.n	8007508 <HAL_SPI_Receive+0x20a>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007358:	f7fd f858 	bl	800440c <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b01      	cmp	r3, #1
 8007368:	d002      	beq.n	8007370 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800736a:	2302      	movs	r3, #2
 800736c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800736e:	e0c2      	b.n	80074f6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <HAL_SPI_Receive+0x7e>
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d102      	bne.n	8007382 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007380:	e0b9      	b.n	80074f6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2204      	movs	r2, #4
 8007386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	88fa      	ldrh	r2, [r7, #6]
 800739a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	88fa      	ldrh	r2, [r7, #6]
 80073a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073c8:	d107      	bne.n	80073da <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80073d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e4:	2b40      	cmp	r3, #64	; 0x40
 80073e6:	d007      	beq.n	80073f8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d162      	bne.n	80074c6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007400:	e02e      	b.n	8007460 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b01      	cmp	r3, #1
 800740e:	d115      	bne.n	800743c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f103 020c 	add.w	r2, r3, #12
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	7812      	ldrb	r2, [r2, #0]
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	b29a      	uxth	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	87da      	strh	r2, [r3, #62]	; 0x3e
 800743a:	e011      	b.n	8007460 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800743c:	f7fc ffe6 	bl	800440c <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	429a      	cmp	r2, r3
 800744a:	d803      	bhi.n	8007454 <HAL_SPI_Receive+0x156>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	d102      	bne.n	800745a <HAL_SPI_Receive+0x15c>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800745e:	e04a      	b.n	80074f6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1cb      	bne.n	8007402 <HAL_SPI_Receive+0x104>
 800746a:	e031      	b.n	80074d0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b01      	cmp	r3, #1
 8007478:	d113      	bne.n	80074a2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	b292      	uxth	r2, r2
 8007486:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748c:	1c9a      	adds	r2, r3, #2
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007496:	b29b      	uxth	r3, r3
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074a0:	e011      	b.n	80074c6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074a2:	f7fc ffb3 	bl	800440c <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d803      	bhi.n	80074ba <HAL_SPI_Receive+0x1bc>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b8:	d102      	bne.n	80074c0 <HAL_SPI_Receive+0x1c2>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d102      	bne.n	80074c6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80074c4:	e017      	b.n	80074f6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1cd      	bne.n	800746c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 fa35 	bl	8007944 <SPI_EndRxTransaction>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2220      	movs	r2, #32
 80074e4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	75fb      	strb	r3, [r7, #23]
 80074f2:	e000      	b.n	80074f6 <HAL_SPI_Receive+0x1f8>
  }

error :
 80074f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007506:	7dfb      	ldrb	r3, [r7, #23]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08c      	sub	sp, #48	; 0x30
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800751e:	2301      	movs	r3, #1
 8007520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_SPI_TransmitReceive+0x26>
 8007532:	2302      	movs	r3, #2
 8007534:	e18a      	b.n	800784c <HAL_SPI_TransmitReceive+0x33c>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800753e:	f7fc ff65 	bl	800440c <HAL_GetTick>
 8007542:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800754a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007554:	887b      	ldrh	r3, [r7, #2]
 8007556:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007558:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800755c:	2b01      	cmp	r3, #1
 800755e:	d00f      	beq.n	8007580 <HAL_SPI_TransmitReceive+0x70>
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007566:	d107      	bne.n	8007578 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d103      	bne.n	8007578 <HAL_SPI_TransmitReceive+0x68>
 8007570:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007574:	2b04      	cmp	r3, #4
 8007576:	d003      	beq.n	8007580 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007578:	2302      	movs	r3, #2
 800757a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800757e:	e15b      	b.n	8007838 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d005      	beq.n	8007592 <HAL_SPI_TransmitReceive+0x82>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <HAL_SPI_TransmitReceive+0x82>
 800758c:	887b      	ldrh	r3, [r7, #2]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d103      	bne.n	800759a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007598:	e14e      	b.n	8007838 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d003      	beq.n	80075ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2205      	movs	r2, #5
 80075aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	887a      	ldrh	r2, [r7, #2]
 80075be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	887a      	ldrh	r2, [r7, #2]
 80075c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	887a      	ldrh	r2, [r7, #2]
 80075d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	887a      	ldrh	r2, [r7, #2]
 80075d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ee:	2b40      	cmp	r3, #64	; 0x40
 80075f0:	d007      	beq.n	8007602 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007600:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800760a:	d178      	bne.n	80076fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <HAL_SPI_TransmitReceive+0x10a>
 8007614:	8b7b      	ldrh	r3, [r7, #26]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d166      	bne.n	80076e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	881a      	ldrh	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762a:	1c9a      	adds	r2, r3, #2
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800763e:	e053      	b.n	80076e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b02      	cmp	r3, #2
 800764c:	d11b      	bne.n	8007686 <HAL_SPI_TransmitReceive+0x176>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007652:	b29b      	uxth	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d016      	beq.n	8007686 <HAL_SPI_TransmitReceive+0x176>
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	2b01      	cmp	r3, #1
 800765c:	d113      	bne.n	8007686 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	881a      	ldrh	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766e:	1c9a      	adds	r2, r3, #2
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b01      	cmp	r3, #1
 8007692:	d119      	bne.n	80076c8 <HAL_SPI_TransmitReceive+0x1b8>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007698:	b29b      	uxth	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d014      	beq.n	80076c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a8:	b292      	uxth	r2, r2
 80076aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	1c9a      	adds	r2, r3, #2
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076c4:	2301      	movs	r3, #1
 80076c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076c8:	f7fc fea0 	bl	800440c <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d807      	bhi.n	80076e8 <HAL_SPI_TransmitReceive+0x1d8>
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076de:	d003      	beq.n	80076e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80076e6:	e0a7      	b.n	8007838 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1a6      	bne.n	8007640 <HAL_SPI_TransmitReceive+0x130>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1a1      	bne.n	8007640 <HAL_SPI_TransmitReceive+0x130>
 80076fc:	e07c      	b.n	80077f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <HAL_SPI_TransmitReceive+0x1fc>
 8007706:	8b7b      	ldrh	r3, [r7, #26]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d16b      	bne.n	80077e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	330c      	adds	r3, #12
 8007716:	7812      	ldrb	r2, [r2, #0]
 8007718:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007728:	b29b      	uxth	r3, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	b29a      	uxth	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007732:	e057      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b02      	cmp	r3, #2
 8007740:	d11c      	bne.n	800777c <HAL_SPI_TransmitReceive+0x26c>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007746:	b29b      	uxth	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	d017      	beq.n	800777c <HAL_SPI_TransmitReceive+0x26c>
 800774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774e:	2b01      	cmp	r3, #1
 8007750:	d114      	bne.n	800777c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	330c      	adds	r3, #12
 800775c:	7812      	ldrb	r2, [r2, #0]
 800775e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b01      	cmp	r3, #1
 8007788:	d119      	bne.n	80077be <HAL_SPI_TransmitReceive+0x2ae>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d014      	beq.n	80077be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077ba:	2301      	movs	r3, #1
 80077bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077be:	f7fc fe25 	bl	800440c <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d803      	bhi.n	80077d6 <HAL_SPI_TransmitReceive+0x2c6>
 80077ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d4:	d102      	bne.n	80077dc <HAL_SPI_TransmitReceive+0x2cc>
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d103      	bne.n	80077e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80077e2:	e029      	b.n	8007838 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1a2      	bne.n	8007734 <HAL_SPI_TransmitReceive+0x224>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d19d      	bne.n	8007734 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f907 	bl	8007a10 <SPI_EndRxTxTransaction>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d006      	beq.n	8007816 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2220      	movs	r2, #32
 8007812:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007814:	e010      	b.n	8007838 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10b      	bne.n	8007836 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	e000      	b.n	8007838 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007836:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800784c:	4618      	mov	r0, r3
 800784e:	3730      	adds	r7, #48	; 0x30
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007862:	b2db      	uxtb	r3, r3
}
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	4613      	mov	r3, r2
 800787e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007880:	e04c      	b.n	800791c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007888:	d048      	beq.n	800791c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800788a:	f7fc fdbf 	bl	800440c <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d902      	bls.n	80078a0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d13d      	bne.n	800791c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078b8:	d111      	bne.n	80078de <SPI_WaitFlagStateUntilTimeout+0x6e>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078c2:	d004      	beq.n	80078ce <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078cc:	d107      	bne.n	80078de <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e6:	d10f      	bne.n	8007908 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007906:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e00f      	b.n	800793c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	4013      	ands	r3, r2
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	429a      	cmp	r2, r3
 800792a:	bf0c      	ite	eq
 800792c:	2301      	moveq	r3, #1
 800792e:	2300      	movne	r3, #0
 8007930:	b2db      	uxtb	r3, r3
 8007932:	461a      	mov	r2, r3
 8007934:	79fb      	ldrb	r3, [r7, #7]
 8007936:	429a      	cmp	r2, r3
 8007938:	d1a3      	bne.n	8007882 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af02      	add	r7, sp, #8
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007958:	d111      	bne.n	800797e <SPI_EndRxTransaction+0x3a>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007962:	d004      	beq.n	800796e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800796c:	d107      	bne.n	800797e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007986:	d12a      	bne.n	80079de <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007990:	d012      	beq.n	80079b8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2200      	movs	r2, #0
 800799a:	2180      	movs	r1, #128	; 0x80
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f7ff ff67 	bl	8007870 <SPI_WaitFlagStateUntilTimeout>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d02d      	beq.n	8007a04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ac:	f043 0220 	orr.w	r2, r3, #32
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e026      	b.n	8007a06 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2200      	movs	r2, #0
 80079c0:	2101      	movs	r1, #1
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f7ff ff54 	bl	8007870 <SPI_WaitFlagStateUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d01a      	beq.n	8007a04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d2:	f043 0220 	orr.w	r2, r3, #32
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e013      	b.n	8007a06 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2200      	movs	r2, #0
 80079e6:	2101      	movs	r1, #1
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f7ff ff41 	bl	8007870 <SPI_WaitFlagStateUntilTimeout>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d007      	beq.n	8007a04 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f8:	f043 0220 	orr.w	r2, r3, #32
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e000      	b.n	8007a06 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a1c:	4b1b      	ldr	r3, [pc, #108]	; (8007a8c <SPI_EndRxTxTransaction+0x7c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a1b      	ldr	r2, [pc, #108]	; (8007a90 <SPI_EndRxTxTransaction+0x80>)
 8007a22:	fba2 2303 	umull	r2, r3, r2, r3
 8007a26:	0d5b      	lsrs	r3, r3, #21
 8007a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a2c:	fb02 f303 	mul.w	r3, r2, r3
 8007a30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a3a:	d112      	bne.n	8007a62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2200      	movs	r2, #0
 8007a44:	2180      	movs	r1, #128	; 0x80
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f7ff ff12 	bl	8007870 <SPI_WaitFlagStateUntilTimeout>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d016      	beq.n	8007a80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a56:	f043 0220 	orr.w	r2, r3, #32
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e00f      	b.n	8007a82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00a      	beq.n	8007a7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a78:	2b80      	cmp	r3, #128	; 0x80
 8007a7a:	d0f2      	beq.n	8007a62 <SPI_EndRxTxTransaction+0x52>
 8007a7c:	e000      	b.n	8007a80 <SPI_EndRxTxTransaction+0x70>
        break;
 8007a7e:	bf00      	nop
  }

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3718      	adds	r7, #24
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20000008 	.word	0x20000008
 8007a90:	165e9f81 	.word	0x165e9f81

08007a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e01d      	b.n	8007ae2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d106      	bne.n	8007ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7fb f822 	bl	8002b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3304      	adds	r3, #4
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	f000 fa14 	bl	8007f00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b085      	sub	sp, #20
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0201 	orr.w	r2, r2, #1
 8007b00:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f003 0307 	and.w	r3, r3, #7
 8007b0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b06      	cmp	r3, #6
 8007b12:	d007      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0201 	orr.w	r2, r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b082      	sub	sp, #8
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d122      	bne.n	8007b8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d11b      	bne.n	8007b8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f06f 0202 	mvn.w	r2, #2
 8007b5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	f003 0303 	and.w	r3, r3, #3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f9a5 	bl	8007ec4 <HAL_TIM_IC_CaptureCallback>
 8007b7a:	e005      	b.n	8007b88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f997 	bl	8007eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f9a8 	bl	8007ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d122      	bne.n	8007be2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f003 0304 	and.w	r3, r3, #4
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d11b      	bne.n	8007be2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f06f 0204 	mvn.w	r2, #4
 8007bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f97b 	bl	8007ec4 <HAL_TIM_IC_CaptureCallback>
 8007bce:	e005      	b.n	8007bdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f96d 	bl	8007eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f97e 	bl	8007ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	f003 0308 	and.w	r3, r3, #8
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d122      	bne.n	8007c36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f003 0308 	and.w	r3, r3, #8
 8007bfa:	2b08      	cmp	r3, #8
 8007bfc:	d11b      	bne.n	8007c36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f06f 0208 	mvn.w	r2, #8
 8007c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2204      	movs	r2, #4
 8007c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	f003 0303 	and.w	r3, r3, #3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f951 	bl	8007ec4 <HAL_TIM_IC_CaptureCallback>
 8007c22:	e005      	b.n	8007c30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f943 	bl	8007eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f954 	bl	8007ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	f003 0310 	and.w	r3, r3, #16
 8007c40:	2b10      	cmp	r3, #16
 8007c42:	d122      	bne.n	8007c8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	2b10      	cmp	r3, #16
 8007c50:	d11b      	bne.n	8007c8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f06f 0210 	mvn.w	r2, #16
 8007c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2208      	movs	r2, #8
 8007c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d003      	beq.n	8007c78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f927 	bl	8007ec4 <HAL_TIM_IC_CaptureCallback>
 8007c76:	e005      	b.n	8007c84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f919 	bl	8007eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f92a 	bl	8007ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d10e      	bne.n	8007cb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d107      	bne.n	8007cb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f06f 0201 	mvn.w	r2, #1
 8007cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7fa fcb5 	bl	8002620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc0:	2b80      	cmp	r3, #128	; 0x80
 8007cc2:	d10e      	bne.n	8007ce2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cce:	2b80      	cmp	r3, #128	; 0x80
 8007cd0:	d107      	bne.n	8007ce2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 facf 	bl	8008280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cec:	2b40      	cmp	r3, #64	; 0x40
 8007cee:	d10e      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfa:	2b40      	cmp	r3, #64	; 0x40
 8007cfc:	d107      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f8ef 	bl	8007eec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	f003 0320 	and.w	r3, r3, #32
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	d10e      	bne.n	8007d3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	d107      	bne.n	8007d3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f06f 0220 	mvn.w	r2, #32
 8007d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fa99 	bl	800826c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_TIM_ConfigClockSource+0x18>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e0a6      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x166>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2202      	movs	r2, #2
 8007d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d78:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d80:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b40      	cmp	r3, #64	; 0x40
 8007d90:	d067      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x120>
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	d80b      	bhi.n	8007dae <HAL_TIM_ConfigClockSource+0x6c>
 8007d96:	2b10      	cmp	r3, #16
 8007d98:	d073      	beq.n	8007e82 <HAL_TIM_ConfigClockSource+0x140>
 8007d9a:	2b10      	cmp	r3, #16
 8007d9c:	d802      	bhi.n	8007da4 <HAL_TIM_ConfigClockSource+0x62>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d06f      	beq.n	8007e82 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007da2:	e078      	b.n	8007e96 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	d06c      	beq.n	8007e82 <HAL_TIM_ConfigClockSource+0x140>
 8007da8:	2b30      	cmp	r3, #48	; 0x30
 8007daa:	d06a      	beq.n	8007e82 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007dac:	e073      	b.n	8007e96 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007dae:	2b70      	cmp	r3, #112	; 0x70
 8007db0:	d00d      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x8c>
 8007db2:	2b70      	cmp	r3, #112	; 0x70
 8007db4:	d804      	bhi.n	8007dc0 <HAL_TIM_ConfigClockSource+0x7e>
 8007db6:	2b50      	cmp	r3, #80	; 0x50
 8007db8:	d033      	beq.n	8007e22 <HAL_TIM_ConfigClockSource+0xe0>
 8007dba:	2b60      	cmp	r3, #96	; 0x60
 8007dbc:	d041      	beq.n	8007e42 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007dbe:	e06a      	b.n	8007e96 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc4:	d066      	beq.n	8007e94 <HAL_TIM_ConfigClockSource+0x152>
 8007dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dca:	d017      	beq.n	8007dfc <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007dcc:	e063      	b.n	8007e96 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	6899      	ldr	r1, [r3, #8]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f000 f9a9 	bl	8008134 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007df0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	609a      	str	r2, [r3, #8]
      break;
 8007dfa:	e04c      	b.n	8007e96 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6818      	ldr	r0, [r3, #0]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	6899      	ldr	r1, [r3, #8]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	f000 f992 	bl	8008134 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689a      	ldr	r2, [r3, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e1e:	609a      	str	r2, [r3, #8]
      break;
 8007e20:	e039      	b.n	8007e96 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	6859      	ldr	r1, [r3, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f000 f906 	bl	8008040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2150      	movs	r1, #80	; 0x50
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f95f 	bl	80080fe <TIM_ITRx_SetConfig>
      break;
 8007e40:	e029      	b.n	8007e96 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	6859      	ldr	r1, [r3, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f000 f925 	bl	800809e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2160      	movs	r1, #96	; 0x60
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 f94f 	bl	80080fe <TIM_ITRx_SetConfig>
      break;
 8007e60:	e019      	b.n	8007e96 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	6859      	ldr	r1, [r3, #4]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f000 f8e6 	bl	8008040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2140      	movs	r1, #64	; 0x40
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 f93f 	bl	80080fe <TIM_ITRx_SetConfig>
      break;
 8007e80:	e009      	b.n	8007e96 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	f000 f936 	bl	80080fe <TIM_ITRx_SetConfig>
      break;
 8007e92:	e000      	b.n	8007e96 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007e94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a40      	ldr	r2, [pc, #256]	; (8008014 <TIM_Base_SetConfig+0x114>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d013      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1e:	d00f      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a3d      	ldr	r2, [pc, #244]	; (8008018 <TIM_Base_SetConfig+0x118>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00b      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a3c      	ldr	r2, [pc, #240]	; (800801c <TIM_Base_SetConfig+0x11c>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d007      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a3b      	ldr	r2, [pc, #236]	; (8008020 <TIM_Base_SetConfig+0x120>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d003      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a3a      	ldr	r2, [pc, #232]	; (8008024 <TIM_Base_SetConfig+0x124>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d108      	bne.n	8007f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a2f      	ldr	r2, [pc, #188]	; (8008014 <TIM_Base_SetConfig+0x114>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d02b      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f60:	d027      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a2c      	ldr	r2, [pc, #176]	; (8008018 <TIM_Base_SetConfig+0x118>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d023      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a2b      	ldr	r2, [pc, #172]	; (800801c <TIM_Base_SetConfig+0x11c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d01f      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a2a      	ldr	r2, [pc, #168]	; (8008020 <TIM_Base_SetConfig+0x120>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d01b      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a29      	ldr	r2, [pc, #164]	; (8008024 <TIM_Base_SetConfig+0x124>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d017      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a28      	ldr	r2, [pc, #160]	; (8008028 <TIM_Base_SetConfig+0x128>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d013      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a27      	ldr	r2, [pc, #156]	; (800802c <TIM_Base_SetConfig+0x12c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00f      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a26      	ldr	r2, [pc, #152]	; (8008030 <TIM_Base_SetConfig+0x130>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d00b      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a25      	ldr	r2, [pc, #148]	; (8008034 <TIM_Base_SetConfig+0x134>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d007      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a24      	ldr	r2, [pc, #144]	; (8008038 <TIM_Base_SetConfig+0x138>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d003      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a23      	ldr	r2, [pc, #140]	; (800803c <TIM_Base_SetConfig+0x13c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d108      	bne.n	8007fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a0a      	ldr	r2, [pc, #40]	; (8008014 <TIM_Base_SetConfig+0x114>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d003      	beq.n	8007ff8 <TIM_Base_SetConfig+0xf8>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a0c      	ldr	r2, [pc, #48]	; (8008024 <TIM_Base_SetConfig+0x124>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d103      	bne.n	8008000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	615a      	str	r2, [r3, #20]
}
 8008006:	bf00      	nop
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40010000 	.word	0x40010000
 8008018:	40000400 	.word	0x40000400
 800801c:	40000800 	.word	0x40000800
 8008020:	40000c00 	.word	0x40000c00
 8008024:	40010400 	.word	0x40010400
 8008028:	40014000 	.word	0x40014000
 800802c:	40014400 	.word	0x40014400
 8008030:	40014800 	.word	0x40014800
 8008034:	40001800 	.word	0x40001800
 8008038:	40001c00 	.word	0x40001c00
 800803c:	40002000 	.word	0x40002000

08008040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	f023 0201 	bic.w	r2, r3, #1
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800806a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	011b      	lsls	r3, r3, #4
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	4313      	orrs	r3, r2
 8008074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f023 030a 	bic.w	r3, r3, #10
 800807c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	4313      	orrs	r3, r2
 8008084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	621a      	str	r2, [r3, #32]
}
 8008092:	bf00      	nop
 8008094:	371c      	adds	r7, #28
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800809e:	b480      	push	{r7}
 80080a0:	b087      	sub	sp, #28
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	f023 0210 	bic.w	r2, r3, #16
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	031b      	lsls	r3, r3, #12
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	011b      	lsls	r3, r3, #4
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	621a      	str	r2, [r3, #32]
}
 80080f2:	bf00      	nop
 80080f4:	371c      	adds	r7, #28
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080fe:	b480      	push	{r7}
 8008100:	b085      	sub	sp, #20
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4313      	orrs	r3, r2
 800811c:	f043 0307 	orr.w	r3, r3, #7
 8008120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	609a      	str	r2, [r3, #8]
}
 8008128:	bf00      	nop
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800814e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	021a      	lsls	r2, r3, #8
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	431a      	orrs	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4313      	orrs	r3, r2
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	4313      	orrs	r3, r2
 8008160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	609a      	str	r2, [r3, #8]
}
 8008168:	bf00      	nop
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008184:	2b01      	cmp	r3, #1
 8008186:	d101      	bne.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008188:	2302      	movs	r3, #2
 800818a:	e05a      	b.n	8008242 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a21      	ldr	r2, [pc, #132]	; (8008250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d022      	beq.n	8008216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d8:	d01d      	beq.n	8008216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d018      	beq.n	8008216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a1b      	ldr	r2, [pc, #108]	; (8008258 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d013      	beq.n	8008216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a1a      	ldr	r2, [pc, #104]	; (800825c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d00e      	beq.n	8008216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a18      	ldr	r2, [pc, #96]	; (8008260 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d009      	beq.n	8008216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a17      	ldr	r2, [pc, #92]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d004      	beq.n	8008216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a15      	ldr	r2, [pc, #84]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d10c      	bne.n	8008230 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800821c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	4313      	orrs	r3, r2
 8008226:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	40010000 	.word	0x40010000
 8008254:	40000400 	.word	0x40000400
 8008258:	40000800 	.word	0x40000800
 800825c:	40000c00 	.word	0x40000c00
 8008260:	40010400 	.word	0x40010400
 8008264:	40014000 	.word	0x40014000
 8008268:	40001800 	.word	0x40001800

0800826c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e03f      	b.n	8008326 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d106      	bne.n	80082c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fa fc44 	bl	8002b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2224      	movs	r2, #36	; 0x24
 80082c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f829 	bl	8008330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691a      	ldr	r2, [r3, #16]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	695a      	ldr	r2, [r3, #20]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68da      	ldr	r2, [r3, #12]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800830c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2220      	movs	r2, #32
 8008320:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	431a      	orrs	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	4313      	orrs	r3, r2
 8008366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008372:	f023 030c 	bic.w	r3, r3, #12
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	6812      	ldr	r2, [r2, #0]
 800837a:	68f9      	ldr	r1, [r7, #12]
 800837c:	430b      	orrs	r3, r1
 800837e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	699a      	ldr	r2, [r3, #24]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800839e:	f040 818b 	bne.w	80086b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4ac1      	ldr	r2, [pc, #772]	; (80086ac <UART_SetConfig+0x37c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d005      	beq.n	80083b8 <UART_SetConfig+0x88>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4abf      	ldr	r2, [pc, #764]	; (80086b0 <UART_SetConfig+0x380>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	f040 80bd 	bne.w	8008532 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083b8:	f7fe fb5e 	bl	8006a78 <HAL_RCC_GetPCLK2Freq>
 80083bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	461d      	mov	r5, r3
 80083c2:	f04f 0600 	mov.w	r6, #0
 80083c6:	46a8      	mov	r8, r5
 80083c8:	46b1      	mov	r9, r6
 80083ca:	eb18 0308 	adds.w	r3, r8, r8
 80083ce:	eb49 0409 	adc.w	r4, r9, r9
 80083d2:	4698      	mov	r8, r3
 80083d4:	46a1      	mov	r9, r4
 80083d6:	eb18 0805 	adds.w	r8, r8, r5
 80083da:	eb49 0906 	adc.w	r9, r9, r6
 80083de:	f04f 0100 	mov.w	r1, #0
 80083e2:	f04f 0200 	mov.w	r2, #0
 80083e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80083ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80083ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80083f2:	4688      	mov	r8, r1
 80083f4:	4691      	mov	r9, r2
 80083f6:	eb18 0005 	adds.w	r0, r8, r5
 80083fa:	eb49 0106 	adc.w	r1, r9, r6
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	461d      	mov	r5, r3
 8008404:	f04f 0600 	mov.w	r6, #0
 8008408:	196b      	adds	r3, r5, r5
 800840a:	eb46 0406 	adc.w	r4, r6, r6
 800840e:	461a      	mov	r2, r3
 8008410:	4623      	mov	r3, r4
 8008412:	f7f8 fbbb 	bl	8000b8c <__aeabi_uldivmod>
 8008416:	4603      	mov	r3, r0
 8008418:	460c      	mov	r4, r1
 800841a:	461a      	mov	r2, r3
 800841c:	4ba5      	ldr	r3, [pc, #660]	; (80086b4 <UART_SetConfig+0x384>)
 800841e:	fba3 2302 	umull	r2, r3, r3, r2
 8008422:	095b      	lsrs	r3, r3, #5
 8008424:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	461d      	mov	r5, r3
 800842c:	f04f 0600 	mov.w	r6, #0
 8008430:	46a9      	mov	r9, r5
 8008432:	46b2      	mov	sl, r6
 8008434:	eb19 0309 	adds.w	r3, r9, r9
 8008438:	eb4a 040a 	adc.w	r4, sl, sl
 800843c:	4699      	mov	r9, r3
 800843e:	46a2      	mov	sl, r4
 8008440:	eb19 0905 	adds.w	r9, r9, r5
 8008444:	eb4a 0a06 	adc.w	sl, sl, r6
 8008448:	f04f 0100 	mov.w	r1, #0
 800844c:	f04f 0200 	mov.w	r2, #0
 8008450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008454:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008458:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800845c:	4689      	mov	r9, r1
 800845e:	4692      	mov	sl, r2
 8008460:	eb19 0005 	adds.w	r0, r9, r5
 8008464:	eb4a 0106 	adc.w	r1, sl, r6
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	461d      	mov	r5, r3
 800846e:	f04f 0600 	mov.w	r6, #0
 8008472:	196b      	adds	r3, r5, r5
 8008474:	eb46 0406 	adc.w	r4, r6, r6
 8008478:	461a      	mov	r2, r3
 800847a:	4623      	mov	r3, r4
 800847c:	f7f8 fb86 	bl	8000b8c <__aeabi_uldivmod>
 8008480:	4603      	mov	r3, r0
 8008482:	460c      	mov	r4, r1
 8008484:	461a      	mov	r2, r3
 8008486:	4b8b      	ldr	r3, [pc, #556]	; (80086b4 <UART_SetConfig+0x384>)
 8008488:	fba3 1302 	umull	r1, r3, r3, r2
 800848c:	095b      	lsrs	r3, r3, #5
 800848e:	2164      	movs	r1, #100	; 0x64
 8008490:	fb01 f303 	mul.w	r3, r1, r3
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	3332      	adds	r3, #50	; 0x32
 800849a:	4a86      	ldr	r2, [pc, #536]	; (80086b4 <UART_SetConfig+0x384>)
 800849c:	fba2 2303 	umull	r2, r3, r2, r3
 80084a0:	095b      	lsrs	r3, r3, #5
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084a8:	4498      	add	r8, r3
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	461d      	mov	r5, r3
 80084ae:	f04f 0600 	mov.w	r6, #0
 80084b2:	46a9      	mov	r9, r5
 80084b4:	46b2      	mov	sl, r6
 80084b6:	eb19 0309 	adds.w	r3, r9, r9
 80084ba:	eb4a 040a 	adc.w	r4, sl, sl
 80084be:	4699      	mov	r9, r3
 80084c0:	46a2      	mov	sl, r4
 80084c2:	eb19 0905 	adds.w	r9, r9, r5
 80084c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80084ca:	f04f 0100 	mov.w	r1, #0
 80084ce:	f04f 0200 	mov.w	r2, #0
 80084d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084de:	4689      	mov	r9, r1
 80084e0:	4692      	mov	sl, r2
 80084e2:	eb19 0005 	adds.w	r0, r9, r5
 80084e6:	eb4a 0106 	adc.w	r1, sl, r6
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	461d      	mov	r5, r3
 80084f0:	f04f 0600 	mov.w	r6, #0
 80084f4:	196b      	adds	r3, r5, r5
 80084f6:	eb46 0406 	adc.w	r4, r6, r6
 80084fa:	461a      	mov	r2, r3
 80084fc:	4623      	mov	r3, r4
 80084fe:	f7f8 fb45 	bl	8000b8c <__aeabi_uldivmod>
 8008502:	4603      	mov	r3, r0
 8008504:	460c      	mov	r4, r1
 8008506:	461a      	mov	r2, r3
 8008508:	4b6a      	ldr	r3, [pc, #424]	; (80086b4 <UART_SetConfig+0x384>)
 800850a:	fba3 1302 	umull	r1, r3, r3, r2
 800850e:	095b      	lsrs	r3, r3, #5
 8008510:	2164      	movs	r1, #100	; 0x64
 8008512:	fb01 f303 	mul.w	r3, r1, r3
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	3332      	adds	r3, #50	; 0x32
 800851c:	4a65      	ldr	r2, [pc, #404]	; (80086b4 <UART_SetConfig+0x384>)
 800851e:	fba2 2303 	umull	r2, r3, r2, r3
 8008522:	095b      	lsrs	r3, r3, #5
 8008524:	f003 0207 	and.w	r2, r3, #7
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4442      	add	r2, r8
 800852e:	609a      	str	r2, [r3, #8]
 8008530:	e26f      	b.n	8008a12 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008532:	f7fe fa8d 	bl	8006a50 <HAL_RCC_GetPCLK1Freq>
 8008536:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	461d      	mov	r5, r3
 800853c:	f04f 0600 	mov.w	r6, #0
 8008540:	46a8      	mov	r8, r5
 8008542:	46b1      	mov	r9, r6
 8008544:	eb18 0308 	adds.w	r3, r8, r8
 8008548:	eb49 0409 	adc.w	r4, r9, r9
 800854c:	4698      	mov	r8, r3
 800854e:	46a1      	mov	r9, r4
 8008550:	eb18 0805 	adds.w	r8, r8, r5
 8008554:	eb49 0906 	adc.w	r9, r9, r6
 8008558:	f04f 0100 	mov.w	r1, #0
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008564:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008568:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800856c:	4688      	mov	r8, r1
 800856e:	4691      	mov	r9, r2
 8008570:	eb18 0005 	adds.w	r0, r8, r5
 8008574:	eb49 0106 	adc.w	r1, r9, r6
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	461d      	mov	r5, r3
 800857e:	f04f 0600 	mov.w	r6, #0
 8008582:	196b      	adds	r3, r5, r5
 8008584:	eb46 0406 	adc.w	r4, r6, r6
 8008588:	461a      	mov	r2, r3
 800858a:	4623      	mov	r3, r4
 800858c:	f7f8 fafe 	bl	8000b8c <__aeabi_uldivmod>
 8008590:	4603      	mov	r3, r0
 8008592:	460c      	mov	r4, r1
 8008594:	461a      	mov	r2, r3
 8008596:	4b47      	ldr	r3, [pc, #284]	; (80086b4 <UART_SetConfig+0x384>)
 8008598:	fba3 2302 	umull	r2, r3, r3, r2
 800859c:	095b      	lsrs	r3, r3, #5
 800859e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	461d      	mov	r5, r3
 80085a6:	f04f 0600 	mov.w	r6, #0
 80085aa:	46a9      	mov	r9, r5
 80085ac:	46b2      	mov	sl, r6
 80085ae:	eb19 0309 	adds.w	r3, r9, r9
 80085b2:	eb4a 040a 	adc.w	r4, sl, sl
 80085b6:	4699      	mov	r9, r3
 80085b8:	46a2      	mov	sl, r4
 80085ba:	eb19 0905 	adds.w	r9, r9, r5
 80085be:	eb4a 0a06 	adc.w	sl, sl, r6
 80085c2:	f04f 0100 	mov.w	r1, #0
 80085c6:	f04f 0200 	mov.w	r2, #0
 80085ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80085d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80085d6:	4689      	mov	r9, r1
 80085d8:	4692      	mov	sl, r2
 80085da:	eb19 0005 	adds.w	r0, r9, r5
 80085de:	eb4a 0106 	adc.w	r1, sl, r6
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	461d      	mov	r5, r3
 80085e8:	f04f 0600 	mov.w	r6, #0
 80085ec:	196b      	adds	r3, r5, r5
 80085ee:	eb46 0406 	adc.w	r4, r6, r6
 80085f2:	461a      	mov	r2, r3
 80085f4:	4623      	mov	r3, r4
 80085f6:	f7f8 fac9 	bl	8000b8c <__aeabi_uldivmod>
 80085fa:	4603      	mov	r3, r0
 80085fc:	460c      	mov	r4, r1
 80085fe:	461a      	mov	r2, r3
 8008600:	4b2c      	ldr	r3, [pc, #176]	; (80086b4 <UART_SetConfig+0x384>)
 8008602:	fba3 1302 	umull	r1, r3, r3, r2
 8008606:	095b      	lsrs	r3, r3, #5
 8008608:	2164      	movs	r1, #100	; 0x64
 800860a:	fb01 f303 	mul.w	r3, r1, r3
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	3332      	adds	r3, #50	; 0x32
 8008614:	4a27      	ldr	r2, [pc, #156]	; (80086b4 <UART_SetConfig+0x384>)
 8008616:	fba2 2303 	umull	r2, r3, r2, r3
 800861a:	095b      	lsrs	r3, r3, #5
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008622:	4498      	add	r8, r3
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	461d      	mov	r5, r3
 8008628:	f04f 0600 	mov.w	r6, #0
 800862c:	46a9      	mov	r9, r5
 800862e:	46b2      	mov	sl, r6
 8008630:	eb19 0309 	adds.w	r3, r9, r9
 8008634:	eb4a 040a 	adc.w	r4, sl, sl
 8008638:	4699      	mov	r9, r3
 800863a:	46a2      	mov	sl, r4
 800863c:	eb19 0905 	adds.w	r9, r9, r5
 8008640:	eb4a 0a06 	adc.w	sl, sl, r6
 8008644:	f04f 0100 	mov.w	r1, #0
 8008648:	f04f 0200 	mov.w	r2, #0
 800864c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008650:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008654:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008658:	4689      	mov	r9, r1
 800865a:	4692      	mov	sl, r2
 800865c:	eb19 0005 	adds.w	r0, r9, r5
 8008660:	eb4a 0106 	adc.w	r1, sl, r6
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	461d      	mov	r5, r3
 800866a:	f04f 0600 	mov.w	r6, #0
 800866e:	196b      	adds	r3, r5, r5
 8008670:	eb46 0406 	adc.w	r4, r6, r6
 8008674:	461a      	mov	r2, r3
 8008676:	4623      	mov	r3, r4
 8008678:	f7f8 fa88 	bl	8000b8c <__aeabi_uldivmod>
 800867c:	4603      	mov	r3, r0
 800867e:	460c      	mov	r4, r1
 8008680:	461a      	mov	r2, r3
 8008682:	4b0c      	ldr	r3, [pc, #48]	; (80086b4 <UART_SetConfig+0x384>)
 8008684:	fba3 1302 	umull	r1, r3, r3, r2
 8008688:	095b      	lsrs	r3, r3, #5
 800868a:	2164      	movs	r1, #100	; 0x64
 800868c:	fb01 f303 	mul.w	r3, r1, r3
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	00db      	lsls	r3, r3, #3
 8008694:	3332      	adds	r3, #50	; 0x32
 8008696:	4a07      	ldr	r2, [pc, #28]	; (80086b4 <UART_SetConfig+0x384>)
 8008698:	fba2 2303 	umull	r2, r3, r2, r3
 800869c:	095b      	lsrs	r3, r3, #5
 800869e:	f003 0207 	and.w	r2, r3, #7
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4442      	add	r2, r8
 80086a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80086aa:	e1b2      	b.n	8008a12 <UART_SetConfig+0x6e2>
 80086ac:	40011000 	.word	0x40011000
 80086b0:	40011400 	.word	0x40011400
 80086b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4ad7      	ldr	r2, [pc, #860]	; (8008a1c <UART_SetConfig+0x6ec>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d005      	beq.n	80086ce <UART_SetConfig+0x39e>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4ad6      	ldr	r2, [pc, #856]	; (8008a20 <UART_SetConfig+0x6f0>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	f040 80d1 	bne.w	8008870 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80086ce:	f7fe f9d3 	bl	8006a78 <HAL_RCC_GetPCLK2Freq>
 80086d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	469a      	mov	sl, r3
 80086d8:	f04f 0b00 	mov.w	fp, #0
 80086dc:	46d0      	mov	r8, sl
 80086de:	46d9      	mov	r9, fp
 80086e0:	eb18 0308 	adds.w	r3, r8, r8
 80086e4:	eb49 0409 	adc.w	r4, r9, r9
 80086e8:	4698      	mov	r8, r3
 80086ea:	46a1      	mov	r9, r4
 80086ec:	eb18 080a 	adds.w	r8, r8, sl
 80086f0:	eb49 090b 	adc.w	r9, r9, fp
 80086f4:	f04f 0100 	mov.w	r1, #0
 80086f8:	f04f 0200 	mov.w	r2, #0
 80086fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008700:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008704:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008708:	4688      	mov	r8, r1
 800870a:	4691      	mov	r9, r2
 800870c:	eb1a 0508 	adds.w	r5, sl, r8
 8008710:	eb4b 0609 	adc.w	r6, fp, r9
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	4619      	mov	r1, r3
 800871a:	f04f 0200 	mov.w	r2, #0
 800871e:	f04f 0300 	mov.w	r3, #0
 8008722:	f04f 0400 	mov.w	r4, #0
 8008726:	0094      	lsls	r4, r2, #2
 8008728:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800872c:	008b      	lsls	r3, r1, #2
 800872e:	461a      	mov	r2, r3
 8008730:	4623      	mov	r3, r4
 8008732:	4628      	mov	r0, r5
 8008734:	4631      	mov	r1, r6
 8008736:	f7f8 fa29 	bl	8000b8c <__aeabi_uldivmod>
 800873a:	4603      	mov	r3, r0
 800873c:	460c      	mov	r4, r1
 800873e:	461a      	mov	r2, r3
 8008740:	4bb8      	ldr	r3, [pc, #736]	; (8008a24 <UART_SetConfig+0x6f4>)
 8008742:	fba3 2302 	umull	r2, r3, r3, r2
 8008746:	095b      	lsrs	r3, r3, #5
 8008748:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	469b      	mov	fp, r3
 8008750:	f04f 0c00 	mov.w	ip, #0
 8008754:	46d9      	mov	r9, fp
 8008756:	46e2      	mov	sl, ip
 8008758:	eb19 0309 	adds.w	r3, r9, r9
 800875c:	eb4a 040a 	adc.w	r4, sl, sl
 8008760:	4699      	mov	r9, r3
 8008762:	46a2      	mov	sl, r4
 8008764:	eb19 090b 	adds.w	r9, r9, fp
 8008768:	eb4a 0a0c 	adc.w	sl, sl, ip
 800876c:	f04f 0100 	mov.w	r1, #0
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008778:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800877c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008780:	4689      	mov	r9, r1
 8008782:	4692      	mov	sl, r2
 8008784:	eb1b 0509 	adds.w	r5, fp, r9
 8008788:	eb4c 060a 	adc.w	r6, ip, sl
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	4619      	mov	r1, r3
 8008792:	f04f 0200 	mov.w	r2, #0
 8008796:	f04f 0300 	mov.w	r3, #0
 800879a:	f04f 0400 	mov.w	r4, #0
 800879e:	0094      	lsls	r4, r2, #2
 80087a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087a4:	008b      	lsls	r3, r1, #2
 80087a6:	461a      	mov	r2, r3
 80087a8:	4623      	mov	r3, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	4631      	mov	r1, r6
 80087ae:	f7f8 f9ed 	bl	8000b8c <__aeabi_uldivmod>
 80087b2:	4603      	mov	r3, r0
 80087b4:	460c      	mov	r4, r1
 80087b6:	461a      	mov	r2, r3
 80087b8:	4b9a      	ldr	r3, [pc, #616]	; (8008a24 <UART_SetConfig+0x6f4>)
 80087ba:	fba3 1302 	umull	r1, r3, r3, r2
 80087be:	095b      	lsrs	r3, r3, #5
 80087c0:	2164      	movs	r1, #100	; 0x64
 80087c2:	fb01 f303 	mul.w	r3, r1, r3
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	011b      	lsls	r3, r3, #4
 80087ca:	3332      	adds	r3, #50	; 0x32
 80087cc:	4a95      	ldr	r2, [pc, #596]	; (8008a24 <UART_SetConfig+0x6f4>)
 80087ce:	fba2 2303 	umull	r2, r3, r2, r3
 80087d2:	095b      	lsrs	r3, r3, #5
 80087d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087d8:	4498      	add	r8, r3
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	469b      	mov	fp, r3
 80087de:	f04f 0c00 	mov.w	ip, #0
 80087e2:	46d9      	mov	r9, fp
 80087e4:	46e2      	mov	sl, ip
 80087e6:	eb19 0309 	adds.w	r3, r9, r9
 80087ea:	eb4a 040a 	adc.w	r4, sl, sl
 80087ee:	4699      	mov	r9, r3
 80087f0:	46a2      	mov	sl, r4
 80087f2:	eb19 090b 	adds.w	r9, r9, fp
 80087f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80087fa:	f04f 0100 	mov.w	r1, #0
 80087fe:	f04f 0200 	mov.w	r2, #0
 8008802:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008806:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800880a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800880e:	4689      	mov	r9, r1
 8008810:	4692      	mov	sl, r2
 8008812:	eb1b 0509 	adds.w	r5, fp, r9
 8008816:	eb4c 060a 	adc.w	r6, ip, sl
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	4619      	mov	r1, r3
 8008820:	f04f 0200 	mov.w	r2, #0
 8008824:	f04f 0300 	mov.w	r3, #0
 8008828:	f04f 0400 	mov.w	r4, #0
 800882c:	0094      	lsls	r4, r2, #2
 800882e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008832:	008b      	lsls	r3, r1, #2
 8008834:	461a      	mov	r2, r3
 8008836:	4623      	mov	r3, r4
 8008838:	4628      	mov	r0, r5
 800883a:	4631      	mov	r1, r6
 800883c:	f7f8 f9a6 	bl	8000b8c <__aeabi_uldivmod>
 8008840:	4603      	mov	r3, r0
 8008842:	460c      	mov	r4, r1
 8008844:	461a      	mov	r2, r3
 8008846:	4b77      	ldr	r3, [pc, #476]	; (8008a24 <UART_SetConfig+0x6f4>)
 8008848:	fba3 1302 	umull	r1, r3, r3, r2
 800884c:	095b      	lsrs	r3, r3, #5
 800884e:	2164      	movs	r1, #100	; 0x64
 8008850:	fb01 f303 	mul.w	r3, r1, r3
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	3332      	adds	r3, #50	; 0x32
 800885a:	4a72      	ldr	r2, [pc, #456]	; (8008a24 <UART_SetConfig+0x6f4>)
 800885c:	fba2 2303 	umull	r2, r3, r2, r3
 8008860:	095b      	lsrs	r3, r3, #5
 8008862:	f003 020f 	and.w	r2, r3, #15
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4442      	add	r2, r8
 800886c:	609a      	str	r2, [r3, #8]
 800886e:	e0d0      	b.n	8008a12 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008870:	f7fe f8ee 	bl	8006a50 <HAL_RCC_GetPCLK1Freq>
 8008874:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	469a      	mov	sl, r3
 800887a:	f04f 0b00 	mov.w	fp, #0
 800887e:	46d0      	mov	r8, sl
 8008880:	46d9      	mov	r9, fp
 8008882:	eb18 0308 	adds.w	r3, r8, r8
 8008886:	eb49 0409 	adc.w	r4, r9, r9
 800888a:	4698      	mov	r8, r3
 800888c:	46a1      	mov	r9, r4
 800888e:	eb18 080a 	adds.w	r8, r8, sl
 8008892:	eb49 090b 	adc.w	r9, r9, fp
 8008896:	f04f 0100 	mov.w	r1, #0
 800889a:	f04f 0200 	mov.w	r2, #0
 800889e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80088a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80088a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80088aa:	4688      	mov	r8, r1
 80088ac:	4691      	mov	r9, r2
 80088ae:	eb1a 0508 	adds.w	r5, sl, r8
 80088b2:	eb4b 0609 	adc.w	r6, fp, r9
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	4619      	mov	r1, r3
 80088bc:	f04f 0200 	mov.w	r2, #0
 80088c0:	f04f 0300 	mov.w	r3, #0
 80088c4:	f04f 0400 	mov.w	r4, #0
 80088c8:	0094      	lsls	r4, r2, #2
 80088ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088ce:	008b      	lsls	r3, r1, #2
 80088d0:	461a      	mov	r2, r3
 80088d2:	4623      	mov	r3, r4
 80088d4:	4628      	mov	r0, r5
 80088d6:	4631      	mov	r1, r6
 80088d8:	f7f8 f958 	bl	8000b8c <__aeabi_uldivmod>
 80088dc:	4603      	mov	r3, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	461a      	mov	r2, r3
 80088e2:	4b50      	ldr	r3, [pc, #320]	; (8008a24 <UART_SetConfig+0x6f4>)
 80088e4:	fba3 2302 	umull	r2, r3, r3, r2
 80088e8:	095b      	lsrs	r3, r3, #5
 80088ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	469b      	mov	fp, r3
 80088f2:	f04f 0c00 	mov.w	ip, #0
 80088f6:	46d9      	mov	r9, fp
 80088f8:	46e2      	mov	sl, ip
 80088fa:	eb19 0309 	adds.w	r3, r9, r9
 80088fe:	eb4a 040a 	adc.w	r4, sl, sl
 8008902:	4699      	mov	r9, r3
 8008904:	46a2      	mov	sl, r4
 8008906:	eb19 090b 	adds.w	r9, r9, fp
 800890a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800890e:	f04f 0100 	mov.w	r1, #0
 8008912:	f04f 0200 	mov.w	r2, #0
 8008916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800891a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800891e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008922:	4689      	mov	r9, r1
 8008924:	4692      	mov	sl, r2
 8008926:	eb1b 0509 	adds.w	r5, fp, r9
 800892a:	eb4c 060a 	adc.w	r6, ip, sl
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	4619      	mov	r1, r3
 8008934:	f04f 0200 	mov.w	r2, #0
 8008938:	f04f 0300 	mov.w	r3, #0
 800893c:	f04f 0400 	mov.w	r4, #0
 8008940:	0094      	lsls	r4, r2, #2
 8008942:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008946:	008b      	lsls	r3, r1, #2
 8008948:	461a      	mov	r2, r3
 800894a:	4623      	mov	r3, r4
 800894c:	4628      	mov	r0, r5
 800894e:	4631      	mov	r1, r6
 8008950:	f7f8 f91c 	bl	8000b8c <__aeabi_uldivmod>
 8008954:	4603      	mov	r3, r0
 8008956:	460c      	mov	r4, r1
 8008958:	461a      	mov	r2, r3
 800895a:	4b32      	ldr	r3, [pc, #200]	; (8008a24 <UART_SetConfig+0x6f4>)
 800895c:	fba3 1302 	umull	r1, r3, r3, r2
 8008960:	095b      	lsrs	r3, r3, #5
 8008962:	2164      	movs	r1, #100	; 0x64
 8008964:	fb01 f303 	mul.w	r3, r1, r3
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	3332      	adds	r3, #50	; 0x32
 800896e:	4a2d      	ldr	r2, [pc, #180]	; (8008a24 <UART_SetConfig+0x6f4>)
 8008970:	fba2 2303 	umull	r2, r3, r2, r3
 8008974:	095b      	lsrs	r3, r3, #5
 8008976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800897a:	4498      	add	r8, r3
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	469b      	mov	fp, r3
 8008980:	f04f 0c00 	mov.w	ip, #0
 8008984:	46d9      	mov	r9, fp
 8008986:	46e2      	mov	sl, ip
 8008988:	eb19 0309 	adds.w	r3, r9, r9
 800898c:	eb4a 040a 	adc.w	r4, sl, sl
 8008990:	4699      	mov	r9, r3
 8008992:	46a2      	mov	sl, r4
 8008994:	eb19 090b 	adds.w	r9, r9, fp
 8008998:	eb4a 0a0c 	adc.w	sl, sl, ip
 800899c:	f04f 0100 	mov.w	r1, #0
 80089a0:	f04f 0200 	mov.w	r2, #0
 80089a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089b0:	4689      	mov	r9, r1
 80089b2:	4692      	mov	sl, r2
 80089b4:	eb1b 0509 	adds.w	r5, fp, r9
 80089b8:	eb4c 060a 	adc.w	r6, ip, sl
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	4619      	mov	r1, r3
 80089c2:	f04f 0200 	mov.w	r2, #0
 80089c6:	f04f 0300 	mov.w	r3, #0
 80089ca:	f04f 0400 	mov.w	r4, #0
 80089ce:	0094      	lsls	r4, r2, #2
 80089d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80089d4:	008b      	lsls	r3, r1, #2
 80089d6:	461a      	mov	r2, r3
 80089d8:	4623      	mov	r3, r4
 80089da:	4628      	mov	r0, r5
 80089dc:	4631      	mov	r1, r6
 80089de:	f7f8 f8d5 	bl	8000b8c <__aeabi_uldivmod>
 80089e2:	4603      	mov	r3, r0
 80089e4:	460c      	mov	r4, r1
 80089e6:	461a      	mov	r2, r3
 80089e8:	4b0e      	ldr	r3, [pc, #56]	; (8008a24 <UART_SetConfig+0x6f4>)
 80089ea:	fba3 1302 	umull	r1, r3, r3, r2
 80089ee:	095b      	lsrs	r3, r3, #5
 80089f0:	2164      	movs	r1, #100	; 0x64
 80089f2:	fb01 f303 	mul.w	r3, r1, r3
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	011b      	lsls	r3, r3, #4
 80089fa:	3332      	adds	r3, #50	; 0x32
 80089fc:	4a09      	ldr	r2, [pc, #36]	; (8008a24 <UART_SetConfig+0x6f4>)
 80089fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008a02:	095b      	lsrs	r3, r3, #5
 8008a04:	f003 020f 	and.w	r2, r3, #15
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4442      	add	r2, r8
 8008a0e:	609a      	str	r2, [r3, #8]
}
 8008a10:	e7ff      	b.n	8008a12 <UART_SetConfig+0x6e2>
 8008a12:	bf00      	nop
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1c:	40011000 	.word	0x40011000
 8008a20:	40011400 	.word	0x40011400
 8008a24:	51eb851f 	.word	0x51eb851f

08008a28 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d029      	beq.n	8008a96 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008a4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a52:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a5c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008a62:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008a68:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008a6e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008a74:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008a7a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008a80:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008a86:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	e034      	b.n	8008b00 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008aa2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008aac:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008ab2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008ac6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008aca:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ad4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008ada:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008ae0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008ae6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008aec:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b087      	sub	sp, #28
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d02e      	beq.n	8008b86 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b34:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008b44:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008b4e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008b58:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008b62:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008b6c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008b76:	4313      	orrs	r3, r2
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	609a      	str	r2, [r3, #8]
 8008b84:	e03b      	b.n	8008bfe <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b96:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008bbc:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008bcc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008bd6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008be0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	3b01      	subs	r3, #1
 8008be8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008bea:	4313      	orrs	r3, r2
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	371c      	adds	r7, #28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008c28:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008c32:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008c44:	f7fb fbe2 	bl	800440c <HAL_GetTick>
 8008c48:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008c4a:	e010      	b.n	8008c6e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c52:	d00c      	beq.n	8008c6e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d007      	beq.n	8008c6a <FMC_SDRAM_SendCommand+0x5e>
 8008c5a:	f7fb fbd7 	bl	800440c <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d201      	bcs.n	8008c6e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e006      	b.n	8008c7c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b20      	cmp	r3, #32
 8008c78:	d0e8      	beq.n	8008c4c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	695a      	ldr	r2, [r3, #20]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	431a      	orrs	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <cabs>:
 8008caa:	b508      	push	{r3, lr}
 8008cac:	ed2d 8b06 	vpush	{d8-d10}
 8008cb0:	eeb0 aa40 	vmov.f32	s20, s0
 8008cb4:	eef0 aa60 	vmov.f32	s21, s1
 8008cb8:	eeb0 9a41 	vmov.f32	s18, s2
 8008cbc:	eef0 9a61 	vmov.f32	s19, s3
 8008cc0:	f000 f879 	bl	8008db6 <creal>
 8008cc4:	eeb0 1a49 	vmov.f32	s2, s18
 8008cc8:	eef0 1a69 	vmov.f32	s3, s19
 8008ccc:	eeb0 8a40 	vmov.f32	s16, s0
 8008cd0:	eef0 8a60 	vmov.f32	s17, s1
 8008cd4:	eeb0 0a4a 	vmov.f32	s0, s20
 8008cd8:	eef0 0a6a 	vmov.f32	s1, s21
 8008cdc:	f000 f866 	bl	8008dac <cimag>
 8008ce0:	eeb0 1a40 	vmov.f32	s2, s0
 8008ce4:	eef0 1a60 	vmov.f32	s3, s1
 8008ce8:	eeb0 0a48 	vmov.f32	s0, s16
 8008cec:	eef0 0a68 	vmov.f32	s1, s17
 8008cf0:	ecbd 8b06 	vpop	{d8-d10}
 8008cf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008cf8:	f000 b966 	b.w	8008fc8 <hypot>

08008cfc <cexp>:
 8008cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d00:	ed2d 8b06 	vpush	{d8-d10}
 8008d04:	eeb0 aa40 	vmov.f32	s20, s0
 8008d08:	eef0 aa60 	vmov.f32	s21, s1
 8008d0c:	eeb0 8a41 	vmov.f32	s16, s2
 8008d10:	eef0 8a61 	vmov.f32	s17, s3
 8008d14:	f000 f84f 	bl	8008db6 <creal>
 8008d18:	eeb0 1a48 	vmov.f32	s2, s16
 8008d1c:	eef0 1a68 	vmov.f32	s3, s17
 8008d20:	eeb0 9a40 	vmov.f32	s18, s0
 8008d24:	eef0 9a60 	vmov.f32	s19, s1
 8008d28:	eeb0 0a4a 	vmov.f32	s0, s20
 8008d2c:	eef0 0a6a 	vmov.f32	s1, s21
 8008d30:	f000 f83c 	bl	8008dac <cimag>
 8008d34:	eeb0 8a40 	vmov.f32	s16, s0
 8008d38:	eef0 8a60 	vmov.f32	s17, s1
 8008d3c:	eeb0 0a49 	vmov.f32	s0, s18
 8008d40:	eef0 0a69 	vmov.f32	s1, s19
 8008d44:	f000 f8c4 	bl	8008ed0 <exp>
 8008d48:	ec57 6b10 	vmov	r6, r7, d0
 8008d4c:	eeb0 0a48 	vmov.f32	s0, s16
 8008d50:	eef0 0a68 	vmov.f32	s1, s17
 8008d54:	f000 f874 	bl	8008e40 <sin>
 8008d58:	4632      	mov	r2, r6
 8008d5a:	463b      	mov	r3, r7
 8008d5c:	ec51 0b10 	vmov	r0, r1, d0
 8008d60:	f7f7 fc02 	bl	8000568 <__aeabi_dmul>
 8008d64:	eeb0 0a48 	vmov.f32	s0, s16
 8008d68:	eef0 0a68 	vmov.f32	s1, s17
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	460d      	mov	r5, r1
 8008d70:	f000 f822 	bl	8008db8 <cos>
 8008d74:	4632      	mov	r2, r6
 8008d76:	ec51 0b10 	vmov	r0, r1, d0
 8008d7a:	463b      	mov	r3, r7
 8008d7c:	f7f7 fbf4 	bl	8000568 <__aeabi_dmul>
 8008d80:	2200      	movs	r2, #0
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	2300      	movs	r3, #0
 8008d88:	4620      	mov	r0, r4
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	f7f7 fbec 	bl	8000568 <__aeabi_dmul>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4630      	mov	r0, r6
 8008d96:	4639      	mov	r1, r7
 8008d98:	f7f7 fa30 	bl	80001fc <__adddf3>
 8008d9c:	ecbd 8b06 	vpop	{d8-d10}
 8008da0:	ec41 0b10 	vmov	d0, r0, r1
 8008da4:	ec45 4b11 	vmov	d1, r4, r5
 8008da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008dac <cimag>:
 8008dac:	eeb0 0a41 	vmov.f32	s0, s2
 8008db0:	eef0 0a61 	vmov.f32	s1, s3
 8008db4:	4770      	bx	lr

08008db6 <creal>:
 8008db6:	4770      	bx	lr

08008db8 <cos>:
 8008db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dba:	ec51 0b10 	vmov	r0, r1, d0
 8008dbe:	4a1e      	ldr	r2, [pc, #120]	; (8008e38 <cos+0x80>)
 8008dc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	dc06      	bgt.n	8008dd6 <cos+0x1e>
 8008dc8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8008e30 <cos+0x78>
 8008dcc:	f000 fe94 	bl	8009af8 <__kernel_cos>
 8008dd0:	ec51 0b10 	vmov	r0, r1, d0
 8008dd4:	e007      	b.n	8008de6 <cos+0x2e>
 8008dd6:	4a19      	ldr	r2, [pc, #100]	; (8008e3c <cos+0x84>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	dd09      	ble.n	8008df0 <cos+0x38>
 8008ddc:	ee10 2a10 	vmov	r2, s0
 8008de0:	460b      	mov	r3, r1
 8008de2:	f7f7 fa09 	bl	80001f8 <__aeabi_dsub>
 8008de6:	ec41 0b10 	vmov	d0, r0, r1
 8008dea:	b005      	add	sp, #20
 8008dec:	f85d fb04 	ldr.w	pc, [sp], #4
 8008df0:	4668      	mov	r0, sp
 8008df2:	f000 fbdd 	bl	80095b0 <__ieee754_rem_pio2>
 8008df6:	f000 0003 	and.w	r0, r0, #3
 8008dfa:	2801      	cmp	r0, #1
 8008dfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e00:	ed9d 0b00 	vldr	d0, [sp]
 8008e04:	d007      	beq.n	8008e16 <cos+0x5e>
 8008e06:	2802      	cmp	r0, #2
 8008e08:	d00e      	beq.n	8008e28 <cos+0x70>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d0de      	beq.n	8008dcc <cos+0x14>
 8008e0e:	2001      	movs	r0, #1
 8008e10:	f001 fa7a 	bl	800a308 <__kernel_sin>
 8008e14:	e7dc      	b.n	8008dd0 <cos+0x18>
 8008e16:	f001 fa77 	bl	800a308 <__kernel_sin>
 8008e1a:	ec53 2b10 	vmov	r2, r3, d0
 8008e1e:	ee10 0a10 	vmov	r0, s0
 8008e22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008e26:	e7de      	b.n	8008de6 <cos+0x2e>
 8008e28:	f000 fe66 	bl	8009af8 <__kernel_cos>
 8008e2c:	e7f5      	b.n	8008e1a <cos+0x62>
 8008e2e:	bf00      	nop
	...
 8008e38:	3fe921fb 	.word	0x3fe921fb
 8008e3c:	7fefffff 	.word	0x7fefffff

08008e40 <sin>:
 8008e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e42:	ec51 0b10 	vmov	r0, r1, d0
 8008e46:	4a20      	ldr	r2, [pc, #128]	; (8008ec8 <sin+0x88>)
 8008e48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	dc07      	bgt.n	8008e60 <sin+0x20>
 8008e50:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8008ec0 <sin+0x80>
 8008e54:	2000      	movs	r0, #0
 8008e56:	f001 fa57 	bl	800a308 <__kernel_sin>
 8008e5a:	ec51 0b10 	vmov	r0, r1, d0
 8008e5e:	e007      	b.n	8008e70 <sin+0x30>
 8008e60:	4a1a      	ldr	r2, [pc, #104]	; (8008ecc <sin+0x8c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	dd09      	ble.n	8008e7a <sin+0x3a>
 8008e66:	ee10 2a10 	vmov	r2, s0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	f7f7 f9c4 	bl	80001f8 <__aeabi_dsub>
 8008e70:	ec41 0b10 	vmov	d0, r0, r1
 8008e74:	b005      	add	sp, #20
 8008e76:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e7a:	4668      	mov	r0, sp
 8008e7c:	f000 fb98 	bl	80095b0 <__ieee754_rem_pio2>
 8008e80:	f000 0003 	and.w	r0, r0, #3
 8008e84:	2801      	cmp	r0, #1
 8008e86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e8a:	ed9d 0b00 	vldr	d0, [sp]
 8008e8e:	d004      	beq.n	8008e9a <sin+0x5a>
 8008e90:	2802      	cmp	r0, #2
 8008e92:	d005      	beq.n	8008ea0 <sin+0x60>
 8008e94:	b970      	cbnz	r0, 8008eb4 <sin+0x74>
 8008e96:	2001      	movs	r0, #1
 8008e98:	e7dd      	b.n	8008e56 <sin+0x16>
 8008e9a:	f000 fe2d 	bl	8009af8 <__kernel_cos>
 8008e9e:	e7dc      	b.n	8008e5a <sin+0x1a>
 8008ea0:	2001      	movs	r0, #1
 8008ea2:	f001 fa31 	bl	800a308 <__kernel_sin>
 8008ea6:	ec53 2b10 	vmov	r2, r3, d0
 8008eaa:	ee10 0a10 	vmov	r0, s0
 8008eae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008eb2:	e7dd      	b.n	8008e70 <sin+0x30>
 8008eb4:	f000 fe20 	bl	8009af8 <__kernel_cos>
 8008eb8:	e7f5      	b.n	8008ea6 <sin+0x66>
 8008eba:	bf00      	nop
 8008ebc:	f3af 8000 	nop.w
	...
 8008ec8:	3fe921fb 	.word	0x3fe921fb
 8008ecc:	7fefffff 	.word	0x7fefffff

08008ed0 <exp>:
 8008ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ed2:	ed2d 8b02 	vpush	{d8}
 8008ed6:	4e38      	ldr	r6, [pc, #224]	; (8008fb8 <exp+0xe8>)
 8008ed8:	b08b      	sub	sp, #44	; 0x2c
 8008eda:	ec55 4b10 	vmov	r4, r5, d0
 8008ede:	f000 f8d7 	bl	8009090 <__ieee754_exp>
 8008ee2:	f996 3000 	ldrsb.w	r3, [r6]
 8008ee6:	eeb0 8a40 	vmov.f32	s16, s0
 8008eea:	eef0 8a60 	vmov.f32	s17, s1
 8008eee:	3301      	adds	r3, #1
 8008ef0:	d02c      	beq.n	8008f4c <exp+0x7c>
 8008ef2:	ec45 4b10 	vmov	d0, r4, r5
 8008ef6:	f001 faca 	bl	800a48e <finite>
 8008efa:	b338      	cbz	r0, 8008f4c <exp+0x7c>
 8008efc:	a32a      	add	r3, pc, #168	; (adr r3, 8008fa8 <exp+0xd8>)
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	4620      	mov	r0, r4
 8008f04:	4629      	mov	r1, r5
 8008f06:	f7f7 fdbf 	bl	8000a88 <__aeabi_dcmpgt>
 8008f0a:	4607      	mov	r7, r0
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d030      	beq.n	8008f72 <exp+0xa2>
 8008f10:	2303      	movs	r3, #3
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	4b29      	ldr	r3, [pc, #164]	; (8008fbc <exp+0xec>)
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	2300      	movs	r3, #0
 8008f1a:	9308      	str	r3, [sp, #32]
 8008f1c:	f996 3000 	ldrsb.w	r3, [r6]
 8008f20:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008f24:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008f28:	b9c3      	cbnz	r3, 8008f5c <exp+0x8c>
 8008f2a:	4b25      	ldr	r3, [pc, #148]	; (8008fc0 <exp+0xf0>)
 8008f2c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008f30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008f34:	4668      	mov	r0, sp
 8008f36:	f001 fb37 	bl	800a5a8 <matherr>
 8008f3a:	b1a8      	cbz	r0, 8008f68 <exp+0x98>
 8008f3c:	9b08      	ldr	r3, [sp, #32]
 8008f3e:	b11b      	cbz	r3, 8008f48 <exp+0x78>
 8008f40:	f001 fbe8 	bl	800a714 <__errno>
 8008f44:	9b08      	ldr	r3, [sp, #32]
 8008f46:	6003      	str	r3, [r0, #0]
 8008f48:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008f4c:	eeb0 0a48 	vmov.f32	s0, s16
 8008f50:	eef0 0a68 	vmov.f32	s1, s17
 8008f54:	b00b      	add	sp, #44	; 0x2c
 8008f56:	ecbd 8b02 	vpop	{d8}
 8008f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f5c:	4919      	ldr	r1, [pc, #100]	; (8008fc4 <exp+0xf4>)
 8008f5e:	2000      	movs	r0, #0
 8008f60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d1e5      	bne.n	8008f34 <exp+0x64>
 8008f68:	f001 fbd4 	bl	800a714 <__errno>
 8008f6c:	2322      	movs	r3, #34	; 0x22
 8008f6e:	6003      	str	r3, [r0, #0]
 8008f70:	e7e4      	b.n	8008f3c <exp+0x6c>
 8008f72:	a30f      	add	r3, pc, #60	; (adr r3, 8008fb0 <exp+0xe0>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	4620      	mov	r0, r4
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	f7f7 fd66 	bl	8000a4c <__aeabi_dcmplt>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d0e3      	beq.n	8008f4c <exp+0x7c>
 8008f84:	2304      	movs	r3, #4
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	4b0c      	ldr	r3, [pc, #48]	; (8008fbc <exp+0xec>)
 8008f8a:	9301      	str	r3, [sp, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008f94:	9708      	str	r7, [sp, #32]
 8008f96:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008f9a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008f9e:	f996 3000 	ldrsb.w	r3, [r6]
 8008fa2:	e7df      	b.n	8008f64 <exp+0x94>
 8008fa4:	f3af 8000 	nop.w
 8008fa8:	fefa39ef 	.word	0xfefa39ef
 8008fac:	40862e42 	.word	0x40862e42
 8008fb0:	d52d3051 	.word	0xd52d3051
 8008fb4:	c0874910 	.word	0xc0874910
 8008fb8:	20000061 	.word	0x20000061
 8008fbc:	0800ebe8 	.word	0x0800ebe8
 8008fc0:	47efffff 	.word	0x47efffff
 8008fc4:	7ff00000 	.word	0x7ff00000

08008fc8 <hypot>:
 8008fc8:	b530      	push	{r4, r5, lr}
 8008fca:	ed2d 8b06 	vpush	{d8-d10}
 8008fce:	eeb0 aa40 	vmov.f32	s20, s0
 8008fd2:	eef0 aa60 	vmov.f32	s21, s1
 8008fd6:	eeb0 9a41 	vmov.f32	s18, s2
 8008fda:	eef0 9a61 	vmov.f32	s19, s3
 8008fde:	4c27      	ldr	r4, [pc, #156]	; (800907c <hypot+0xb4>)
 8008fe0:	b08b      	sub	sp, #44	; 0x2c
 8008fe2:	f000 f9c3 	bl	800936c <__ieee754_hypot>
 8008fe6:	f994 3000 	ldrsb.w	r3, [r4]
 8008fea:	eeb0 8a40 	vmov.f32	s16, s0
 8008fee:	eef0 8a60 	vmov.f32	s17, s1
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	d02e      	beq.n	8009054 <hypot+0x8c>
 8008ff6:	f001 fa4a 	bl	800a48e <finite>
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	bb50      	cbnz	r0, 8009054 <hypot+0x8c>
 8008ffe:	eeb0 0a4a 	vmov.f32	s0, s20
 8009002:	eef0 0a6a 	vmov.f32	s1, s21
 8009006:	f001 fa42 	bl	800a48e <finite>
 800900a:	b318      	cbz	r0, 8009054 <hypot+0x8c>
 800900c:	eeb0 0a49 	vmov.f32	s0, s18
 8009010:	eef0 0a69 	vmov.f32	s1, s19
 8009014:	f001 fa3b 	bl	800a48e <finite>
 8009018:	b1e0      	cbz	r0, 8009054 <hypot+0x8c>
 800901a:	2303      	movs	r3, #3
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	4b18      	ldr	r3, [pc, #96]	; (8009080 <hypot+0xb8>)
 8009020:	9301      	str	r3, [sp, #4]
 8009022:	f994 3000 	ldrsb.w	r3, [r4]
 8009026:	9508      	str	r5, [sp, #32]
 8009028:	ed8d ab02 	vstr	d10, [sp, #8]
 800902c:	ed8d 9b04 	vstr	d9, [sp, #16]
 8009030:	b9c3      	cbnz	r3, 8009064 <hypot+0x9c>
 8009032:	4b14      	ldr	r3, [pc, #80]	; (8009084 <hypot+0xbc>)
 8009034:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009038:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800903c:	4668      	mov	r0, sp
 800903e:	f001 fab3 	bl	800a5a8 <matherr>
 8009042:	b1a8      	cbz	r0, 8009070 <hypot+0xa8>
 8009044:	9b08      	ldr	r3, [sp, #32]
 8009046:	b11b      	cbz	r3, 8009050 <hypot+0x88>
 8009048:	f001 fb64 	bl	800a714 <__errno>
 800904c:	9b08      	ldr	r3, [sp, #32]
 800904e:	6003      	str	r3, [r0, #0]
 8009050:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009054:	eeb0 0a48 	vmov.f32	s0, s16
 8009058:	eef0 0a68 	vmov.f32	s1, s17
 800905c:	b00b      	add	sp, #44	; 0x2c
 800905e:	ecbd 8b06 	vpop	{d8-d10}
 8009062:	bd30      	pop	{r4, r5, pc}
 8009064:	4908      	ldr	r1, [pc, #32]	; (8009088 <hypot+0xc0>)
 8009066:	2000      	movs	r0, #0
 8009068:	2b02      	cmp	r3, #2
 800906a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800906e:	d1e5      	bne.n	800903c <hypot+0x74>
 8009070:	f001 fb50 	bl	800a714 <__errno>
 8009074:	2322      	movs	r3, #34	; 0x22
 8009076:	6003      	str	r3, [r0, #0]
 8009078:	e7e4      	b.n	8009044 <hypot+0x7c>
 800907a:	bf00      	nop
 800907c:	20000061 	.word	0x20000061
 8009080:	0800ebec 	.word	0x0800ebec
 8009084:	47efffff 	.word	0x47efffff
 8009088:	7ff00000 	.word	0x7ff00000
 800908c:	00000000 	.word	0x00000000

08009090 <__ieee754_exp>:
 8009090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009094:	ec55 4b10 	vmov	r4, r5, d0
 8009098:	4aab      	ldr	r2, [pc, #684]	; (8009348 <__ieee754_exp+0x2b8>)
 800909a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800909e:	4296      	cmp	r6, r2
 80090a0:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 80090a4:	d932      	bls.n	800910c <__ieee754_exp+0x7c>
 80090a6:	4aa9      	ldr	r2, [pc, #676]	; (800934c <__ieee754_exp+0x2bc>)
 80090a8:	4296      	cmp	r6, r2
 80090aa:	d913      	bls.n	80090d4 <__ieee754_exp+0x44>
 80090ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80090b0:	4323      	orrs	r3, r4
 80090b2:	ee10 2a10 	vmov	r2, s0
 80090b6:	d007      	beq.n	80090c8 <__ieee754_exp+0x38>
 80090b8:	462b      	mov	r3, r5
 80090ba:	4620      	mov	r0, r4
 80090bc:	4629      	mov	r1, r5
 80090be:	f7f7 f89d 	bl	80001fc <__adddf3>
 80090c2:	4604      	mov	r4, r0
 80090c4:	460d      	mov	r5, r1
 80090c6:	e000      	b.n	80090ca <__ieee754_exp+0x3a>
 80090c8:	b9ef      	cbnz	r7, 8009106 <__ieee754_exp+0x76>
 80090ca:	ec45 4b10 	vmov	d0, r4, r5
 80090ce:	b004      	add	sp, #16
 80090d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d4:	a386      	add	r3, pc, #536	; (adr r3, 80092f0 <__ieee754_exp+0x260>)
 80090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090da:	ee10 0a10 	vmov	r0, s0
 80090de:	4629      	mov	r1, r5
 80090e0:	f7f7 fcd2 	bl	8000a88 <__aeabi_dcmpgt>
 80090e4:	b138      	cbz	r0, 80090f6 <__ieee754_exp+0x66>
 80090e6:	a384      	add	r3, pc, #528	; (adr r3, 80092f8 <__ieee754_exp+0x268>)
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	4610      	mov	r0, r2
 80090ee:	4619      	mov	r1, r3
 80090f0:	f7f7 fa3a 	bl	8000568 <__aeabi_dmul>
 80090f4:	e7e5      	b.n	80090c2 <__ieee754_exp+0x32>
 80090f6:	a382      	add	r3, pc, #520	; (adr r3, 8009300 <__ieee754_exp+0x270>)
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	4620      	mov	r0, r4
 80090fe:	4629      	mov	r1, r5
 8009100:	f7f7 fca4 	bl	8000a4c <__aeabi_dcmplt>
 8009104:	b130      	cbz	r0, 8009114 <__ieee754_exp+0x84>
 8009106:	2400      	movs	r4, #0
 8009108:	2500      	movs	r5, #0
 800910a:	e7de      	b.n	80090ca <__ieee754_exp+0x3a>
 800910c:	4b90      	ldr	r3, [pc, #576]	; (8009350 <__ieee754_exp+0x2c0>)
 800910e:	429e      	cmp	r6, r3
 8009110:	f240 80a6 	bls.w	8009260 <__ieee754_exp+0x1d0>
 8009114:	4b8f      	ldr	r3, [pc, #572]	; (8009354 <__ieee754_exp+0x2c4>)
 8009116:	429e      	cmp	r6, r3
 8009118:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800911c:	d875      	bhi.n	800920a <__ieee754_exp+0x17a>
 800911e:	4b8e      	ldr	r3, [pc, #568]	; (8009358 <__ieee754_exp+0x2c8>)
 8009120:	4e8e      	ldr	r6, [pc, #568]	; (800935c <__ieee754_exp+0x2cc>)
 8009122:	4443      	add	r3, r8
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	4620      	mov	r0, r4
 800912a:	4629      	mov	r1, r5
 800912c:	f7f7 f864 	bl	80001f8 <__aeabi_dsub>
 8009130:	4446      	add	r6, r8
 8009132:	e9cd 0100 	strd	r0, r1, [sp]
 8009136:	e9d6 8900 	ldrd	r8, r9, [r6]
 800913a:	f1c7 0a01 	rsb	sl, r7, #1
 800913e:	ebaa 0a07 	sub.w	sl, sl, r7
 8009142:	4642      	mov	r2, r8
 8009144:	464b      	mov	r3, r9
 8009146:	e9dd 0100 	ldrd	r0, r1, [sp]
 800914a:	f7f7 f855 	bl	80001f8 <__aeabi_dsub>
 800914e:	4604      	mov	r4, r0
 8009150:	460d      	mov	r5, r1
 8009152:	4622      	mov	r2, r4
 8009154:	462b      	mov	r3, r5
 8009156:	4620      	mov	r0, r4
 8009158:	4629      	mov	r1, r5
 800915a:	f7f7 fa05 	bl	8000568 <__aeabi_dmul>
 800915e:	a36a      	add	r3, pc, #424	; (adr r3, 8009308 <__ieee754_exp+0x278>)
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	4606      	mov	r6, r0
 8009166:	460f      	mov	r7, r1
 8009168:	f7f7 f9fe 	bl	8000568 <__aeabi_dmul>
 800916c:	a368      	add	r3, pc, #416	; (adr r3, 8009310 <__ieee754_exp+0x280>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f7 f841 	bl	80001f8 <__aeabi_dsub>
 8009176:	4632      	mov	r2, r6
 8009178:	463b      	mov	r3, r7
 800917a:	f7f7 f9f5 	bl	8000568 <__aeabi_dmul>
 800917e:	a366      	add	r3, pc, #408	; (adr r3, 8009318 <__ieee754_exp+0x288>)
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	f7f7 f83a 	bl	80001fc <__adddf3>
 8009188:	4632      	mov	r2, r6
 800918a:	463b      	mov	r3, r7
 800918c:	f7f7 f9ec 	bl	8000568 <__aeabi_dmul>
 8009190:	a363      	add	r3, pc, #396	; (adr r3, 8009320 <__ieee754_exp+0x290>)
 8009192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009196:	f7f7 f82f 	bl	80001f8 <__aeabi_dsub>
 800919a:	4632      	mov	r2, r6
 800919c:	463b      	mov	r3, r7
 800919e:	f7f7 f9e3 	bl	8000568 <__aeabi_dmul>
 80091a2:	a361      	add	r3, pc, #388	; (adr r3, 8009328 <__ieee754_exp+0x298>)
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	f7f7 f828 	bl	80001fc <__adddf3>
 80091ac:	4632      	mov	r2, r6
 80091ae:	463b      	mov	r3, r7
 80091b0:	f7f7 f9da 	bl	8000568 <__aeabi_dmul>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	4620      	mov	r0, r4
 80091ba:	4629      	mov	r1, r5
 80091bc:	f7f7 f81c 	bl	80001f8 <__aeabi_dsub>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4606      	mov	r6, r0
 80091c6:	460f      	mov	r7, r1
 80091c8:	4620      	mov	r0, r4
 80091ca:	4629      	mov	r1, r5
 80091cc:	f7f7 f9cc 	bl	8000568 <__aeabi_dmul>
 80091d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091d4:	f1ba 0f00 	cmp.w	sl, #0
 80091d8:	d15c      	bne.n	8009294 <__ieee754_exp+0x204>
 80091da:	2200      	movs	r2, #0
 80091dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091e0:	4630      	mov	r0, r6
 80091e2:	4639      	mov	r1, r7
 80091e4:	f7f7 f808 	bl	80001f8 <__aeabi_dsub>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091f0:	f7f7 fae4 	bl	80007bc <__aeabi_ddiv>
 80091f4:	4622      	mov	r2, r4
 80091f6:	462b      	mov	r3, r5
 80091f8:	f7f6 fffe 	bl	80001f8 <__aeabi_dsub>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	2000      	movs	r0, #0
 8009202:	4957      	ldr	r1, [pc, #348]	; (8009360 <__ieee754_exp+0x2d0>)
 8009204:	f7f6 fff8 	bl	80001f8 <__aeabi_dsub>
 8009208:	e75b      	b.n	80090c2 <__ieee754_exp+0x32>
 800920a:	4e56      	ldr	r6, [pc, #344]	; (8009364 <__ieee754_exp+0x2d4>)
 800920c:	a348      	add	r3, pc, #288	; (adr r3, 8009330 <__ieee754_exp+0x2a0>)
 800920e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009212:	4446      	add	r6, r8
 8009214:	4620      	mov	r0, r4
 8009216:	4629      	mov	r1, r5
 8009218:	f7f7 f9a6 	bl	8000568 <__aeabi_dmul>
 800921c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009220:	f7f6 ffec 	bl	80001fc <__adddf3>
 8009224:	f7f7 fc3a 	bl	8000a9c <__aeabi_d2iz>
 8009228:	4682      	mov	sl, r0
 800922a:	f7f7 f933 	bl	8000494 <__aeabi_i2d>
 800922e:	a342      	add	r3, pc, #264	; (adr r3, 8009338 <__ieee754_exp+0x2a8>)
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	4606      	mov	r6, r0
 8009236:	460f      	mov	r7, r1
 8009238:	f7f7 f996 	bl	8000568 <__aeabi_dmul>
 800923c:	4602      	mov	r2, r0
 800923e:	460b      	mov	r3, r1
 8009240:	4620      	mov	r0, r4
 8009242:	4629      	mov	r1, r5
 8009244:	f7f6 ffd8 	bl	80001f8 <__aeabi_dsub>
 8009248:	a33d      	add	r3, pc, #244	; (adr r3, 8009340 <__ieee754_exp+0x2b0>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	e9cd 0100 	strd	r0, r1, [sp]
 8009252:	4630      	mov	r0, r6
 8009254:	4639      	mov	r1, r7
 8009256:	f7f7 f987 	bl	8000568 <__aeabi_dmul>
 800925a:	4680      	mov	r8, r0
 800925c:	4689      	mov	r9, r1
 800925e:	e770      	b.n	8009142 <__ieee754_exp+0xb2>
 8009260:	4b41      	ldr	r3, [pc, #260]	; (8009368 <__ieee754_exp+0x2d8>)
 8009262:	429e      	cmp	r6, r3
 8009264:	d811      	bhi.n	800928a <__ieee754_exp+0x1fa>
 8009266:	a324      	add	r3, pc, #144	; (adr r3, 80092f8 <__ieee754_exp+0x268>)
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	ee10 0a10 	vmov	r0, s0
 8009270:	4629      	mov	r1, r5
 8009272:	f7f6 ffc3 	bl	80001fc <__adddf3>
 8009276:	2200      	movs	r2, #0
 8009278:	4b39      	ldr	r3, [pc, #228]	; (8009360 <__ieee754_exp+0x2d0>)
 800927a:	f7f7 fc05 	bl	8000a88 <__aeabi_dcmpgt>
 800927e:	b138      	cbz	r0, 8009290 <__ieee754_exp+0x200>
 8009280:	2200      	movs	r2, #0
 8009282:	4b37      	ldr	r3, [pc, #220]	; (8009360 <__ieee754_exp+0x2d0>)
 8009284:	4620      	mov	r0, r4
 8009286:	4629      	mov	r1, r5
 8009288:	e719      	b.n	80090be <__ieee754_exp+0x2e>
 800928a:	f04f 0a00 	mov.w	sl, #0
 800928e:	e760      	b.n	8009152 <__ieee754_exp+0xc2>
 8009290:	4682      	mov	sl, r0
 8009292:	e75e      	b.n	8009152 <__ieee754_exp+0xc2>
 8009294:	4632      	mov	r2, r6
 8009296:	463b      	mov	r3, r7
 8009298:	2000      	movs	r0, #0
 800929a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800929e:	f7f6 ffab 	bl	80001f8 <__aeabi_dsub>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092aa:	f7f7 fa87 	bl	80007bc <__aeabi_ddiv>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4640      	mov	r0, r8
 80092b4:	4649      	mov	r1, r9
 80092b6:	f7f6 ff9f 	bl	80001f8 <__aeabi_dsub>
 80092ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092be:	f7f6 ff9b 	bl	80001f8 <__aeabi_dsub>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	2000      	movs	r0, #0
 80092c8:	4925      	ldr	r1, [pc, #148]	; (8009360 <__ieee754_exp+0x2d0>)
 80092ca:	f7f6 ff95 	bl	80001f8 <__aeabi_dsub>
 80092ce:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80092d2:	4592      	cmp	sl, r2
 80092d4:	db02      	blt.n	80092dc <__ieee754_exp+0x24c>
 80092d6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80092da:	e6f2      	b.n	80090c2 <__ieee754_exp+0x32>
 80092dc:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80092e0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80092e4:	2200      	movs	r2, #0
 80092e6:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80092ea:	e701      	b.n	80090f0 <__ieee754_exp+0x60>
 80092ec:	f3af 8000 	nop.w
 80092f0:	fefa39ef 	.word	0xfefa39ef
 80092f4:	40862e42 	.word	0x40862e42
 80092f8:	8800759c 	.word	0x8800759c
 80092fc:	7e37e43c 	.word	0x7e37e43c
 8009300:	d52d3051 	.word	0xd52d3051
 8009304:	c0874910 	.word	0xc0874910
 8009308:	72bea4d0 	.word	0x72bea4d0
 800930c:	3e663769 	.word	0x3e663769
 8009310:	c5d26bf1 	.word	0xc5d26bf1
 8009314:	3ebbbd41 	.word	0x3ebbbd41
 8009318:	af25de2c 	.word	0xaf25de2c
 800931c:	3f11566a 	.word	0x3f11566a
 8009320:	16bebd93 	.word	0x16bebd93
 8009324:	3f66c16c 	.word	0x3f66c16c
 8009328:	5555553e 	.word	0x5555553e
 800932c:	3fc55555 	.word	0x3fc55555
 8009330:	652b82fe 	.word	0x652b82fe
 8009334:	3ff71547 	.word	0x3ff71547
 8009338:	fee00000 	.word	0xfee00000
 800933c:	3fe62e42 	.word	0x3fe62e42
 8009340:	35793c76 	.word	0x35793c76
 8009344:	3dea39ef 	.word	0x3dea39ef
 8009348:	40862e41 	.word	0x40862e41
 800934c:	7fefffff 	.word	0x7fefffff
 8009350:	3fd62e42 	.word	0x3fd62e42
 8009354:	3ff0a2b1 	.word	0x3ff0a2b1
 8009358:	0800ec08 	.word	0x0800ec08
 800935c:	0800ec18 	.word	0x0800ec18
 8009360:	3ff00000 	.word	0x3ff00000
 8009364:	0800ebf8 	.word	0x0800ebf8
 8009368:	3e2fffff 	.word	0x3e2fffff

0800936c <__ieee754_hypot>:
 800936c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009370:	ec53 2b10 	vmov	r2, r3, d0
 8009374:	ec59 8b11 	vmov	r8, r9, d1
 8009378:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800937c:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8009380:	42b7      	cmp	r7, r6
 8009382:	b089      	sub	sp, #36	; 0x24
 8009384:	da06      	bge.n	8009394 <__ieee754_hypot+0x28>
 8009386:	4639      	mov	r1, r7
 8009388:	ee11 2a10 	vmov	r2, s2
 800938c:	ee10 8a10 	vmov	r8, s0
 8009390:	4637      	mov	r7, r6
 8009392:	460e      	mov	r6, r1
 8009394:	1bbb      	subs	r3, r7, r6
 8009396:	f1b3 7f70 	cmp.w	r3, #62914560	; 0x3c00000
 800939a:	4692      	mov	sl, r2
 800939c:	46bb      	mov	fp, r7
 800939e:	46b1      	mov	r9, r6
 80093a0:	dd08      	ble.n	80093b4 <__ieee754_hypot+0x48>
 80093a2:	4642      	mov	r2, r8
 80093a4:	4633      	mov	r3, r6
 80093a6:	4650      	mov	r0, sl
 80093a8:	4639      	mov	r1, r7
 80093aa:	f7f6 ff27 	bl	80001fc <__adddf3>
 80093ae:	4682      	mov	sl, r0
 80093b0:	468b      	mov	fp, r1
 80093b2:	e01c      	b.n	80093ee <__ieee754_hypot+0x82>
 80093b4:	4b79      	ldr	r3, [pc, #484]	; (800959c <__ieee754_hypot+0x230>)
 80093b6:	429f      	cmp	r7, r3
 80093b8:	f340 80a0 	ble.w	80094fc <__ieee754_hypot+0x190>
 80093bc:	4b78      	ldr	r3, [pc, #480]	; (80095a0 <__ieee754_hypot+0x234>)
 80093be:	429f      	cmp	r7, r3
 80093c0:	dd1a      	ble.n	80093f8 <__ieee754_hypot+0x8c>
 80093c2:	f3c7 0713 	ubfx	r7, r7, #0, #20
 80093c6:	4613      	mov	r3, r2
 80093c8:	433b      	orrs	r3, r7
 80093ca:	d007      	beq.n	80093dc <__ieee754_hypot+0x70>
 80093cc:	4650      	mov	r0, sl
 80093ce:	4659      	mov	r1, fp
 80093d0:	4642      	mov	r2, r8
 80093d2:	4633      	mov	r3, r6
 80093d4:	f7f6 ff12 	bl	80001fc <__adddf3>
 80093d8:	4682      	mov	sl, r0
 80093da:	468b      	mov	fp, r1
 80093dc:	f086 46ff 	eor.w	r6, r6, #2139095040	; 0x7f800000
 80093e0:	f486 06e0 	eor.w	r6, r6, #7340032	; 0x700000
 80093e4:	4643      	mov	r3, r8
 80093e6:	4333      	orrs	r3, r6
 80093e8:	d101      	bne.n	80093ee <__ieee754_hypot+0x82>
 80093ea:	46c2      	mov	sl, r8
 80093ec:	46cb      	mov	fp, r9
 80093ee:	ec4b ab10 	vmov	d0, sl, fp
 80093f2:	b009      	add	sp, #36	; 0x24
 80093f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f8:	f1a7 5716 	sub.w	r7, r7, #629145600	; 0x25800000
 80093fc:	f1a6 5616 	sub.w	r6, r6, #629145600	; 0x25800000
 8009400:	46bb      	mov	fp, r7
 8009402:	46b1      	mov	r9, r6
 8009404:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	4b66      	ldr	r3, [pc, #408]	; (80095a4 <__ieee754_hypot+0x238>)
 800940c:	429e      	cmp	r6, r3
 800940e:	dc1b      	bgt.n	8009448 <__ieee754_hypot+0xdc>
 8009410:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 8009414:	da74      	bge.n	8009500 <__ieee754_hypot+0x194>
 8009416:	4643      	mov	r3, r8
 8009418:	4333      	orrs	r3, r6
 800941a:	d0e8      	beq.n	80093ee <__ieee754_hypot+0x82>
 800941c:	4d62      	ldr	r5, [pc, #392]	; (80095a8 <__ieee754_hypot+0x23c>)
 800941e:	2400      	movs	r4, #0
 8009420:	4622      	mov	r2, r4
 8009422:	462b      	mov	r3, r5
 8009424:	4640      	mov	r0, r8
 8009426:	4649      	mov	r1, r9
 8009428:	f7f7 f89e 	bl	8000568 <__aeabi_dmul>
 800942c:	462b      	mov	r3, r5
 800942e:	4680      	mov	r8, r0
 8009430:	4689      	mov	r9, r1
 8009432:	4650      	mov	r0, sl
 8009434:	4659      	mov	r1, fp
 8009436:	4622      	mov	r2, r4
 8009438:	f7f7 f896 	bl	8000568 <__aeabi_dmul>
 800943c:	9b01      	ldr	r3, [sp, #4]
 800943e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009442:	4682      	mov	sl, r0
 8009444:	468b      	mov	fp, r1
 8009446:	9301      	str	r3, [sp, #4]
 8009448:	4642      	mov	r2, r8
 800944a:	464b      	mov	r3, r9
 800944c:	4650      	mov	r0, sl
 800944e:	4659      	mov	r1, fp
 8009450:	f7f6 fed2 	bl	80001f8 <__aeabi_dsub>
 8009454:	4604      	mov	r4, r0
 8009456:	460d      	mov	r5, r1
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	4640      	mov	r0, r8
 800945e:	4649      	mov	r1, r9
 8009460:	f7f7 faf4 	bl	8000a4c <__aeabi_dcmplt>
 8009464:	2800      	cmp	r0, #0
 8009466:	d056      	beq.n	8009516 <__ieee754_hypot+0x1aa>
 8009468:	2400      	movs	r4, #0
 800946a:	463b      	mov	r3, r7
 800946c:	4622      	mov	r2, r4
 800946e:	4639      	mov	r1, r7
 8009470:	4620      	mov	r0, r4
 8009472:	f7f7 f879 	bl	8000568 <__aeabi_dmul>
 8009476:	4642      	mov	r2, r8
 8009478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800947c:	464b      	mov	r3, r9
 800947e:	4640      	mov	r0, r8
 8009480:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 8009484:	f7f7 f870 	bl	8000568 <__aeabi_dmul>
 8009488:	463d      	mov	r5, r7
 800948a:	4606      	mov	r6, r0
 800948c:	460f      	mov	r7, r1
 800948e:	4622      	mov	r2, r4
 8009490:	462b      	mov	r3, r5
 8009492:	4650      	mov	r0, sl
 8009494:	4659      	mov	r1, fp
 8009496:	f7f6 feb1 	bl	80001fc <__adddf3>
 800949a:	4622      	mov	r2, r4
 800949c:	4680      	mov	r8, r0
 800949e:	4689      	mov	r9, r1
 80094a0:	462b      	mov	r3, r5
 80094a2:	4650      	mov	r0, sl
 80094a4:	4659      	mov	r1, fp
 80094a6:	f7f6 fea7 	bl	80001f8 <__aeabi_dsub>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	4640      	mov	r0, r8
 80094b0:	4649      	mov	r1, r9
 80094b2:	f7f7 f859 	bl	8000568 <__aeabi_dmul>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4630      	mov	r0, r6
 80094bc:	4639      	mov	r1, r7
 80094be:	f7f6 fe9b 	bl	80001f8 <__aeabi_dsub>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ca:	f7f6 fe95 	bl	80001f8 <__aeabi_dsub>
 80094ce:	ec41 0b10 	vmov	d0, r0, r1
 80094d2:	f000 fa5f 	bl	8009994 <__ieee754_sqrt>
 80094d6:	9b01      	ldr	r3, [sp, #4]
 80094d8:	ec5b ab10 	vmov	sl, fp, d0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d086      	beq.n	80093ee <__ieee754_hypot+0x82>
 80094e0:	051b      	lsls	r3, r3, #20
 80094e2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80094e6:	2000      	movs	r0, #0
 80094e8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	ee10 0a10 	vmov	r0, s0
 80094f4:	4659      	mov	r1, fp
 80094f6:	f7f7 f837 	bl	8000568 <__aeabi_dmul>
 80094fa:	e758      	b.n	80093ae <__ieee754_hypot+0x42>
 80094fc:	2300      	movs	r3, #0
 80094fe:	e783      	b.n	8009408 <__ieee754_hypot+0x9c>
 8009500:	9b01      	ldr	r3, [sp, #4]
 8009502:	f107 5716 	add.w	r7, r7, #629145600	; 0x25800000
 8009506:	f106 5616 	add.w	r6, r6, #629145600	; 0x25800000
 800950a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	46bb      	mov	fp, r7
 8009512:	46b1      	mov	r9, r6
 8009514:	e798      	b.n	8009448 <__ieee754_hypot+0xdc>
 8009516:	4633      	mov	r3, r6
 8009518:	2200      	movs	r2, #0
 800951a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800951e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009522:	2200      	movs	r2, #0
 8009524:	f507 1380 	add.w	r3, r7, #1048576	; 0x100000
 8009528:	4616      	mov	r6, r2
 800952a:	461f      	mov	r7, r3
 800952c:	f7f7 f81c 	bl	8000568 <__aeabi_dmul>
 8009530:	4622      	mov	r2, r4
 8009532:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009536:	462b      	mov	r3, r5
 8009538:	4620      	mov	r0, r4
 800953a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 800953e:	f7f7 f813 	bl	8000568 <__aeabi_dmul>
 8009542:	4652      	mov	r2, sl
 8009544:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009548:	465b      	mov	r3, fp
 800954a:	4650      	mov	r0, sl
 800954c:	4659      	mov	r1, fp
 800954e:	f7f6 fe55 	bl	80001fc <__adddf3>
 8009552:	4632      	mov	r2, r6
 8009554:	463b      	mov	r3, r7
 8009556:	f7f6 fe4f 	bl	80001f8 <__aeabi_dsub>
 800955a:	4642      	mov	r2, r8
 800955c:	464b      	mov	r3, r9
 800955e:	f7f7 f803 	bl	8000568 <__aeabi_dmul>
 8009562:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009566:	4604      	mov	r4, r0
 8009568:	460d      	mov	r5, r1
 800956a:	4640      	mov	r0, r8
 800956c:	4649      	mov	r1, r9
 800956e:	f7f6 fe43 	bl	80001f8 <__aeabi_dsub>
 8009572:	4632      	mov	r2, r6
 8009574:	463b      	mov	r3, r7
 8009576:	f7f6 fff7 	bl	8000568 <__aeabi_dmul>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	4620      	mov	r0, r4
 8009580:	4629      	mov	r1, r5
 8009582:	f7f6 fe3b 	bl	80001fc <__adddf3>
 8009586:	4602      	mov	r2, r0
 8009588:	460b      	mov	r3, r1
 800958a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800958e:	f7f6 fe33 	bl	80001f8 <__aeabi_dsub>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800959a:	e796      	b.n	80094ca <__ieee754_hypot+0x15e>
 800959c:	5f300000 	.word	0x5f300000
 80095a0:	7fefffff 	.word	0x7fefffff
 80095a4:	20afffff 	.word	0x20afffff
 80095a8:	7fd00000 	.word	0x7fd00000
 80095ac:	00000000 	.word	0x00000000

080095b0 <__ieee754_rem_pio2>:
 80095b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b4:	ec57 6b10 	vmov	r6, r7, d0
 80095b8:	4bc3      	ldr	r3, [pc, #780]	; (80098c8 <__ieee754_rem_pio2+0x318>)
 80095ba:	b08d      	sub	sp, #52	; 0x34
 80095bc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80095c0:	4598      	cmp	r8, r3
 80095c2:	4604      	mov	r4, r0
 80095c4:	9704      	str	r7, [sp, #16]
 80095c6:	dc07      	bgt.n	80095d8 <__ieee754_rem_pio2+0x28>
 80095c8:	2200      	movs	r2, #0
 80095ca:	2300      	movs	r3, #0
 80095cc:	ed84 0b00 	vstr	d0, [r4]
 80095d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80095d4:	2500      	movs	r5, #0
 80095d6:	e027      	b.n	8009628 <__ieee754_rem_pio2+0x78>
 80095d8:	4bbc      	ldr	r3, [pc, #752]	; (80098cc <__ieee754_rem_pio2+0x31c>)
 80095da:	4598      	cmp	r8, r3
 80095dc:	dc75      	bgt.n	80096ca <__ieee754_rem_pio2+0x11a>
 80095de:	9b04      	ldr	r3, [sp, #16]
 80095e0:	4dbb      	ldr	r5, [pc, #748]	; (80098d0 <__ieee754_rem_pio2+0x320>)
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	ee10 0a10 	vmov	r0, s0
 80095e8:	a3a9      	add	r3, pc, #676	; (adr r3, 8009890 <__ieee754_rem_pio2+0x2e0>)
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	4639      	mov	r1, r7
 80095f0:	dd36      	ble.n	8009660 <__ieee754_rem_pio2+0xb0>
 80095f2:	f7f6 fe01 	bl	80001f8 <__aeabi_dsub>
 80095f6:	45a8      	cmp	r8, r5
 80095f8:	4606      	mov	r6, r0
 80095fa:	460f      	mov	r7, r1
 80095fc:	d018      	beq.n	8009630 <__ieee754_rem_pio2+0x80>
 80095fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8009898 <__ieee754_rem_pio2+0x2e8>)
 8009600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009604:	f7f6 fdf8 	bl	80001f8 <__aeabi_dsub>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	e9c4 2300 	strd	r2, r3, [r4]
 8009610:	4630      	mov	r0, r6
 8009612:	4639      	mov	r1, r7
 8009614:	f7f6 fdf0 	bl	80001f8 <__aeabi_dsub>
 8009618:	a39f      	add	r3, pc, #636	; (adr r3, 8009898 <__ieee754_rem_pio2+0x2e8>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f7f6 fdeb 	bl	80001f8 <__aeabi_dsub>
 8009622:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009626:	2501      	movs	r5, #1
 8009628:	4628      	mov	r0, r5
 800962a:	b00d      	add	sp, #52	; 0x34
 800962c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009630:	a39b      	add	r3, pc, #620	; (adr r3, 80098a0 <__ieee754_rem_pio2+0x2f0>)
 8009632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009636:	f7f6 fddf 	bl	80001f8 <__aeabi_dsub>
 800963a:	a39b      	add	r3, pc, #620	; (adr r3, 80098a8 <__ieee754_rem_pio2+0x2f8>)
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	4606      	mov	r6, r0
 8009642:	460f      	mov	r7, r1
 8009644:	f7f6 fdd8 	bl	80001f8 <__aeabi_dsub>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	e9c4 2300 	strd	r2, r3, [r4]
 8009650:	4630      	mov	r0, r6
 8009652:	4639      	mov	r1, r7
 8009654:	f7f6 fdd0 	bl	80001f8 <__aeabi_dsub>
 8009658:	a393      	add	r3, pc, #588	; (adr r3, 80098a8 <__ieee754_rem_pio2+0x2f8>)
 800965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965e:	e7de      	b.n	800961e <__ieee754_rem_pio2+0x6e>
 8009660:	f7f6 fdcc 	bl	80001fc <__adddf3>
 8009664:	45a8      	cmp	r8, r5
 8009666:	4606      	mov	r6, r0
 8009668:	460f      	mov	r7, r1
 800966a:	d016      	beq.n	800969a <__ieee754_rem_pio2+0xea>
 800966c:	a38a      	add	r3, pc, #552	; (adr r3, 8009898 <__ieee754_rem_pio2+0x2e8>)
 800966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009672:	f7f6 fdc3 	bl	80001fc <__adddf3>
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	e9c4 2300 	strd	r2, r3, [r4]
 800967e:	4630      	mov	r0, r6
 8009680:	4639      	mov	r1, r7
 8009682:	f7f6 fdb9 	bl	80001f8 <__aeabi_dsub>
 8009686:	a384      	add	r3, pc, #528	; (adr r3, 8009898 <__ieee754_rem_pio2+0x2e8>)
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	f7f6 fdb6 	bl	80001fc <__adddf3>
 8009690:	f04f 35ff 	mov.w	r5, #4294967295
 8009694:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009698:	e7c6      	b.n	8009628 <__ieee754_rem_pio2+0x78>
 800969a:	a381      	add	r3, pc, #516	; (adr r3, 80098a0 <__ieee754_rem_pio2+0x2f0>)
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	f7f6 fdac 	bl	80001fc <__adddf3>
 80096a4:	a380      	add	r3, pc, #512	; (adr r3, 80098a8 <__ieee754_rem_pio2+0x2f8>)
 80096a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096aa:	4606      	mov	r6, r0
 80096ac:	460f      	mov	r7, r1
 80096ae:	f7f6 fda5 	bl	80001fc <__adddf3>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	e9c4 2300 	strd	r2, r3, [r4]
 80096ba:	4630      	mov	r0, r6
 80096bc:	4639      	mov	r1, r7
 80096be:	f7f6 fd9b 	bl	80001f8 <__aeabi_dsub>
 80096c2:	a379      	add	r3, pc, #484	; (adr r3, 80098a8 <__ieee754_rem_pio2+0x2f8>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	e7e0      	b.n	800968c <__ieee754_rem_pio2+0xdc>
 80096ca:	4b82      	ldr	r3, [pc, #520]	; (80098d4 <__ieee754_rem_pio2+0x324>)
 80096cc:	4598      	cmp	r8, r3
 80096ce:	f300 80d0 	bgt.w	8009872 <__ieee754_rem_pio2+0x2c2>
 80096d2:	f000 fed3 	bl	800a47c <fabs>
 80096d6:	ec57 6b10 	vmov	r6, r7, d0
 80096da:	ee10 0a10 	vmov	r0, s0
 80096de:	a374      	add	r3, pc, #464	; (adr r3, 80098b0 <__ieee754_rem_pio2+0x300>)
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	4639      	mov	r1, r7
 80096e6:	f7f6 ff3f 	bl	8000568 <__aeabi_dmul>
 80096ea:	2200      	movs	r2, #0
 80096ec:	4b7a      	ldr	r3, [pc, #488]	; (80098d8 <__ieee754_rem_pio2+0x328>)
 80096ee:	f7f6 fd85 	bl	80001fc <__adddf3>
 80096f2:	f7f7 f9d3 	bl	8000a9c <__aeabi_d2iz>
 80096f6:	4605      	mov	r5, r0
 80096f8:	f7f6 fecc 	bl	8000494 <__aeabi_i2d>
 80096fc:	a364      	add	r3, pc, #400	; (adr r3, 8009890 <__ieee754_rem_pio2+0x2e0>)
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009706:	f7f6 ff2f 	bl	8000568 <__aeabi_dmul>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4630      	mov	r0, r6
 8009710:	4639      	mov	r1, r7
 8009712:	f7f6 fd71 	bl	80001f8 <__aeabi_dsub>
 8009716:	a360      	add	r3, pc, #384	; (adr r3, 8009898 <__ieee754_rem_pio2+0x2e8>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	4682      	mov	sl, r0
 800971e:	468b      	mov	fp, r1
 8009720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009724:	f7f6 ff20 	bl	8000568 <__aeabi_dmul>
 8009728:	2d1f      	cmp	r5, #31
 800972a:	4606      	mov	r6, r0
 800972c:	460f      	mov	r7, r1
 800972e:	dc0c      	bgt.n	800974a <__ieee754_rem_pio2+0x19a>
 8009730:	1e6a      	subs	r2, r5, #1
 8009732:	4b6a      	ldr	r3, [pc, #424]	; (80098dc <__ieee754_rem_pio2+0x32c>)
 8009734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009738:	4543      	cmp	r3, r8
 800973a:	d006      	beq.n	800974a <__ieee754_rem_pio2+0x19a>
 800973c:	4632      	mov	r2, r6
 800973e:	463b      	mov	r3, r7
 8009740:	4650      	mov	r0, sl
 8009742:	4659      	mov	r1, fp
 8009744:	f7f6 fd58 	bl	80001f8 <__aeabi_dsub>
 8009748:	e00e      	b.n	8009768 <__ieee754_rem_pio2+0x1b8>
 800974a:	4632      	mov	r2, r6
 800974c:	463b      	mov	r3, r7
 800974e:	4650      	mov	r0, sl
 8009750:	4659      	mov	r1, fp
 8009752:	f7f6 fd51 	bl	80001f8 <__aeabi_dsub>
 8009756:	ea4f 5328 	mov.w	r3, r8, asr #20
 800975a:	9305      	str	r3, [sp, #20]
 800975c:	9a05      	ldr	r2, [sp, #20]
 800975e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	2b10      	cmp	r3, #16
 8009766:	dc02      	bgt.n	800976e <__ieee754_rem_pio2+0x1be>
 8009768:	e9c4 0100 	strd	r0, r1, [r4]
 800976c:	e039      	b.n	80097e2 <__ieee754_rem_pio2+0x232>
 800976e:	a34c      	add	r3, pc, #304	; (adr r3, 80098a0 <__ieee754_rem_pio2+0x2f0>)
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009778:	f7f6 fef6 	bl	8000568 <__aeabi_dmul>
 800977c:	4606      	mov	r6, r0
 800977e:	460f      	mov	r7, r1
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4650      	mov	r0, sl
 8009786:	4659      	mov	r1, fp
 8009788:	f7f6 fd36 	bl	80001f8 <__aeabi_dsub>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	4680      	mov	r8, r0
 8009792:	4689      	mov	r9, r1
 8009794:	4650      	mov	r0, sl
 8009796:	4659      	mov	r1, fp
 8009798:	f7f6 fd2e 	bl	80001f8 <__aeabi_dsub>
 800979c:	4632      	mov	r2, r6
 800979e:	463b      	mov	r3, r7
 80097a0:	f7f6 fd2a 	bl	80001f8 <__aeabi_dsub>
 80097a4:	a340      	add	r3, pc, #256	; (adr r3, 80098a8 <__ieee754_rem_pio2+0x2f8>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	4606      	mov	r6, r0
 80097ac:	460f      	mov	r7, r1
 80097ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097b2:	f7f6 fed9 	bl	8000568 <__aeabi_dmul>
 80097b6:	4632      	mov	r2, r6
 80097b8:	463b      	mov	r3, r7
 80097ba:	f7f6 fd1d 	bl	80001f8 <__aeabi_dsub>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4606      	mov	r6, r0
 80097c4:	460f      	mov	r7, r1
 80097c6:	4640      	mov	r0, r8
 80097c8:	4649      	mov	r1, r9
 80097ca:	f7f6 fd15 	bl	80001f8 <__aeabi_dsub>
 80097ce:	9a05      	ldr	r2, [sp, #20]
 80097d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	2b31      	cmp	r3, #49	; 0x31
 80097d8:	dc20      	bgt.n	800981c <__ieee754_rem_pio2+0x26c>
 80097da:	e9c4 0100 	strd	r0, r1, [r4]
 80097de:	46c2      	mov	sl, r8
 80097e0:	46cb      	mov	fp, r9
 80097e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80097e6:	4650      	mov	r0, sl
 80097e8:	4642      	mov	r2, r8
 80097ea:	464b      	mov	r3, r9
 80097ec:	4659      	mov	r1, fp
 80097ee:	f7f6 fd03 	bl	80001f8 <__aeabi_dsub>
 80097f2:	463b      	mov	r3, r7
 80097f4:	4632      	mov	r2, r6
 80097f6:	f7f6 fcff 	bl	80001f8 <__aeabi_dsub>
 80097fa:	9b04      	ldr	r3, [sp, #16]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009802:	f6bf af11 	bge.w	8009628 <__ieee754_rem_pio2+0x78>
 8009806:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800980a:	6063      	str	r3, [r4, #4]
 800980c:	f8c4 8000 	str.w	r8, [r4]
 8009810:	60a0      	str	r0, [r4, #8]
 8009812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009816:	60e3      	str	r3, [r4, #12]
 8009818:	426d      	negs	r5, r5
 800981a:	e705      	b.n	8009628 <__ieee754_rem_pio2+0x78>
 800981c:	a326      	add	r3, pc, #152	; (adr r3, 80098b8 <__ieee754_rem_pio2+0x308>)
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009826:	f7f6 fe9f 	bl	8000568 <__aeabi_dmul>
 800982a:	4606      	mov	r6, r0
 800982c:	460f      	mov	r7, r1
 800982e:	4602      	mov	r2, r0
 8009830:	460b      	mov	r3, r1
 8009832:	4640      	mov	r0, r8
 8009834:	4649      	mov	r1, r9
 8009836:	f7f6 fcdf 	bl	80001f8 <__aeabi_dsub>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4682      	mov	sl, r0
 8009840:	468b      	mov	fp, r1
 8009842:	4640      	mov	r0, r8
 8009844:	4649      	mov	r1, r9
 8009846:	f7f6 fcd7 	bl	80001f8 <__aeabi_dsub>
 800984a:	4632      	mov	r2, r6
 800984c:	463b      	mov	r3, r7
 800984e:	f7f6 fcd3 	bl	80001f8 <__aeabi_dsub>
 8009852:	a31b      	add	r3, pc, #108	; (adr r3, 80098c0 <__ieee754_rem_pio2+0x310>)
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	4606      	mov	r6, r0
 800985a:	460f      	mov	r7, r1
 800985c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009860:	f7f6 fe82 	bl	8000568 <__aeabi_dmul>
 8009864:	4632      	mov	r2, r6
 8009866:	463b      	mov	r3, r7
 8009868:	f7f6 fcc6 	bl	80001f8 <__aeabi_dsub>
 800986c:	4606      	mov	r6, r0
 800986e:	460f      	mov	r7, r1
 8009870:	e764      	b.n	800973c <__ieee754_rem_pio2+0x18c>
 8009872:	4b1b      	ldr	r3, [pc, #108]	; (80098e0 <__ieee754_rem_pio2+0x330>)
 8009874:	4598      	cmp	r8, r3
 8009876:	dd35      	ble.n	80098e4 <__ieee754_rem_pio2+0x334>
 8009878:	ee10 2a10 	vmov	r2, s0
 800987c:	463b      	mov	r3, r7
 800987e:	4630      	mov	r0, r6
 8009880:	4639      	mov	r1, r7
 8009882:	f7f6 fcb9 	bl	80001f8 <__aeabi_dsub>
 8009886:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800988a:	e9c4 0100 	strd	r0, r1, [r4]
 800988e:	e6a1      	b.n	80095d4 <__ieee754_rem_pio2+0x24>
 8009890:	54400000 	.word	0x54400000
 8009894:	3ff921fb 	.word	0x3ff921fb
 8009898:	1a626331 	.word	0x1a626331
 800989c:	3dd0b461 	.word	0x3dd0b461
 80098a0:	1a600000 	.word	0x1a600000
 80098a4:	3dd0b461 	.word	0x3dd0b461
 80098a8:	2e037073 	.word	0x2e037073
 80098ac:	3ba3198a 	.word	0x3ba3198a
 80098b0:	6dc9c883 	.word	0x6dc9c883
 80098b4:	3fe45f30 	.word	0x3fe45f30
 80098b8:	2e000000 	.word	0x2e000000
 80098bc:	3ba3198a 	.word	0x3ba3198a
 80098c0:	252049c1 	.word	0x252049c1
 80098c4:	397b839a 	.word	0x397b839a
 80098c8:	3fe921fb 	.word	0x3fe921fb
 80098cc:	4002d97b 	.word	0x4002d97b
 80098d0:	3ff921fb 	.word	0x3ff921fb
 80098d4:	413921fb 	.word	0x413921fb
 80098d8:	3fe00000 	.word	0x3fe00000
 80098dc:	0800ec28 	.word	0x0800ec28
 80098e0:	7fefffff 	.word	0x7fefffff
 80098e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80098e8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80098ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80098f0:	4630      	mov	r0, r6
 80098f2:	460f      	mov	r7, r1
 80098f4:	f7f7 f8d2 	bl	8000a9c <__aeabi_d2iz>
 80098f8:	f7f6 fdcc 	bl	8000494 <__aeabi_i2d>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	4630      	mov	r0, r6
 8009902:	4639      	mov	r1, r7
 8009904:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009908:	f7f6 fc76 	bl	80001f8 <__aeabi_dsub>
 800990c:	2200      	movs	r2, #0
 800990e:	4b1f      	ldr	r3, [pc, #124]	; (800998c <__ieee754_rem_pio2+0x3dc>)
 8009910:	f7f6 fe2a 	bl	8000568 <__aeabi_dmul>
 8009914:	460f      	mov	r7, r1
 8009916:	4606      	mov	r6, r0
 8009918:	f7f7 f8c0 	bl	8000a9c <__aeabi_d2iz>
 800991c:	f7f6 fdba 	bl	8000494 <__aeabi_i2d>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4630      	mov	r0, r6
 8009926:	4639      	mov	r1, r7
 8009928:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800992c:	f7f6 fc64 	bl	80001f8 <__aeabi_dsub>
 8009930:	2200      	movs	r2, #0
 8009932:	4b16      	ldr	r3, [pc, #88]	; (800998c <__ieee754_rem_pio2+0x3dc>)
 8009934:	f7f6 fe18 	bl	8000568 <__aeabi_dmul>
 8009938:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800993c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009940:	f04f 0803 	mov.w	r8, #3
 8009944:	2600      	movs	r6, #0
 8009946:	2700      	movs	r7, #0
 8009948:	4632      	mov	r2, r6
 800994a:	463b      	mov	r3, r7
 800994c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009950:	f108 3aff 	add.w	sl, r8, #4294967295
 8009954:	f7f7 f870 	bl	8000a38 <__aeabi_dcmpeq>
 8009958:	b9b0      	cbnz	r0, 8009988 <__ieee754_rem_pio2+0x3d8>
 800995a:	4b0d      	ldr	r3, [pc, #52]	; (8009990 <__ieee754_rem_pio2+0x3e0>)
 800995c:	9301      	str	r3, [sp, #4]
 800995e:	2302      	movs	r3, #2
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	462a      	mov	r2, r5
 8009964:	4643      	mov	r3, r8
 8009966:	4621      	mov	r1, r4
 8009968:	a806      	add	r0, sp, #24
 800996a:	f000 f98d 	bl	8009c88 <__kernel_rem_pio2>
 800996e:	9b04      	ldr	r3, [sp, #16]
 8009970:	2b00      	cmp	r3, #0
 8009972:	4605      	mov	r5, r0
 8009974:	f6bf ae58 	bge.w	8009628 <__ieee754_rem_pio2+0x78>
 8009978:	6863      	ldr	r3, [r4, #4]
 800997a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800997e:	6063      	str	r3, [r4, #4]
 8009980:	68e3      	ldr	r3, [r4, #12]
 8009982:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009986:	e746      	b.n	8009816 <__ieee754_rem_pio2+0x266>
 8009988:	46d0      	mov	r8, sl
 800998a:	e7dd      	b.n	8009948 <__ieee754_rem_pio2+0x398>
 800998c:	41700000 	.word	0x41700000
 8009990:	0800eca8 	.word	0x0800eca8

08009994 <__ieee754_sqrt>:
 8009994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009998:	4955      	ldr	r1, [pc, #340]	; (8009af0 <__ieee754_sqrt+0x15c>)
 800999a:	ec55 4b10 	vmov	r4, r5, d0
 800999e:	43a9      	bics	r1, r5
 80099a0:	462b      	mov	r3, r5
 80099a2:	462a      	mov	r2, r5
 80099a4:	d112      	bne.n	80099cc <__ieee754_sqrt+0x38>
 80099a6:	ee10 2a10 	vmov	r2, s0
 80099aa:	ee10 0a10 	vmov	r0, s0
 80099ae:	4629      	mov	r1, r5
 80099b0:	f7f6 fdda 	bl	8000568 <__aeabi_dmul>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4620      	mov	r0, r4
 80099ba:	4629      	mov	r1, r5
 80099bc:	f7f6 fc1e 	bl	80001fc <__adddf3>
 80099c0:	4604      	mov	r4, r0
 80099c2:	460d      	mov	r5, r1
 80099c4:	ec45 4b10 	vmov	d0, r4, r5
 80099c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099cc:	2d00      	cmp	r5, #0
 80099ce:	ee10 0a10 	vmov	r0, s0
 80099d2:	4621      	mov	r1, r4
 80099d4:	dc0f      	bgt.n	80099f6 <__ieee754_sqrt+0x62>
 80099d6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80099da:	4330      	orrs	r0, r6
 80099dc:	d0f2      	beq.n	80099c4 <__ieee754_sqrt+0x30>
 80099de:	b155      	cbz	r5, 80099f6 <__ieee754_sqrt+0x62>
 80099e0:	ee10 2a10 	vmov	r2, s0
 80099e4:	4620      	mov	r0, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	f7f6 fc06 	bl	80001f8 <__aeabi_dsub>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	f7f6 fee4 	bl	80007bc <__aeabi_ddiv>
 80099f4:	e7e4      	b.n	80099c0 <__ieee754_sqrt+0x2c>
 80099f6:	151b      	asrs	r3, r3, #20
 80099f8:	d073      	beq.n	8009ae2 <__ieee754_sqrt+0x14e>
 80099fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80099fe:	07dd      	lsls	r5, r3, #31
 8009a00:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009a04:	bf48      	it	mi
 8009a06:	0fc8      	lsrmi	r0, r1, #31
 8009a08:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009a0c:	bf44      	itt	mi
 8009a0e:	0049      	lslmi	r1, r1, #1
 8009a10:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009a14:	2500      	movs	r5, #0
 8009a16:	1058      	asrs	r0, r3, #1
 8009a18:	0fcb      	lsrs	r3, r1, #31
 8009a1a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009a1e:	0049      	lsls	r1, r1, #1
 8009a20:	2316      	movs	r3, #22
 8009a22:	462c      	mov	r4, r5
 8009a24:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009a28:	19a7      	adds	r7, r4, r6
 8009a2a:	4297      	cmp	r7, r2
 8009a2c:	bfde      	ittt	le
 8009a2e:	19bc      	addle	r4, r7, r6
 8009a30:	1bd2      	suble	r2, r2, r7
 8009a32:	19ad      	addle	r5, r5, r6
 8009a34:	0fcf      	lsrs	r7, r1, #31
 8009a36:	3b01      	subs	r3, #1
 8009a38:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009a3c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009a40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a44:	d1f0      	bne.n	8009a28 <__ieee754_sqrt+0x94>
 8009a46:	f04f 0c20 	mov.w	ip, #32
 8009a4a:	469e      	mov	lr, r3
 8009a4c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009a50:	42a2      	cmp	r2, r4
 8009a52:	eb06 070e 	add.w	r7, r6, lr
 8009a56:	dc02      	bgt.n	8009a5e <__ieee754_sqrt+0xca>
 8009a58:	d112      	bne.n	8009a80 <__ieee754_sqrt+0xec>
 8009a5a:	428f      	cmp	r7, r1
 8009a5c:	d810      	bhi.n	8009a80 <__ieee754_sqrt+0xec>
 8009a5e:	2f00      	cmp	r7, #0
 8009a60:	eb07 0e06 	add.w	lr, r7, r6
 8009a64:	da42      	bge.n	8009aec <__ieee754_sqrt+0x158>
 8009a66:	f1be 0f00 	cmp.w	lr, #0
 8009a6a:	db3f      	blt.n	8009aec <__ieee754_sqrt+0x158>
 8009a6c:	f104 0801 	add.w	r8, r4, #1
 8009a70:	1b12      	subs	r2, r2, r4
 8009a72:	428f      	cmp	r7, r1
 8009a74:	bf88      	it	hi
 8009a76:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009a7a:	1bc9      	subs	r1, r1, r7
 8009a7c:	4433      	add	r3, r6
 8009a7e:	4644      	mov	r4, r8
 8009a80:	0052      	lsls	r2, r2, #1
 8009a82:	f1bc 0c01 	subs.w	ip, ip, #1
 8009a86:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009a8a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009a92:	d1dd      	bne.n	8009a50 <__ieee754_sqrt+0xbc>
 8009a94:	430a      	orrs	r2, r1
 8009a96:	d006      	beq.n	8009aa6 <__ieee754_sqrt+0x112>
 8009a98:	1c5c      	adds	r4, r3, #1
 8009a9a:	bf13      	iteet	ne
 8009a9c:	3301      	addne	r3, #1
 8009a9e:	3501      	addeq	r5, #1
 8009aa0:	4663      	moveq	r3, ip
 8009aa2:	f023 0301 	bicne.w	r3, r3, #1
 8009aa6:	106a      	asrs	r2, r5, #1
 8009aa8:	085b      	lsrs	r3, r3, #1
 8009aaa:	07e9      	lsls	r1, r5, #31
 8009aac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009ab0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009ab4:	bf48      	it	mi
 8009ab6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009aba:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009abe:	461c      	mov	r4, r3
 8009ac0:	e780      	b.n	80099c4 <__ieee754_sqrt+0x30>
 8009ac2:	0aca      	lsrs	r2, r1, #11
 8009ac4:	3815      	subs	r0, #21
 8009ac6:	0549      	lsls	r1, r1, #21
 8009ac8:	2a00      	cmp	r2, #0
 8009aca:	d0fa      	beq.n	8009ac2 <__ieee754_sqrt+0x12e>
 8009acc:	02d6      	lsls	r6, r2, #11
 8009ace:	d50a      	bpl.n	8009ae6 <__ieee754_sqrt+0x152>
 8009ad0:	f1c3 0420 	rsb	r4, r3, #32
 8009ad4:	fa21 f404 	lsr.w	r4, r1, r4
 8009ad8:	1e5d      	subs	r5, r3, #1
 8009ada:	4099      	lsls	r1, r3
 8009adc:	4322      	orrs	r2, r4
 8009ade:	1b43      	subs	r3, r0, r5
 8009ae0:	e78b      	b.n	80099fa <__ieee754_sqrt+0x66>
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	e7f0      	b.n	8009ac8 <__ieee754_sqrt+0x134>
 8009ae6:	0052      	lsls	r2, r2, #1
 8009ae8:	3301      	adds	r3, #1
 8009aea:	e7ef      	b.n	8009acc <__ieee754_sqrt+0x138>
 8009aec:	46a0      	mov	r8, r4
 8009aee:	e7bf      	b.n	8009a70 <__ieee754_sqrt+0xdc>
 8009af0:	7ff00000 	.word	0x7ff00000
 8009af4:	00000000 	.word	0x00000000

08009af8 <__kernel_cos>:
 8009af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	ec59 8b10 	vmov	r8, r9, d0
 8009b00:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8009b04:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009b08:	ed2d 8b02 	vpush	{d8}
 8009b0c:	eeb0 8a41 	vmov.f32	s16, s2
 8009b10:	eef0 8a61 	vmov.f32	s17, s3
 8009b14:	da07      	bge.n	8009b26 <__kernel_cos+0x2e>
 8009b16:	ee10 0a10 	vmov	r0, s0
 8009b1a:	4649      	mov	r1, r9
 8009b1c:	f7f6 ffbe 	bl	8000a9c <__aeabi_d2iz>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	f000 8089 	beq.w	8009c38 <__kernel_cos+0x140>
 8009b26:	4642      	mov	r2, r8
 8009b28:	464b      	mov	r3, r9
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	4649      	mov	r1, r9
 8009b2e:	f7f6 fd1b 	bl	8000568 <__aeabi_dmul>
 8009b32:	2200      	movs	r2, #0
 8009b34:	4b4e      	ldr	r3, [pc, #312]	; (8009c70 <__kernel_cos+0x178>)
 8009b36:	4604      	mov	r4, r0
 8009b38:	460d      	mov	r5, r1
 8009b3a:	f7f6 fd15 	bl	8000568 <__aeabi_dmul>
 8009b3e:	a340      	add	r3, pc, #256	; (adr r3, 8009c40 <__kernel_cos+0x148>)
 8009b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b44:	4682      	mov	sl, r0
 8009b46:	468b      	mov	fp, r1
 8009b48:	4620      	mov	r0, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	f7f6 fd0c 	bl	8000568 <__aeabi_dmul>
 8009b50:	a33d      	add	r3, pc, #244	; (adr r3, 8009c48 <__kernel_cos+0x150>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	f7f6 fb51 	bl	80001fc <__adddf3>
 8009b5a:	4622      	mov	r2, r4
 8009b5c:	462b      	mov	r3, r5
 8009b5e:	f7f6 fd03 	bl	8000568 <__aeabi_dmul>
 8009b62:	a33b      	add	r3, pc, #236	; (adr r3, 8009c50 <__kernel_cos+0x158>)
 8009b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b68:	f7f6 fb46 	bl	80001f8 <__aeabi_dsub>
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	462b      	mov	r3, r5
 8009b70:	f7f6 fcfa 	bl	8000568 <__aeabi_dmul>
 8009b74:	a338      	add	r3, pc, #224	; (adr r3, 8009c58 <__kernel_cos+0x160>)
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f7f6 fb3f 	bl	80001fc <__adddf3>
 8009b7e:	4622      	mov	r2, r4
 8009b80:	462b      	mov	r3, r5
 8009b82:	f7f6 fcf1 	bl	8000568 <__aeabi_dmul>
 8009b86:	a336      	add	r3, pc, #216	; (adr r3, 8009c60 <__kernel_cos+0x168>)
 8009b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8c:	f7f6 fb34 	bl	80001f8 <__aeabi_dsub>
 8009b90:	4622      	mov	r2, r4
 8009b92:	462b      	mov	r3, r5
 8009b94:	f7f6 fce8 	bl	8000568 <__aeabi_dmul>
 8009b98:	a333      	add	r3, pc, #204	; (adr r3, 8009c68 <__kernel_cos+0x170>)
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	f7f6 fb2d 	bl	80001fc <__adddf3>
 8009ba2:	4622      	mov	r2, r4
 8009ba4:	462b      	mov	r3, r5
 8009ba6:	f7f6 fcdf 	bl	8000568 <__aeabi_dmul>
 8009baa:	4622      	mov	r2, r4
 8009bac:	462b      	mov	r3, r5
 8009bae:	f7f6 fcdb 	bl	8000568 <__aeabi_dmul>
 8009bb2:	ec53 2b18 	vmov	r2, r3, d8
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	460d      	mov	r5, r1
 8009bba:	4640      	mov	r0, r8
 8009bbc:	4649      	mov	r1, r9
 8009bbe:	f7f6 fcd3 	bl	8000568 <__aeabi_dmul>
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f7f6 fb15 	bl	80001f8 <__aeabi_dsub>
 8009bce:	4b29      	ldr	r3, [pc, #164]	; (8009c74 <__kernel_cos+0x17c>)
 8009bd0:	429e      	cmp	r6, r3
 8009bd2:	4680      	mov	r8, r0
 8009bd4:	4689      	mov	r9, r1
 8009bd6:	dc11      	bgt.n	8009bfc <__kernel_cos+0x104>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4650      	mov	r0, sl
 8009bde:	4659      	mov	r1, fp
 8009be0:	f7f6 fb0a 	bl	80001f8 <__aeabi_dsub>
 8009be4:	460b      	mov	r3, r1
 8009be6:	4924      	ldr	r1, [pc, #144]	; (8009c78 <__kernel_cos+0x180>)
 8009be8:	4602      	mov	r2, r0
 8009bea:	2000      	movs	r0, #0
 8009bec:	f7f6 fb04 	bl	80001f8 <__aeabi_dsub>
 8009bf0:	ecbd 8b02 	vpop	{d8}
 8009bf4:	ec41 0b10 	vmov	d0, r0, r1
 8009bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfc:	4b1f      	ldr	r3, [pc, #124]	; (8009c7c <__kernel_cos+0x184>)
 8009bfe:	491e      	ldr	r1, [pc, #120]	; (8009c78 <__kernel_cos+0x180>)
 8009c00:	429e      	cmp	r6, r3
 8009c02:	bfcc      	ite	gt
 8009c04:	4d1e      	ldrgt	r5, [pc, #120]	; (8009c80 <__kernel_cos+0x188>)
 8009c06:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009c0a:	2400      	movs	r4, #0
 8009c0c:	4622      	mov	r2, r4
 8009c0e:	462b      	mov	r3, r5
 8009c10:	2000      	movs	r0, #0
 8009c12:	f7f6 faf1 	bl	80001f8 <__aeabi_dsub>
 8009c16:	4622      	mov	r2, r4
 8009c18:	4606      	mov	r6, r0
 8009c1a:	460f      	mov	r7, r1
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	4650      	mov	r0, sl
 8009c20:	4659      	mov	r1, fp
 8009c22:	f7f6 fae9 	bl	80001f8 <__aeabi_dsub>
 8009c26:	4642      	mov	r2, r8
 8009c28:	464b      	mov	r3, r9
 8009c2a:	f7f6 fae5 	bl	80001f8 <__aeabi_dsub>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	460b      	mov	r3, r1
 8009c32:	4630      	mov	r0, r6
 8009c34:	4639      	mov	r1, r7
 8009c36:	e7d9      	b.n	8009bec <__kernel_cos+0xf4>
 8009c38:	2000      	movs	r0, #0
 8009c3a:	490f      	ldr	r1, [pc, #60]	; (8009c78 <__kernel_cos+0x180>)
 8009c3c:	e7d8      	b.n	8009bf0 <__kernel_cos+0xf8>
 8009c3e:	bf00      	nop
 8009c40:	be8838d4 	.word	0xbe8838d4
 8009c44:	bda8fae9 	.word	0xbda8fae9
 8009c48:	bdb4b1c4 	.word	0xbdb4b1c4
 8009c4c:	3e21ee9e 	.word	0x3e21ee9e
 8009c50:	809c52ad 	.word	0x809c52ad
 8009c54:	3e927e4f 	.word	0x3e927e4f
 8009c58:	19cb1590 	.word	0x19cb1590
 8009c5c:	3efa01a0 	.word	0x3efa01a0
 8009c60:	16c15177 	.word	0x16c15177
 8009c64:	3f56c16c 	.word	0x3f56c16c
 8009c68:	5555554c 	.word	0x5555554c
 8009c6c:	3fa55555 	.word	0x3fa55555
 8009c70:	3fe00000 	.word	0x3fe00000
 8009c74:	3fd33332 	.word	0x3fd33332
 8009c78:	3ff00000 	.word	0x3ff00000
 8009c7c:	3fe90000 	.word	0x3fe90000
 8009c80:	3fd20000 	.word	0x3fd20000
 8009c84:	00000000 	.word	0x00000000

08009c88 <__kernel_rem_pio2>:
 8009c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8c:	ed2d 8b02 	vpush	{d8}
 8009c90:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009c94:	1ed4      	subs	r4, r2, #3
 8009c96:	9308      	str	r3, [sp, #32]
 8009c98:	9101      	str	r1, [sp, #4]
 8009c9a:	4bc5      	ldr	r3, [pc, #788]	; (8009fb0 <__kernel_rem_pio2+0x328>)
 8009c9c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009c9e:	9009      	str	r0, [sp, #36]	; 0x24
 8009ca0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ca4:	9304      	str	r3, [sp, #16]
 8009ca6:	9b08      	ldr	r3, [sp, #32]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	9307      	str	r3, [sp, #28]
 8009cac:	2318      	movs	r3, #24
 8009cae:	fb94 f4f3 	sdiv	r4, r4, r3
 8009cb2:	f06f 0317 	mvn.w	r3, #23
 8009cb6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009cba:	fb04 3303 	mla	r3, r4, r3, r3
 8009cbe:	eb03 0a02 	add.w	sl, r3, r2
 8009cc2:	9b04      	ldr	r3, [sp, #16]
 8009cc4:	9a07      	ldr	r2, [sp, #28]
 8009cc6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009fa0 <__kernel_rem_pio2+0x318>
 8009cca:	eb03 0802 	add.w	r8, r3, r2
 8009cce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009cd0:	1aa7      	subs	r7, r4, r2
 8009cd2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009cd6:	ae22      	add	r6, sp, #136	; 0x88
 8009cd8:	2500      	movs	r5, #0
 8009cda:	4545      	cmp	r5, r8
 8009cdc:	dd13      	ble.n	8009d06 <__kernel_rem_pio2+0x7e>
 8009cde:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8009fa0 <__kernel_rem_pio2+0x318>
 8009ce2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009ce6:	2600      	movs	r6, #0
 8009ce8:	9b04      	ldr	r3, [sp, #16]
 8009cea:	429e      	cmp	r6, r3
 8009cec:	dc32      	bgt.n	8009d54 <__kernel_rem_pio2+0xcc>
 8009cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf0:	9302      	str	r3, [sp, #8]
 8009cf2:	9b08      	ldr	r3, [sp, #32]
 8009cf4:	199d      	adds	r5, r3, r6
 8009cf6:	ab22      	add	r3, sp, #136	; 0x88
 8009cf8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009cfc:	9306      	str	r3, [sp, #24]
 8009cfe:	ec59 8b18 	vmov	r8, r9, d8
 8009d02:	2700      	movs	r7, #0
 8009d04:	e01f      	b.n	8009d46 <__kernel_rem_pio2+0xbe>
 8009d06:	42ef      	cmn	r7, r5
 8009d08:	d407      	bmi.n	8009d1a <__kernel_rem_pio2+0x92>
 8009d0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009d0e:	f7f6 fbc1 	bl	8000494 <__aeabi_i2d>
 8009d12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009d16:	3501      	adds	r5, #1
 8009d18:	e7df      	b.n	8009cda <__kernel_rem_pio2+0x52>
 8009d1a:	ec51 0b18 	vmov	r0, r1, d8
 8009d1e:	e7f8      	b.n	8009d12 <__kernel_rem_pio2+0x8a>
 8009d20:	9906      	ldr	r1, [sp, #24]
 8009d22:	9d02      	ldr	r5, [sp, #8]
 8009d24:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009d28:	9106      	str	r1, [sp, #24]
 8009d2a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009d2e:	9502      	str	r5, [sp, #8]
 8009d30:	f7f6 fc1a 	bl	8000568 <__aeabi_dmul>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	4640      	mov	r0, r8
 8009d3a:	4649      	mov	r1, r9
 8009d3c:	f7f6 fa5e 	bl	80001fc <__adddf3>
 8009d40:	3701      	adds	r7, #1
 8009d42:	4680      	mov	r8, r0
 8009d44:	4689      	mov	r9, r1
 8009d46:	9b07      	ldr	r3, [sp, #28]
 8009d48:	429f      	cmp	r7, r3
 8009d4a:	dde9      	ble.n	8009d20 <__kernel_rem_pio2+0x98>
 8009d4c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009d50:	3601      	adds	r6, #1
 8009d52:	e7c9      	b.n	8009ce8 <__kernel_rem_pio2+0x60>
 8009d54:	9b04      	ldr	r3, [sp, #16]
 8009d56:	aa0e      	add	r2, sp, #56	; 0x38
 8009d58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d5c:	930c      	str	r3, [sp, #48]	; 0x30
 8009d5e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009d60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009d64:	9c04      	ldr	r4, [sp, #16]
 8009d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d68:	ab9a      	add	r3, sp, #616	; 0x268
 8009d6a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8009d6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d76:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8009d7a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8009d7e:	ab9a      	add	r3, sp, #616	; 0x268
 8009d80:	445b      	add	r3, fp
 8009d82:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8009d86:	2500      	movs	r5, #0
 8009d88:	1b63      	subs	r3, r4, r5
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	dc78      	bgt.n	8009e80 <__kernel_rem_pio2+0x1f8>
 8009d8e:	4650      	mov	r0, sl
 8009d90:	ec49 8b10 	vmov	d0, r8, r9
 8009d94:	f000 fc0c 	bl	800a5b0 <scalbn>
 8009d98:	ec57 6b10 	vmov	r6, r7, d0
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009da2:	ee10 0a10 	vmov	r0, s0
 8009da6:	4639      	mov	r1, r7
 8009da8:	f7f6 fbde 	bl	8000568 <__aeabi_dmul>
 8009dac:	ec41 0b10 	vmov	d0, r0, r1
 8009db0:	f000 fb76 	bl	800a4a0 <floor>
 8009db4:	2200      	movs	r2, #0
 8009db6:	ec51 0b10 	vmov	r0, r1, d0
 8009dba:	4b7e      	ldr	r3, [pc, #504]	; (8009fb4 <__kernel_rem_pio2+0x32c>)
 8009dbc:	f7f6 fbd4 	bl	8000568 <__aeabi_dmul>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	4639      	mov	r1, r7
 8009dc8:	f7f6 fa16 	bl	80001f8 <__aeabi_dsub>
 8009dcc:	460f      	mov	r7, r1
 8009dce:	4606      	mov	r6, r0
 8009dd0:	f7f6 fe64 	bl	8000a9c <__aeabi_d2iz>
 8009dd4:	9006      	str	r0, [sp, #24]
 8009dd6:	f7f6 fb5d 	bl	8000494 <__aeabi_i2d>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4630      	mov	r0, r6
 8009de0:	4639      	mov	r1, r7
 8009de2:	f7f6 fa09 	bl	80001f8 <__aeabi_dsub>
 8009de6:	f1ba 0f00 	cmp.w	sl, #0
 8009dea:	4606      	mov	r6, r0
 8009dec:	460f      	mov	r7, r1
 8009dee:	dd6c      	ble.n	8009eca <__kernel_rem_pio2+0x242>
 8009df0:	1e62      	subs	r2, r4, #1
 8009df2:	ab0e      	add	r3, sp, #56	; 0x38
 8009df4:	f1ca 0118 	rsb	r1, sl, #24
 8009df8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009dfc:	9d06      	ldr	r5, [sp, #24]
 8009dfe:	fa40 f301 	asr.w	r3, r0, r1
 8009e02:	441d      	add	r5, r3
 8009e04:	408b      	lsls	r3, r1
 8009e06:	1ac0      	subs	r0, r0, r3
 8009e08:	ab0e      	add	r3, sp, #56	; 0x38
 8009e0a:	9506      	str	r5, [sp, #24]
 8009e0c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009e10:	f1ca 0317 	rsb	r3, sl, #23
 8009e14:	fa40 f303 	asr.w	r3, r0, r3
 8009e18:	9302      	str	r3, [sp, #8]
 8009e1a:	9b02      	ldr	r3, [sp, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	dd62      	ble.n	8009ee6 <__kernel_rem_pio2+0x25e>
 8009e20:	9b06      	ldr	r3, [sp, #24]
 8009e22:	2200      	movs	r2, #0
 8009e24:	3301      	adds	r3, #1
 8009e26:	9306      	str	r3, [sp, #24]
 8009e28:	4615      	mov	r5, r2
 8009e2a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009e2e:	4294      	cmp	r4, r2
 8009e30:	f300 8095 	bgt.w	8009f5e <__kernel_rem_pio2+0x2d6>
 8009e34:	f1ba 0f00 	cmp.w	sl, #0
 8009e38:	dd07      	ble.n	8009e4a <__kernel_rem_pio2+0x1c2>
 8009e3a:	f1ba 0f01 	cmp.w	sl, #1
 8009e3e:	f000 80a2 	beq.w	8009f86 <__kernel_rem_pio2+0x2fe>
 8009e42:	f1ba 0f02 	cmp.w	sl, #2
 8009e46:	f000 80c1 	beq.w	8009fcc <__kernel_rem_pio2+0x344>
 8009e4a:	9b02      	ldr	r3, [sp, #8]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d14a      	bne.n	8009ee6 <__kernel_rem_pio2+0x25e>
 8009e50:	4632      	mov	r2, r6
 8009e52:	463b      	mov	r3, r7
 8009e54:	2000      	movs	r0, #0
 8009e56:	4958      	ldr	r1, [pc, #352]	; (8009fb8 <__kernel_rem_pio2+0x330>)
 8009e58:	f7f6 f9ce 	bl	80001f8 <__aeabi_dsub>
 8009e5c:	4606      	mov	r6, r0
 8009e5e:	460f      	mov	r7, r1
 8009e60:	2d00      	cmp	r5, #0
 8009e62:	d040      	beq.n	8009ee6 <__kernel_rem_pio2+0x25e>
 8009e64:	4650      	mov	r0, sl
 8009e66:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009fa8 <__kernel_rem_pio2+0x320>
 8009e6a:	f000 fba1 	bl	800a5b0 <scalbn>
 8009e6e:	4630      	mov	r0, r6
 8009e70:	4639      	mov	r1, r7
 8009e72:	ec53 2b10 	vmov	r2, r3, d0
 8009e76:	f7f6 f9bf 	bl	80001f8 <__aeabi_dsub>
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	460f      	mov	r7, r1
 8009e7e:	e032      	b.n	8009ee6 <__kernel_rem_pio2+0x25e>
 8009e80:	2200      	movs	r2, #0
 8009e82:	4b4e      	ldr	r3, [pc, #312]	; (8009fbc <__kernel_rem_pio2+0x334>)
 8009e84:	4640      	mov	r0, r8
 8009e86:	4649      	mov	r1, r9
 8009e88:	f7f6 fb6e 	bl	8000568 <__aeabi_dmul>
 8009e8c:	f7f6 fe06 	bl	8000a9c <__aeabi_d2iz>
 8009e90:	f7f6 fb00 	bl	8000494 <__aeabi_i2d>
 8009e94:	2200      	movs	r2, #0
 8009e96:	4b4a      	ldr	r3, [pc, #296]	; (8009fc0 <__kernel_rem_pio2+0x338>)
 8009e98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e9c:	f7f6 fb64 	bl	8000568 <__aeabi_dmul>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	f7f6 f9a6 	bl	80001f8 <__aeabi_dsub>
 8009eac:	f7f6 fdf6 	bl	8000a9c <__aeabi_d2iz>
 8009eb0:	ab0e      	add	r3, sp, #56	; 0x38
 8009eb2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009eb6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ebe:	f7f6 f99d 	bl	80001fc <__adddf3>
 8009ec2:	3501      	adds	r5, #1
 8009ec4:	4680      	mov	r8, r0
 8009ec6:	4689      	mov	r9, r1
 8009ec8:	e75e      	b.n	8009d88 <__kernel_rem_pio2+0x100>
 8009eca:	d105      	bne.n	8009ed8 <__kernel_rem_pio2+0x250>
 8009ecc:	1e63      	subs	r3, r4, #1
 8009ece:	aa0e      	add	r2, sp, #56	; 0x38
 8009ed0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009ed4:	15c3      	asrs	r3, r0, #23
 8009ed6:	e79f      	b.n	8009e18 <__kernel_rem_pio2+0x190>
 8009ed8:	2200      	movs	r2, #0
 8009eda:	4b3a      	ldr	r3, [pc, #232]	; (8009fc4 <__kernel_rem_pio2+0x33c>)
 8009edc:	f7f6 fdca 	bl	8000a74 <__aeabi_dcmpge>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d139      	bne.n	8009f58 <__kernel_rem_pio2+0x2d0>
 8009ee4:	9002      	str	r0, [sp, #8]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4630      	mov	r0, r6
 8009eec:	4639      	mov	r1, r7
 8009eee:	f7f6 fda3 	bl	8000a38 <__aeabi_dcmpeq>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	f000 80c7 	beq.w	800a086 <__kernel_rem_pio2+0x3fe>
 8009ef8:	1e65      	subs	r5, r4, #1
 8009efa:	462b      	mov	r3, r5
 8009efc:	2200      	movs	r2, #0
 8009efe:	9904      	ldr	r1, [sp, #16]
 8009f00:	428b      	cmp	r3, r1
 8009f02:	da6a      	bge.n	8009fda <__kernel_rem_pio2+0x352>
 8009f04:	2a00      	cmp	r2, #0
 8009f06:	f000 8088 	beq.w	800a01a <__kernel_rem_pio2+0x392>
 8009f0a:	ab0e      	add	r3, sp, #56	; 0x38
 8009f0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009f10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 80b4 	beq.w	800a082 <__kernel_rem_pio2+0x3fa>
 8009f1a:	4650      	mov	r0, sl
 8009f1c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8009fa8 <__kernel_rem_pio2+0x320>
 8009f20:	f000 fb46 	bl	800a5b0 <scalbn>
 8009f24:	00ec      	lsls	r4, r5, #3
 8009f26:	ab72      	add	r3, sp, #456	; 0x1c8
 8009f28:	191e      	adds	r6, r3, r4
 8009f2a:	ec59 8b10 	vmov	r8, r9, d0
 8009f2e:	f106 0a08 	add.w	sl, r6, #8
 8009f32:	462f      	mov	r7, r5
 8009f34:	2f00      	cmp	r7, #0
 8009f36:	f280 80df 	bge.w	800a0f8 <__kernel_rem_pio2+0x470>
 8009f3a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8009fa0 <__kernel_rem_pio2+0x318>
 8009f3e:	f04f 0a00 	mov.w	sl, #0
 8009f42:	eba5 030a 	sub.w	r3, r5, sl
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f2c0 810a 	blt.w	800a160 <__kernel_rem_pio2+0x4d8>
 8009f4c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8009fc8 <__kernel_rem_pio2+0x340>
 8009f50:	ec59 8b18 	vmov	r8, r9, d8
 8009f54:	2700      	movs	r7, #0
 8009f56:	e0f5      	b.n	800a144 <__kernel_rem_pio2+0x4bc>
 8009f58:	2302      	movs	r3, #2
 8009f5a:	9302      	str	r3, [sp, #8]
 8009f5c:	e760      	b.n	8009e20 <__kernel_rem_pio2+0x198>
 8009f5e:	ab0e      	add	r3, sp, #56	; 0x38
 8009f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f64:	b94d      	cbnz	r5, 8009f7a <__kernel_rem_pio2+0x2f2>
 8009f66:	b12b      	cbz	r3, 8009f74 <__kernel_rem_pio2+0x2ec>
 8009f68:	a80e      	add	r0, sp, #56	; 0x38
 8009f6a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009f6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009f72:	2301      	movs	r3, #1
 8009f74:	3201      	adds	r2, #1
 8009f76:	461d      	mov	r5, r3
 8009f78:	e759      	b.n	8009e2e <__kernel_rem_pio2+0x1a6>
 8009f7a:	a80e      	add	r0, sp, #56	; 0x38
 8009f7c:	1acb      	subs	r3, r1, r3
 8009f7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009f82:	462b      	mov	r3, r5
 8009f84:	e7f6      	b.n	8009f74 <__kernel_rem_pio2+0x2ec>
 8009f86:	1e62      	subs	r2, r4, #1
 8009f88:	ab0e      	add	r3, sp, #56	; 0x38
 8009f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009f92:	a90e      	add	r1, sp, #56	; 0x38
 8009f94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009f98:	e757      	b.n	8009e4a <__kernel_rem_pio2+0x1c2>
 8009f9a:	bf00      	nop
 8009f9c:	f3af 8000 	nop.w
	...
 8009fac:	3ff00000 	.word	0x3ff00000
 8009fb0:	0800edf0 	.word	0x0800edf0
 8009fb4:	40200000 	.word	0x40200000
 8009fb8:	3ff00000 	.word	0x3ff00000
 8009fbc:	3e700000 	.word	0x3e700000
 8009fc0:	41700000 	.word	0x41700000
 8009fc4:	3fe00000 	.word	0x3fe00000
 8009fc8:	0800edb0 	.word	0x0800edb0
 8009fcc:	1e62      	subs	r2, r4, #1
 8009fce:	ab0e      	add	r3, sp, #56	; 0x38
 8009fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009fd8:	e7db      	b.n	8009f92 <__kernel_rem_pio2+0x30a>
 8009fda:	a90e      	add	r1, sp, #56	; 0x38
 8009fdc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	e78b      	b.n	8009efe <__kernel_rem_pio2+0x276>
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009fec:	2900      	cmp	r1, #0
 8009fee:	d0fa      	beq.n	8009fe6 <__kernel_rem_pio2+0x35e>
 8009ff0:	9a08      	ldr	r2, [sp, #32]
 8009ff2:	4422      	add	r2, r4
 8009ff4:	00d2      	lsls	r2, r2, #3
 8009ff6:	a922      	add	r1, sp, #136	; 0x88
 8009ff8:	18e3      	adds	r3, r4, r3
 8009ffa:	9206      	str	r2, [sp, #24]
 8009ffc:	440a      	add	r2, r1
 8009ffe:	9302      	str	r3, [sp, #8]
 800a000:	f10b 0108 	add.w	r1, fp, #8
 800a004:	f102 0308 	add.w	r3, r2, #8
 800a008:	1c66      	adds	r6, r4, #1
 800a00a:	910a      	str	r1, [sp, #40]	; 0x28
 800a00c:	2500      	movs	r5, #0
 800a00e:	930d      	str	r3, [sp, #52]	; 0x34
 800a010:	9b02      	ldr	r3, [sp, #8]
 800a012:	42b3      	cmp	r3, r6
 800a014:	da04      	bge.n	800a020 <__kernel_rem_pio2+0x398>
 800a016:	461c      	mov	r4, r3
 800a018:	e6a6      	b.n	8009d68 <__kernel_rem_pio2+0xe0>
 800a01a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a01c:	2301      	movs	r3, #1
 800a01e:	e7e3      	b.n	8009fe8 <__kernel_rem_pio2+0x360>
 800a020:	9b06      	ldr	r3, [sp, #24]
 800a022:	18ef      	adds	r7, r5, r3
 800a024:	ab22      	add	r3, sp, #136	; 0x88
 800a026:	441f      	add	r7, r3
 800a028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a02a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a02e:	f7f6 fa31 	bl	8000494 <__aeabi_i2d>
 800a032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a034:	461c      	mov	r4, r3
 800a036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a038:	e9c7 0100 	strd	r0, r1, [r7]
 800a03c:	eb03 0b05 	add.w	fp, r3, r5
 800a040:	2700      	movs	r7, #0
 800a042:	f04f 0800 	mov.w	r8, #0
 800a046:	f04f 0900 	mov.w	r9, #0
 800a04a:	9b07      	ldr	r3, [sp, #28]
 800a04c:	429f      	cmp	r7, r3
 800a04e:	dd08      	ble.n	800a062 <__kernel_rem_pio2+0x3da>
 800a050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a052:	aa72      	add	r2, sp, #456	; 0x1c8
 800a054:	18eb      	adds	r3, r5, r3
 800a056:	4413      	add	r3, r2
 800a058:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a05c:	3601      	adds	r6, #1
 800a05e:	3508      	adds	r5, #8
 800a060:	e7d6      	b.n	800a010 <__kernel_rem_pio2+0x388>
 800a062:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a066:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a06a:	f7f6 fa7d 	bl	8000568 <__aeabi_dmul>
 800a06e:	4602      	mov	r2, r0
 800a070:	460b      	mov	r3, r1
 800a072:	4640      	mov	r0, r8
 800a074:	4649      	mov	r1, r9
 800a076:	f7f6 f8c1 	bl	80001fc <__adddf3>
 800a07a:	3701      	adds	r7, #1
 800a07c:	4680      	mov	r8, r0
 800a07e:	4689      	mov	r9, r1
 800a080:	e7e3      	b.n	800a04a <__kernel_rem_pio2+0x3c2>
 800a082:	3d01      	subs	r5, #1
 800a084:	e741      	b.n	8009f0a <__kernel_rem_pio2+0x282>
 800a086:	f1ca 0000 	rsb	r0, sl, #0
 800a08a:	ec47 6b10 	vmov	d0, r6, r7
 800a08e:	f000 fa8f 	bl	800a5b0 <scalbn>
 800a092:	ec57 6b10 	vmov	r6, r7, d0
 800a096:	2200      	movs	r2, #0
 800a098:	4b99      	ldr	r3, [pc, #612]	; (800a300 <__kernel_rem_pio2+0x678>)
 800a09a:	ee10 0a10 	vmov	r0, s0
 800a09e:	4639      	mov	r1, r7
 800a0a0:	f7f6 fce8 	bl	8000a74 <__aeabi_dcmpge>
 800a0a4:	b1f8      	cbz	r0, 800a0e6 <__kernel_rem_pio2+0x45e>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	4b96      	ldr	r3, [pc, #600]	; (800a304 <__kernel_rem_pio2+0x67c>)
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	4639      	mov	r1, r7
 800a0ae:	f7f6 fa5b 	bl	8000568 <__aeabi_dmul>
 800a0b2:	f7f6 fcf3 	bl	8000a9c <__aeabi_d2iz>
 800a0b6:	4680      	mov	r8, r0
 800a0b8:	f7f6 f9ec 	bl	8000494 <__aeabi_i2d>
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4b90      	ldr	r3, [pc, #576]	; (800a300 <__kernel_rem_pio2+0x678>)
 800a0c0:	f7f6 fa52 	bl	8000568 <__aeabi_dmul>
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f7f6 f894 	bl	80001f8 <__aeabi_dsub>
 800a0d0:	f7f6 fce4 	bl	8000a9c <__aeabi_d2iz>
 800a0d4:	1c65      	adds	r5, r4, #1
 800a0d6:	ab0e      	add	r3, sp, #56	; 0x38
 800a0d8:	f10a 0a18 	add.w	sl, sl, #24
 800a0dc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a0e0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a0e4:	e719      	b.n	8009f1a <__kernel_rem_pio2+0x292>
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	f7f6 fcd7 	bl	8000a9c <__aeabi_d2iz>
 800a0ee:	ab0e      	add	r3, sp, #56	; 0x38
 800a0f0:	4625      	mov	r5, r4
 800a0f2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a0f6:	e710      	b.n	8009f1a <__kernel_rem_pio2+0x292>
 800a0f8:	ab0e      	add	r3, sp, #56	; 0x38
 800a0fa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a0fe:	f7f6 f9c9 	bl	8000494 <__aeabi_i2d>
 800a102:	4642      	mov	r2, r8
 800a104:	464b      	mov	r3, r9
 800a106:	f7f6 fa2f 	bl	8000568 <__aeabi_dmul>
 800a10a:	2200      	movs	r2, #0
 800a10c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a110:	4b7c      	ldr	r3, [pc, #496]	; (800a304 <__kernel_rem_pio2+0x67c>)
 800a112:	4640      	mov	r0, r8
 800a114:	4649      	mov	r1, r9
 800a116:	f7f6 fa27 	bl	8000568 <__aeabi_dmul>
 800a11a:	3f01      	subs	r7, #1
 800a11c:	4680      	mov	r8, r0
 800a11e:	4689      	mov	r9, r1
 800a120:	e708      	b.n	8009f34 <__kernel_rem_pio2+0x2ac>
 800a122:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a12e:	f7f6 fa1b 	bl	8000568 <__aeabi_dmul>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4640      	mov	r0, r8
 800a138:	4649      	mov	r1, r9
 800a13a:	f7f6 f85f 	bl	80001fc <__adddf3>
 800a13e:	3701      	adds	r7, #1
 800a140:	4680      	mov	r8, r0
 800a142:	4689      	mov	r9, r1
 800a144:	9b04      	ldr	r3, [sp, #16]
 800a146:	429f      	cmp	r7, r3
 800a148:	dc01      	bgt.n	800a14e <__kernel_rem_pio2+0x4c6>
 800a14a:	45ba      	cmp	sl, r7
 800a14c:	dae9      	bge.n	800a122 <__kernel_rem_pio2+0x49a>
 800a14e:	ab4a      	add	r3, sp, #296	; 0x128
 800a150:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a154:	e9c3 8900 	strd	r8, r9, [r3]
 800a158:	f10a 0a01 	add.w	sl, sl, #1
 800a15c:	3e08      	subs	r6, #8
 800a15e:	e6f0      	b.n	8009f42 <__kernel_rem_pio2+0x2ba>
 800a160:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a162:	2b03      	cmp	r3, #3
 800a164:	d85b      	bhi.n	800a21e <__kernel_rem_pio2+0x596>
 800a166:	e8df f003 	tbb	[pc, r3]
 800a16a:	264a      	.short	0x264a
 800a16c:	0226      	.short	0x0226
 800a16e:	ab9a      	add	r3, sp, #616	; 0x268
 800a170:	441c      	add	r4, r3
 800a172:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a176:	46a2      	mov	sl, r4
 800a178:	46ab      	mov	fp, r5
 800a17a:	f1bb 0f00 	cmp.w	fp, #0
 800a17e:	dc6c      	bgt.n	800a25a <__kernel_rem_pio2+0x5d2>
 800a180:	46a2      	mov	sl, r4
 800a182:	46ab      	mov	fp, r5
 800a184:	f1bb 0f01 	cmp.w	fp, #1
 800a188:	f300 8086 	bgt.w	800a298 <__kernel_rem_pio2+0x610>
 800a18c:	2000      	movs	r0, #0
 800a18e:	2100      	movs	r1, #0
 800a190:	2d01      	cmp	r5, #1
 800a192:	f300 80a0 	bgt.w	800a2d6 <__kernel_rem_pio2+0x64e>
 800a196:	9b02      	ldr	r3, [sp, #8]
 800a198:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a19c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f040 809e 	bne.w	800a2e2 <__kernel_rem_pio2+0x65a>
 800a1a6:	9b01      	ldr	r3, [sp, #4]
 800a1a8:	e9c3 7800 	strd	r7, r8, [r3]
 800a1ac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a1b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a1b4:	e033      	b.n	800a21e <__kernel_rem_pio2+0x596>
 800a1b6:	3408      	adds	r4, #8
 800a1b8:	ab4a      	add	r3, sp, #296	; 0x128
 800a1ba:	441c      	add	r4, r3
 800a1bc:	462e      	mov	r6, r5
 800a1be:	2000      	movs	r0, #0
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	2e00      	cmp	r6, #0
 800a1c4:	da3a      	bge.n	800a23c <__kernel_rem_pio2+0x5b4>
 800a1c6:	9b02      	ldr	r3, [sp, #8]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d03d      	beq.n	800a248 <__kernel_rem_pio2+0x5c0>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1d2:	9c01      	ldr	r4, [sp, #4]
 800a1d4:	e9c4 2300 	strd	r2, r3, [r4]
 800a1d8:	4602      	mov	r2, r0
 800a1da:	460b      	mov	r3, r1
 800a1dc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a1e0:	f7f6 f80a 	bl	80001f8 <__aeabi_dsub>
 800a1e4:	ae4c      	add	r6, sp, #304	; 0x130
 800a1e6:	2401      	movs	r4, #1
 800a1e8:	42a5      	cmp	r5, r4
 800a1ea:	da30      	bge.n	800a24e <__kernel_rem_pio2+0x5c6>
 800a1ec:	9b02      	ldr	r3, [sp, #8]
 800a1ee:	b113      	cbz	r3, 800a1f6 <__kernel_rem_pio2+0x56e>
 800a1f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	9b01      	ldr	r3, [sp, #4]
 800a1f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a1fc:	e00f      	b.n	800a21e <__kernel_rem_pio2+0x596>
 800a1fe:	ab9a      	add	r3, sp, #616	; 0x268
 800a200:	441c      	add	r4, r3
 800a202:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a206:	2000      	movs	r0, #0
 800a208:	2100      	movs	r1, #0
 800a20a:	2d00      	cmp	r5, #0
 800a20c:	da10      	bge.n	800a230 <__kernel_rem_pio2+0x5a8>
 800a20e:	9b02      	ldr	r3, [sp, #8]
 800a210:	b113      	cbz	r3, 800a218 <__kernel_rem_pio2+0x590>
 800a212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a216:	4619      	mov	r1, r3
 800a218:	9b01      	ldr	r3, [sp, #4]
 800a21a:	e9c3 0100 	strd	r0, r1, [r3]
 800a21e:	9b06      	ldr	r3, [sp, #24]
 800a220:	f003 0007 	and.w	r0, r3, #7
 800a224:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a228:	ecbd 8b02 	vpop	{d8}
 800a22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a230:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a234:	f7f5 ffe2 	bl	80001fc <__adddf3>
 800a238:	3d01      	subs	r5, #1
 800a23a:	e7e6      	b.n	800a20a <__kernel_rem_pio2+0x582>
 800a23c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a240:	f7f5 ffdc 	bl	80001fc <__adddf3>
 800a244:	3e01      	subs	r6, #1
 800a246:	e7bc      	b.n	800a1c2 <__kernel_rem_pio2+0x53a>
 800a248:	4602      	mov	r2, r0
 800a24a:	460b      	mov	r3, r1
 800a24c:	e7c1      	b.n	800a1d2 <__kernel_rem_pio2+0x54a>
 800a24e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a252:	f7f5 ffd3 	bl	80001fc <__adddf3>
 800a256:	3401      	adds	r4, #1
 800a258:	e7c6      	b.n	800a1e8 <__kernel_rem_pio2+0x560>
 800a25a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800a25e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a262:	4640      	mov	r0, r8
 800a264:	ec53 2b17 	vmov	r2, r3, d7
 800a268:	4649      	mov	r1, r9
 800a26a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a26e:	f7f5 ffc5 	bl	80001fc <__adddf3>
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	4606      	mov	r6, r0
 800a278:	460f      	mov	r7, r1
 800a27a:	4640      	mov	r0, r8
 800a27c:	4649      	mov	r1, r9
 800a27e:	f7f5 ffbb 	bl	80001f8 <__aeabi_dsub>
 800a282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a286:	f7f5 ffb9 	bl	80001fc <__adddf3>
 800a28a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a28e:	e9ca 0100 	strd	r0, r1, [sl]
 800a292:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800a296:	e770      	b.n	800a17a <__kernel_rem_pio2+0x4f2>
 800a298:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800a29c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	ec53 2b17 	vmov	r2, r3, d7
 800a2a6:	4639      	mov	r1, r7
 800a2a8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a2ac:	f7f5 ffa6 	bl	80001fc <__adddf3>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4680      	mov	r8, r0
 800a2b6:	4689      	mov	r9, r1
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	4639      	mov	r1, r7
 800a2bc:	f7f5 ff9c 	bl	80001f8 <__aeabi_dsub>
 800a2c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2c4:	f7f5 ff9a 	bl	80001fc <__adddf3>
 800a2c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a2cc:	e9ca 0100 	strd	r0, r1, [sl]
 800a2d0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800a2d4:	e756      	b.n	800a184 <__kernel_rem_pio2+0x4fc>
 800a2d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a2da:	f7f5 ff8f 	bl	80001fc <__adddf3>
 800a2de:	3d01      	subs	r5, #1
 800a2e0:	e756      	b.n	800a190 <__kernel_rem_pio2+0x508>
 800a2e2:	9b01      	ldr	r3, [sp, #4]
 800a2e4:	9a01      	ldr	r2, [sp, #4]
 800a2e6:	601f      	str	r7, [r3, #0]
 800a2e8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a2ec:	605c      	str	r4, [r3, #4]
 800a2ee:	609d      	str	r5, [r3, #8]
 800a2f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a2f4:	60d3      	str	r3, [r2, #12]
 800a2f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2fa:	6110      	str	r0, [r2, #16]
 800a2fc:	6153      	str	r3, [r2, #20]
 800a2fe:	e78e      	b.n	800a21e <__kernel_rem_pio2+0x596>
 800a300:	41700000 	.word	0x41700000
 800a304:	3e700000 	.word	0x3e700000

0800a308 <__kernel_sin>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	ec55 4b10 	vmov	r4, r5, d0
 800a310:	b085      	sub	sp, #20
 800a312:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a316:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a31a:	ed8d 1b00 	vstr	d1, [sp]
 800a31e:	9002      	str	r0, [sp, #8]
 800a320:	da06      	bge.n	800a330 <__kernel_sin+0x28>
 800a322:	ee10 0a10 	vmov	r0, s0
 800a326:	4629      	mov	r1, r5
 800a328:	f7f6 fbb8 	bl	8000a9c <__aeabi_d2iz>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d051      	beq.n	800a3d4 <__kernel_sin+0xcc>
 800a330:	4622      	mov	r2, r4
 800a332:	462b      	mov	r3, r5
 800a334:	4620      	mov	r0, r4
 800a336:	4629      	mov	r1, r5
 800a338:	f7f6 f916 	bl	8000568 <__aeabi_dmul>
 800a33c:	4682      	mov	sl, r0
 800a33e:	468b      	mov	fp, r1
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f7f6 f90e 	bl	8000568 <__aeabi_dmul>
 800a34c:	a341      	add	r3, pc, #260	; (adr r3, 800a454 <__kernel_sin+0x14c>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	4680      	mov	r8, r0
 800a354:	4689      	mov	r9, r1
 800a356:	4650      	mov	r0, sl
 800a358:	4659      	mov	r1, fp
 800a35a:	f7f6 f905 	bl	8000568 <__aeabi_dmul>
 800a35e:	a33f      	add	r3, pc, #252	; (adr r3, 800a45c <__kernel_sin+0x154>)
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	f7f5 ff48 	bl	80001f8 <__aeabi_dsub>
 800a368:	4652      	mov	r2, sl
 800a36a:	465b      	mov	r3, fp
 800a36c:	f7f6 f8fc 	bl	8000568 <__aeabi_dmul>
 800a370:	a33c      	add	r3, pc, #240	; (adr r3, 800a464 <__kernel_sin+0x15c>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	f7f5 ff41 	bl	80001fc <__adddf3>
 800a37a:	4652      	mov	r2, sl
 800a37c:	465b      	mov	r3, fp
 800a37e:	f7f6 f8f3 	bl	8000568 <__aeabi_dmul>
 800a382:	a33a      	add	r3, pc, #232	; (adr r3, 800a46c <__kernel_sin+0x164>)
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	f7f5 ff36 	bl	80001f8 <__aeabi_dsub>
 800a38c:	4652      	mov	r2, sl
 800a38e:	465b      	mov	r3, fp
 800a390:	f7f6 f8ea 	bl	8000568 <__aeabi_dmul>
 800a394:	a337      	add	r3, pc, #220	; (adr r3, 800a474 <__kernel_sin+0x16c>)
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	f7f5 ff2f 	bl	80001fc <__adddf3>
 800a39e:	9b02      	ldr	r3, [sp, #8]
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	460f      	mov	r7, r1
 800a3a4:	b9db      	cbnz	r3, 800a3de <__kernel_sin+0xd6>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4650      	mov	r0, sl
 800a3ac:	4659      	mov	r1, fp
 800a3ae:	f7f6 f8db 	bl	8000568 <__aeabi_dmul>
 800a3b2:	a325      	add	r3, pc, #148	; (adr r3, 800a448 <__kernel_sin+0x140>)
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	f7f5 ff1e 	bl	80001f8 <__aeabi_dsub>
 800a3bc:	4642      	mov	r2, r8
 800a3be:	464b      	mov	r3, r9
 800a3c0:	f7f6 f8d2 	bl	8000568 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	f7f5 ff16 	bl	80001fc <__adddf3>
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	ec45 4b10 	vmov	d0, r4, r5
 800a3d8:	b005      	add	sp, #20
 800a3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3de:	2200      	movs	r2, #0
 800a3e0:	4b1b      	ldr	r3, [pc, #108]	; (800a450 <__kernel_sin+0x148>)
 800a3e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3e6:	f7f6 f8bf 	bl	8000568 <__aeabi_dmul>
 800a3ea:	4632      	mov	r2, r6
 800a3ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3f0:	463b      	mov	r3, r7
 800a3f2:	4640      	mov	r0, r8
 800a3f4:	4649      	mov	r1, r9
 800a3f6:	f7f6 f8b7 	bl	8000568 <__aeabi_dmul>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a402:	f7f5 fef9 	bl	80001f8 <__aeabi_dsub>
 800a406:	4652      	mov	r2, sl
 800a408:	465b      	mov	r3, fp
 800a40a:	f7f6 f8ad 	bl	8000568 <__aeabi_dmul>
 800a40e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a412:	f7f5 fef1 	bl	80001f8 <__aeabi_dsub>
 800a416:	a30c      	add	r3, pc, #48	; (adr r3, 800a448 <__kernel_sin+0x140>)
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	4606      	mov	r6, r0
 800a41e:	460f      	mov	r7, r1
 800a420:	4640      	mov	r0, r8
 800a422:	4649      	mov	r1, r9
 800a424:	f7f6 f8a0 	bl	8000568 <__aeabi_dmul>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4630      	mov	r0, r6
 800a42e:	4639      	mov	r1, r7
 800a430:	f7f5 fee4 	bl	80001fc <__adddf3>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4620      	mov	r0, r4
 800a43a:	4629      	mov	r1, r5
 800a43c:	f7f5 fedc 	bl	80001f8 <__aeabi_dsub>
 800a440:	e7c6      	b.n	800a3d0 <__kernel_sin+0xc8>
 800a442:	bf00      	nop
 800a444:	f3af 8000 	nop.w
 800a448:	55555549 	.word	0x55555549
 800a44c:	3fc55555 	.word	0x3fc55555
 800a450:	3fe00000 	.word	0x3fe00000
 800a454:	5acfd57c 	.word	0x5acfd57c
 800a458:	3de5d93a 	.word	0x3de5d93a
 800a45c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a460:	3e5ae5e6 	.word	0x3e5ae5e6
 800a464:	57b1fe7d 	.word	0x57b1fe7d
 800a468:	3ec71de3 	.word	0x3ec71de3
 800a46c:	19c161d5 	.word	0x19c161d5
 800a470:	3f2a01a0 	.word	0x3f2a01a0
 800a474:	1110f8a6 	.word	0x1110f8a6
 800a478:	3f811111 	.word	0x3f811111

0800a47c <fabs>:
 800a47c:	ec51 0b10 	vmov	r0, r1, d0
 800a480:	ee10 2a10 	vmov	r2, s0
 800a484:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a488:	ec43 2b10 	vmov	d0, r2, r3
 800a48c:	4770      	bx	lr

0800a48e <finite>:
 800a48e:	ee10 3a90 	vmov	r3, s1
 800a492:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a496:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a49a:	0fc0      	lsrs	r0, r0, #31
 800a49c:	4770      	bx	lr
	...

0800a4a0 <floor>:
 800a4a0:	ec51 0b10 	vmov	r0, r1, d0
 800a4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a4ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a4b0:	2e13      	cmp	r6, #19
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	ee10 5a10 	vmov	r5, s0
 800a4b8:	4680      	mov	r8, r0
 800a4ba:	dc34      	bgt.n	800a526 <floor+0x86>
 800a4bc:	2e00      	cmp	r6, #0
 800a4be:	da16      	bge.n	800a4ee <floor+0x4e>
 800a4c0:	a335      	add	r3, pc, #212	; (adr r3, 800a598 <floor+0xf8>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	f7f5 fe99 	bl	80001fc <__adddf3>
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f7f6 fadb 	bl	8000a88 <__aeabi_dcmpgt>
 800a4d2:	b148      	cbz	r0, 800a4e8 <floor+0x48>
 800a4d4:	2c00      	cmp	r4, #0
 800a4d6:	da59      	bge.n	800a58c <floor+0xec>
 800a4d8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a4dc:	4a30      	ldr	r2, [pc, #192]	; (800a5a0 <floor+0x100>)
 800a4de:	432b      	orrs	r3, r5
 800a4e0:	2500      	movs	r5, #0
 800a4e2:	42ab      	cmp	r3, r5
 800a4e4:	bf18      	it	ne
 800a4e6:	4614      	movne	r4, r2
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	e025      	b.n	800a53a <floor+0x9a>
 800a4ee:	4f2d      	ldr	r7, [pc, #180]	; (800a5a4 <floor+0x104>)
 800a4f0:	4137      	asrs	r7, r6
 800a4f2:	ea01 0307 	and.w	r3, r1, r7
 800a4f6:	4303      	orrs	r3, r0
 800a4f8:	d01f      	beq.n	800a53a <floor+0x9a>
 800a4fa:	a327      	add	r3, pc, #156	; (adr r3, 800a598 <floor+0xf8>)
 800a4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a500:	f7f5 fe7c 	bl	80001fc <__adddf3>
 800a504:	2200      	movs	r2, #0
 800a506:	2300      	movs	r3, #0
 800a508:	f7f6 fabe 	bl	8000a88 <__aeabi_dcmpgt>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d0eb      	beq.n	800a4e8 <floor+0x48>
 800a510:	2c00      	cmp	r4, #0
 800a512:	bfbe      	ittt	lt
 800a514:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a518:	fa43 f606 	asrlt.w	r6, r3, r6
 800a51c:	19a4      	addlt	r4, r4, r6
 800a51e:	ea24 0407 	bic.w	r4, r4, r7
 800a522:	2500      	movs	r5, #0
 800a524:	e7e0      	b.n	800a4e8 <floor+0x48>
 800a526:	2e33      	cmp	r6, #51	; 0x33
 800a528:	dd0b      	ble.n	800a542 <floor+0xa2>
 800a52a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a52e:	d104      	bne.n	800a53a <floor+0x9a>
 800a530:	ee10 2a10 	vmov	r2, s0
 800a534:	460b      	mov	r3, r1
 800a536:	f7f5 fe61 	bl	80001fc <__adddf3>
 800a53a:	ec41 0b10 	vmov	d0, r0, r1
 800a53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a542:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a546:	f04f 33ff 	mov.w	r3, #4294967295
 800a54a:	fa23 f707 	lsr.w	r7, r3, r7
 800a54e:	4207      	tst	r7, r0
 800a550:	d0f3      	beq.n	800a53a <floor+0x9a>
 800a552:	a311      	add	r3, pc, #68	; (adr r3, 800a598 <floor+0xf8>)
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	f7f5 fe50 	bl	80001fc <__adddf3>
 800a55c:	2200      	movs	r2, #0
 800a55e:	2300      	movs	r3, #0
 800a560:	f7f6 fa92 	bl	8000a88 <__aeabi_dcmpgt>
 800a564:	2800      	cmp	r0, #0
 800a566:	d0bf      	beq.n	800a4e8 <floor+0x48>
 800a568:	2c00      	cmp	r4, #0
 800a56a:	da02      	bge.n	800a572 <floor+0xd2>
 800a56c:	2e14      	cmp	r6, #20
 800a56e:	d103      	bne.n	800a578 <floor+0xd8>
 800a570:	3401      	adds	r4, #1
 800a572:	ea25 0507 	bic.w	r5, r5, r7
 800a576:	e7b7      	b.n	800a4e8 <floor+0x48>
 800a578:	2301      	movs	r3, #1
 800a57a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a57e:	fa03 f606 	lsl.w	r6, r3, r6
 800a582:	4435      	add	r5, r6
 800a584:	4545      	cmp	r5, r8
 800a586:	bf38      	it	cc
 800a588:	18e4      	addcc	r4, r4, r3
 800a58a:	e7f2      	b.n	800a572 <floor+0xd2>
 800a58c:	2500      	movs	r5, #0
 800a58e:	462c      	mov	r4, r5
 800a590:	e7aa      	b.n	800a4e8 <floor+0x48>
 800a592:	bf00      	nop
 800a594:	f3af 8000 	nop.w
 800a598:	8800759c 	.word	0x8800759c
 800a59c:	7e37e43c 	.word	0x7e37e43c
 800a5a0:	bff00000 	.word	0xbff00000
 800a5a4:	000fffff 	.word	0x000fffff

0800a5a8 <matherr>:
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	4770      	bx	lr
 800a5ac:	0000      	movs	r0, r0
	...

0800a5b0 <scalbn>:
 800a5b0:	b570      	push	{r4, r5, r6, lr}
 800a5b2:	ec55 4b10 	vmov	r4, r5, d0
 800a5b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a5ba:	4606      	mov	r6, r0
 800a5bc:	462b      	mov	r3, r5
 800a5be:	b9aa      	cbnz	r2, 800a5ec <scalbn+0x3c>
 800a5c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a5c4:	4323      	orrs	r3, r4
 800a5c6:	d03b      	beq.n	800a640 <scalbn+0x90>
 800a5c8:	4b31      	ldr	r3, [pc, #196]	; (800a690 <scalbn+0xe0>)
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	ee10 0a10 	vmov	r0, s0
 800a5d2:	f7f5 ffc9 	bl	8000568 <__aeabi_dmul>
 800a5d6:	4b2f      	ldr	r3, [pc, #188]	; (800a694 <scalbn+0xe4>)
 800a5d8:	429e      	cmp	r6, r3
 800a5da:	4604      	mov	r4, r0
 800a5dc:	460d      	mov	r5, r1
 800a5de:	da12      	bge.n	800a606 <scalbn+0x56>
 800a5e0:	a327      	add	r3, pc, #156	; (adr r3, 800a680 <scalbn+0xd0>)
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	f7f5 ffbf 	bl	8000568 <__aeabi_dmul>
 800a5ea:	e009      	b.n	800a600 <scalbn+0x50>
 800a5ec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a5f0:	428a      	cmp	r2, r1
 800a5f2:	d10c      	bne.n	800a60e <scalbn+0x5e>
 800a5f4:	ee10 2a10 	vmov	r2, s0
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	f7f5 fdfe 	bl	80001fc <__adddf3>
 800a600:	4604      	mov	r4, r0
 800a602:	460d      	mov	r5, r1
 800a604:	e01c      	b.n	800a640 <scalbn+0x90>
 800a606:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a60a:	460b      	mov	r3, r1
 800a60c:	3a36      	subs	r2, #54	; 0x36
 800a60e:	4432      	add	r2, r6
 800a610:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a614:	428a      	cmp	r2, r1
 800a616:	dd0b      	ble.n	800a630 <scalbn+0x80>
 800a618:	ec45 4b11 	vmov	d1, r4, r5
 800a61c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a688 <scalbn+0xd8>
 800a620:	f000 f83c 	bl	800a69c <copysign>
 800a624:	a318      	add	r3, pc, #96	; (adr r3, 800a688 <scalbn+0xd8>)
 800a626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62a:	ec51 0b10 	vmov	r0, r1, d0
 800a62e:	e7da      	b.n	800a5e6 <scalbn+0x36>
 800a630:	2a00      	cmp	r2, #0
 800a632:	dd08      	ble.n	800a646 <scalbn+0x96>
 800a634:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a638:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a63c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a640:	ec45 4b10 	vmov	d0, r4, r5
 800a644:	bd70      	pop	{r4, r5, r6, pc}
 800a646:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a64a:	da0d      	bge.n	800a668 <scalbn+0xb8>
 800a64c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a650:	429e      	cmp	r6, r3
 800a652:	ec45 4b11 	vmov	d1, r4, r5
 800a656:	dce1      	bgt.n	800a61c <scalbn+0x6c>
 800a658:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a680 <scalbn+0xd0>
 800a65c:	f000 f81e 	bl	800a69c <copysign>
 800a660:	a307      	add	r3, pc, #28	; (adr r3, 800a680 <scalbn+0xd0>)
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	e7e0      	b.n	800a62a <scalbn+0x7a>
 800a668:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a66c:	3236      	adds	r2, #54	; 0x36
 800a66e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a672:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a676:	4620      	mov	r0, r4
 800a678:	4629      	mov	r1, r5
 800a67a:	2200      	movs	r2, #0
 800a67c:	4b06      	ldr	r3, [pc, #24]	; (800a698 <scalbn+0xe8>)
 800a67e:	e7b2      	b.n	800a5e6 <scalbn+0x36>
 800a680:	c2f8f359 	.word	0xc2f8f359
 800a684:	01a56e1f 	.word	0x01a56e1f
 800a688:	8800759c 	.word	0x8800759c
 800a68c:	7e37e43c 	.word	0x7e37e43c
 800a690:	43500000 	.word	0x43500000
 800a694:	ffff3cb0 	.word	0xffff3cb0
 800a698:	3c900000 	.word	0x3c900000

0800a69c <copysign>:
 800a69c:	ec51 0b10 	vmov	r0, r1, d0
 800a6a0:	ee11 0a90 	vmov	r0, s3
 800a6a4:	ee10 2a10 	vmov	r2, s0
 800a6a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a6ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a6b0:	ea41 0300 	orr.w	r3, r1, r0
 800a6b4:	ec43 2b10 	vmov	d0, r2, r3
 800a6b8:	4770      	bx	lr
	...

0800a6bc <gcvt>:
 800a6bc:	b530      	push	{r4, r5, lr}
 800a6be:	ed2d 8b02 	vpush	{d8}
 800a6c2:	eeb0 8a40 	vmov.f32	s16, s0
 800a6c6:	eef0 8a60 	vmov.f32	s17, s1
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	ec51 0b10 	vmov	r0, r1, d0
 800a6d8:	f7f6 f9b8 	bl	8000a4c <__aeabi_dcmplt>
 800a6dc:	4622      	mov	r2, r4
 800a6de:	b118      	cbz	r0, 800a6e8 <gcvt+0x2c>
 800a6e0:	232d      	movs	r3, #45	; 0x2d
 800a6e2:	f802 3b01 	strb.w	r3, [r2], #1
 800a6e6:	3d01      	subs	r5, #1
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4809      	ldr	r0, [pc, #36]	; (800a710 <gcvt+0x54>)
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	2367      	movs	r3, #103	; 0x67
 800a6f2:	eeb0 0a48 	vmov.f32	s0, s16
 800a6f6:	eef0 0a68 	vmov.f32	s1, s17
 800a6fa:	6800      	ldr	r0, [r0, #0]
 800a6fc:	f000 f8bc 	bl	800a878 <_gcvt>
 800a700:	2800      	cmp	r0, #0
 800a702:	bf14      	ite	ne
 800a704:	4620      	movne	r0, r4
 800a706:	2000      	moveq	r0, #0
 800a708:	b003      	add	sp, #12
 800a70a:	ecbd 8b02 	vpop	{d8}
 800a70e:	bd30      	pop	{r4, r5, pc}
 800a710:	20000064 	.word	0x20000064

0800a714 <__errno>:
 800a714:	4b01      	ldr	r3, [pc, #4]	; (800a71c <__errno+0x8>)
 800a716:	6818      	ldr	r0, [r3, #0]
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	20000064 	.word	0x20000064

0800a720 <__libc_init_array>:
 800a720:	b570      	push	{r4, r5, r6, lr}
 800a722:	4e0d      	ldr	r6, [pc, #52]	; (800a758 <__libc_init_array+0x38>)
 800a724:	4c0d      	ldr	r4, [pc, #52]	; (800a75c <__libc_init_array+0x3c>)
 800a726:	1ba4      	subs	r4, r4, r6
 800a728:	10a4      	asrs	r4, r4, #2
 800a72a:	2500      	movs	r5, #0
 800a72c:	42a5      	cmp	r5, r4
 800a72e:	d109      	bne.n	800a744 <__libc_init_array+0x24>
 800a730:	4e0b      	ldr	r6, [pc, #44]	; (800a760 <__libc_init_array+0x40>)
 800a732:	4c0c      	ldr	r4, [pc, #48]	; (800a764 <__libc_init_array+0x44>)
 800a734:	f001 fb32 	bl	800bd9c <_init>
 800a738:	1ba4      	subs	r4, r4, r6
 800a73a:	10a4      	asrs	r4, r4, #2
 800a73c:	2500      	movs	r5, #0
 800a73e:	42a5      	cmp	r5, r4
 800a740:	d105      	bne.n	800a74e <__libc_init_array+0x2e>
 800a742:	bd70      	pop	{r4, r5, r6, pc}
 800a744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a748:	4798      	blx	r3
 800a74a:	3501      	adds	r5, #1
 800a74c:	e7ee      	b.n	800a72c <__libc_init_array+0xc>
 800a74e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a752:	4798      	blx	r3
 800a754:	3501      	adds	r5, #1
 800a756:	e7f2      	b.n	800a73e <__libc_init_array+0x1e>
 800a758:	0800ef14 	.word	0x0800ef14
 800a75c:	0800ef14 	.word	0x0800ef14
 800a760:	0800ef14 	.word	0x0800ef14
 800a764:	0800ef18 	.word	0x0800ef18

0800a768 <memcpy>:
 800a768:	b510      	push	{r4, lr}
 800a76a:	1e43      	subs	r3, r0, #1
 800a76c:	440a      	add	r2, r1
 800a76e:	4291      	cmp	r1, r2
 800a770:	d100      	bne.n	800a774 <memcpy+0xc>
 800a772:	bd10      	pop	{r4, pc}
 800a774:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a77c:	e7f7      	b.n	800a76e <memcpy+0x6>

0800a77e <memset>:
 800a77e:	4402      	add	r2, r0
 800a780:	4603      	mov	r3, r0
 800a782:	4293      	cmp	r3, r2
 800a784:	d100      	bne.n	800a788 <memset+0xa>
 800a786:	4770      	bx	lr
 800a788:	f803 1b01 	strb.w	r1, [r3], #1
 800a78c:	e7f9      	b.n	800a782 <memset+0x4>

0800a78e <print_e>:
 800a78e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a790:	b087      	sub	sp, #28
 800a792:	ec43 2b10 	vmov	d0, r2, r3
 800a796:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a798:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800a79c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a79e:	ab04      	add	r3, sp, #16
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	ab03      	add	r3, sp, #12
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	460f      	mov	r7, r1
 800a7a8:	ab05      	add	r3, sp, #20
 800a7aa:	2102      	movs	r1, #2
 800a7ac:	1c62      	adds	r2, r4, #1
 800a7ae:	f000 fd33 	bl	800b218 <_dtoa_r>
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	9805      	ldr	r0, [sp, #20]
 800a7b6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7ba:	4298      	cmp	r0, r3
 800a7bc:	d104      	bne.n	800a7c8 <print_e+0x3a>
 800a7be:	4638      	mov	r0, r7
 800a7c0:	f000 fc96 	bl	800b0f0 <strcpy>
 800a7c4:	b007      	add	sp, #28
 800a7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7c8:	780b      	ldrb	r3, [r1, #0]
 800a7ca:	703b      	strb	r3, [r7, #0]
 800a7cc:	2d00      	cmp	r5, #0
 800a7ce:	d143      	bne.n	800a858 <print_e+0xca>
 800a7d0:	2c00      	cmp	r4, #0
 800a7d2:	d141      	bne.n	800a858 <print_e+0xca>
 800a7d4:	1c7b      	adds	r3, r7, #1
 800a7d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a7da:	b10a      	cbz	r2, 800a7e0 <print_e+0x52>
 800a7dc:	2c00      	cmp	r4, #0
 800a7de:	dc3f      	bgt.n	800a860 <print_e+0xd2>
 800a7e0:	2e67      	cmp	r6, #103	; 0x67
 800a7e2:	d044      	beq.n	800a86e <print_e+0xe0>
 800a7e4:	2e47      	cmp	r6, #71	; 0x47
 800a7e6:	d044      	beq.n	800a872 <print_e+0xe4>
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	191d      	adds	r5, r3, r4
 800a7ec:	2730      	movs	r7, #48	; 0x30
 800a7ee:	1aa9      	subs	r1, r5, r2
 800a7f0:	2900      	cmp	r1, #0
 800a7f2:	dc39      	bgt.n	800a868 <print_e+0xda>
 800a7f4:	2c00      	cmp	r4, #0
 800a7f6:	bfa8      	it	ge
 800a7f8:	191b      	addge	r3, r3, r4
 800a7fa:	1e41      	subs	r1, r0, #1
 800a7fc:	2900      	cmp	r1, #0
 800a7fe:	bfb8      	it	lt
 800a800:	f1c0 0001 	rsblt	r0, r0, #1
 800a804:	9105      	str	r1, [sp, #20]
 800a806:	bfb8      	it	lt
 800a808:	9005      	strlt	r0, [sp, #20]
 800a80a:	461a      	mov	r2, r3
 800a80c:	9805      	ldr	r0, [sp, #20]
 800a80e:	f802 6b02 	strb.w	r6, [r2], #2
 800a812:	bfb5      	itete	lt
 800a814:	212d      	movlt	r1, #45	; 0x2d
 800a816:	212b      	movge	r1, #43	; 0x2b
 800a818:	7059      	strblt	r1, [r3, #1]
 800a81a:	7059      	strbge	r1, [r3, #1]
 800a81c:	2863      	cmp	r0, #99	; 0x63
 800a81e:	dd0b      	ble.n	800a838 <print_e+0xaa>
 800a820:	2164      	movs	r1, #100	; 0x64
 800a822:	fb90 f1f1 	sdiv	r1, r0, r1
 800a826:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800a82a:	1cda      	adds	r2, r3, #3
 800a82c:	709c      	strb	r4, [r3, #2]
 800a82e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800a832:	fb03 0101 	mla	r1, r3, r1, r0
 800a836:	9105      	str	r1, [sp, #20]
 800a838:	9905      	ldr	r1, [sp, #20]
 800a83a:	230a      	movs	r3, #10
 800a83c:	fb91 f3f3 	sdiv	r3, r1, r3
 800a840:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a844:	7010      	strb	r0, [r2, #0]
 800a846:	f06f 0009 	mvn.w	r0, #9
 800a84a:	fb00 1303 	mla	r3, r0, r3, r1
 800a84e:	3330      	adds	r3, #48	; 0x30
 800a850:	7053      	strb	r3, [r2, #1]
 800a852:	2300      	movs	r3, #0
 800a854:	7093      	strb	r3, [r2, #2]
 800a856:	e7b5      	b.n	800a7c4 <print_e+0x36>
 800a858:	222e      	movs	r2, #46	; 0x2e
 800a85a:	1cbb      	adds	r3, r7, #2
 800a85c:	707a      	strb	r2, [r7, #1]
 800a85e:	e7ba      	b.n	800a7d6 <print_e+0x48>
 800a860:	f803 2b01 	strb.w	r2, [r3], #1
 800a864:	3c01      	subs	r4, #1
 800a866:	e7b6      	b.n	800a7d6 <print_e+0x48>
 800a868:	f802 7b01 	strb.w	r7, [r2], #1
 800a86c:	e7bf      	b.n	800a7ee <print_e+0x60>
 800a86e:	2665      	movs	r6, #101	; 0x65
 800a870:	e7c3      	b.n	800a7fa <print_e+0x6c>
 800a872:	2645      	movs	r6, #69	; 0x45
 800a874:	e7c1      	b.n	800a7fa <print_e+0x6c>
	...

0800a878 <_gcvt>:
 800a878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a87c:	ec55 4b10 	vmov	r4, r5, d0
 800a880:	b088      	sub	sp, #32
 800a882:	4681      	mov	r9, r0
 800a884:	460f      	mov	r7, r1
 800a886:	4616      	mov	r6, r2
 800a888:	469a      	mov	sl, r3
 800a88a:	2200      	movs	r2, #0
 800a88c:	2300      	movs	r3, #0
 800a88e:	ee10 0a10 	vmov	r0, s0
 800a892:	4629      	mov	r1, r5
 800a894:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800a898:	f7f6 f8d8 	bl	8000a4c <__aeabi_dcmplt>
 800a89c:	b110      	cbz	r0, 800a8a4 <_gcvt+0x2c>
 800a89e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a8a2:	461d      	mov	r5, r3
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	f7f6 f8c4 	bl	8000a38 <__aeabi_dcmpeq>
 800a8b0:	b138      	cbz	r0, 800a8c2 <_gcvt+0x4a>
 800a8b2:	2330      	movs	r3, #48	; 0x30
 800a8b4:	7033      	strb	r3, [r6, #0]
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	7073      	strb	r3, [r6, #1]
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	b008      	add	sp, #32
 800a8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c2:	a350      	add	r3, pc, #320	; (adr r3, 800aa04 <_gcvt+0x18c>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	f7f6 f8c8 	bl	8000a60 <__aeabi_dcmple>
 800a8d0:	b150      	cbz	r0, 800a8e8 <_gcvt+0x70>
 800a8d2:	3f01      	subs	r7, #1
 800a8d4:	e9cd a801 	strd	sl, r8, [sp, #4]
 800a8d8:	9700      	str	r7, [sp, #0]
 800a8da:	4622      	mov	r2, r4
 800a8dc:	462b      	mov	r3, r5
 800a8de:	4631      	mov	r1, r6
 800a8e0:	4648      	mov	r0, r9
 800a8e2:	f7ff ff54 	bl	800a78e <print_e>
 800a8e6:	e7e8      	b.n	800a8ba <_gcvt+0x42>
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	f000 fb6b 	bl	800afc4 <_mprec_log10>
 800a8ee:	4622      	mov	r2, r4
 800a8f0:	462b      	mov	r3, r5
 800a8f2:	ec51 0b10 	vmov	r0, r1, d0
 800a8f6:	f7f6 f8b3 	bl	8000a60 <__aeabi_dcmple>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d1e9      	bne.n	800a8d2 <_gcvt+0x5a>
 800a8fe:	2200      	movs	r2, #0
 800a900:	4b3f      	ldr	r3, [pc, #252]	; (800aa00 <_gcvt+0x188>)
 800a902:	4620      	mov	r0, r4
 800a904:	4629      	mov	r1, r5
 800a906:	f7f6 f8a1 	bl	8000a4c <__aeabi_dcmplt>
 800a90a:	aa07      	add	r2, sp, #28
 800a90c:	ab06      	add	r3, sp, #24
 800a90e:	e9cd 3200 	strd	r3, r2, [sp]
 800a912:	ab05      	add	r3, sp, #20
 800a914:	463a      	mov	r2, r7
 800a916:	b360      	cbz	r0, 800a972 <_gcvt+0xfa>
 800a918:	2103      	movs	r1, #3
 800a91a:	ec45 4b10 	vmov	d0, r4, r5
 800a91e:	4648      	mov	r0, r9
 800a920:	f000 fc7a 	bl	800b218 <_dtoa_r>
 800a924:	9a05      	ldr	r2, [sp, #20]
 800a926:	f242 730f 	movw	r3, #9999	; 0x270f
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d023      	beq.n	800a976 <_gcvt+0xfe>
 800a92e:	4633      	mov	r3, r6
 800a930:	4437      	add	r7, r6
 800a932:	4601      	mov	r1, r0
 800a934:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a938:	9d05      	ldr	r5, [sp, #20]
 800a93a:	1afc      	subs	r4, r7, r3
 800a93c:	b32a      	cbz	r2, 800a98a <_gcvt+0x112>
 800a93e:	2d00      	cmp	r5, #0
 800a940:	dc1e      	bgt.n	800a980 <_gcvt+0x108>
 800a942:	f1b8 0f00 	cmp.w	r8, #0
 800a946:	d102      	bne.n	800a94e <_gcvt+0xd6>
 800a948:	780a      	ldrb	r2, [r1, #0]
 800a94a:	2a00      	cmp	r2, #0
 800a94c:	d045      	beq.n	800a9da <_gcvt+0x162>
 800a94e:	429e      	cmp	r6, r3
 800a950:	bf02      	ittt	eq
 800a952:	1c73      	addeq	r3, r6, #1
 800a954:	2230      	moveq	r2, #48	; 0x30
 800a956:	7032      	strbeq	r2, [r6, #0]
 800a958:	222e      	movs	r2, #46	; 0x2e
 800a95a:	701a      	strb	r2, [r3, #0]
 800a95c:	9a05      	ldr	r2, [sp, #20]
 800a95e:	3301      	adds	r3, #1
 800a960:	2000      	movs	r0, #0
 800a962:	2730      	movs	r7, #48	; 0x30
 800a964:	2a00      	cmp	r2, #0
 800a966:	4615      	mov	r5, r2
 800a968:	db24      	blt.n	800a9b4 <_gcvt+0x13c>
 800a96a:	b100      	cbz	r0, 800a96e <_gcvt+0xf6>
 800a96c:	9205      	str	r2, [sp, #20]
 800a96e:	1e4a      	subs	r2, r1, #1
 800a970:	e02b      	b.n	800a9ca <_gcvt+0x152>
 800a972:	2102      	movs	r1, #2
 800a974:	e7d1      	b.n	800a91a <_gcvt+0xa2>
 800a976:	4601      	mov	r1, r0
 800a978:	4630      	mov	r0, r6
 800a97a:	f000 fbb9 	bl	800b0f0 <strcpy>
 800a97e:	e79c      	b.n	800a8ba <_gcvt+0x42>
 800a980:	3d01      	subs	r5, #1
 800a982:	f803 2b01 	strb.w	r2, [r3], #1
 800a986:	9505      	str	r5, [sp, #20]
 800a988:	e7d3      	b.n	800a932 <_gcvt+0xba>
 800a98a:	1b2d      	subs	r5, r5, r4
 800a98c:	2730      	movs	r7, #48	; 0x30
 800a98e:	e005      	b.n	800a99c <_gcvt+0x124>
 800a990:	2c00      	cmp	r4, #0
 800a992:	dd06      	ble.n	800a9a2 <_gcvt+0x12a>
 800a994:	f803 7b01 	strb.w	r7, [r3], #1
 800a998:	3c01      	subs	r4, #1
 800a99a:	2201      	movs	r2, #1
 800a99c:	1928      	adds	r0, r5, r4
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	dcf6      	bgt.n	800a990 <_gcvt+0x118>
 800a9a2:	2a00      	cmp	r2, #0
 800a9a4:	d0cd      	beq.n	800a942 <_gcvt+0xca>
 800a9a6:	9005      	str	r0, [sp, #20]
 800a9a8:	e7cb      	b.n	800a942 <_gcvt+0xca>
 800a9aa:	f803 7b01 	strb.w	r7, [r3], #1
 800a9ae:	3c01      	subs	r4, #1
 800a9b0:	2001      	movs	r0, #1
 800a9b2:	e7d7      	b.n	800a964 <_gcvt+0xec>
 800a9b4:	2c00      	cmp	r4, #0
 800a9b6:	f102 0201 	add.w	r2, r2, #1
 800a9ba:	dcf6      	bgt.n	800a9aa <_gcvt+0x132>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d0d6      	beq.n	800a96e <_gcvt+0xf6>
 800a9c0:	9505      	str	r5, [sp, #20]
 800a9c2:	e7d4      	b.n	800a96e <_gcvt+0xf6>
 800a9c4:	f803 1b01 	strb.w	r1, [r3], #1
 800a9c8:	3c01      	subs	r4, #1
 800a9ca:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800a9ce:	b109      	cbz	r1, 800a9d4 <_gcvt+0x15c>
 800a9d0:	2c00      	cmp	r4, #0
 800a9d2:	dcf7      	bgt.n	800a9c4 <_gcvt+0x14c>
 800a9d4:	f1b8 0f00 	cmp.w	r8, #0
 800a9d8:	d10b      	bne.n	800a9f2 <_gcvt+0x17a>
 800a9da:	2200      	movs	r2, #0
 800a9dc:	701a      	strb	r2, [r3, #0]
 800a9de:	e76c      	b.n	800a8ba <_gcvt+0x42>
 800a9e0:	f802 5b01 	strb.w	r5, [r2], #1
 800a9e4:	1a81      	subs	r1, r0, r2
 800a9e6:	2900      	cmp	r1, #0
 800a9e8:	dcfa      	bgt.n	800a9e0 <_gcvt+0x168>
 800a9ea:	2c00      	cmp	r4, #0
 800a9ec:	bfa8      	it	ge
 800a9ee:	191b      	addge	r3, r3, r4
 800a9f0:	e7f3      	b.n	800a9da <_gcvt+0x162>
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	1918      	adds	r0, r3, r4
 800a9f6:	2530      	movs	r5, #48	; 0x30
 800a9f8:	e7f4      	b.n	800a9e4 <_gcvt+0x16c>
 800a9fa:	bf00      	nop
 800a9fc:	f3af 8000 	nop.w
 800aa00:	3ff00000 	.word	0x3ff00000
 800aa04:	eb1c432d 	.word	0xeb1c432d
 800aa08:	3f1a36e2 	.word	0x3f1a36e2

0800aa0c <_Balloc>:
 800aa0c:	b570      	push	{r4, r5, r6, lr}
 800aa0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa10:	4604      	mov	r4, r0
 800aa12:	460e      	mov	r6, r1
 800aa14:	b93d      	cbnz	r5, 800aa26 <_Balloc+0x1a>
 800aa16:	2010      	movs	r0, #16
 800aa18:	f001 f9b6 	bl	800bd88 <malloc>
 800aa1c:	6260      	str	r0, [r4, #36]	; 0x24
 800aa1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa22:	6005      	str	r5, [r0, #0]
 800aa24:	60c5      	str	r5, [r0, #12]
 800aa26:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aa28:	68eb      	ldr	r3, [r5, #12]
 800aa2a:	b183      	cbz	r3, 800aa4e <_Balloc+0x42>
 800aa2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aa34:	b9b8      	cbnz	r0, 800aa66 <_Balloc+0x5a>
 800aa36:	2101      	movs	r1, #1
 800aa38:	fa01 f506 	lsl.w	r5, r1, r6
 800aa3c:	1d6a      	adds	r2, r5, #5
 800aa3e:	0092      	lsls	r2, r2, #2
 800aa40:	4620      	mov	r0, r4
 800aa42:	f000 fadd 	bl	800b000 <_calloc_r>
 800aa46:	b160      	cbz	r0, 800aa62 <_Balloc+0x56>
 800aa48:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aa4c:	e00e      	b.n	800aa6c <_Balloc+0x60>
 800aa4e:	2221      	movs	r2, #33	; 0x21
 800aa50:	2104      	movs	r1, #4
 800aa52:	4620      	mov	r0, r4
 800aa54:	f000 fad4 	bl	800b000 <_calloc_r>
 800aa58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa5a:	60e8      	str	r0, [r5, #12]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1e4      	bne.n	800aa2c <_Balloc+0x20>
 800aa62:	2000      	movs	r0, #0
 800aa64:	bd70      	pop	{r4, r5, r6, pc}
 800aa66:	6802      	ldr	r2, [r0, #0]
 800aa68:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa72:	e7f7      	b.n	800aa64 <_Balloc+0x58>

0800aa74 <_Bfree>:
 800aa74:	b570      	push	{r4, r5, r6, lr}
 800aa76:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aa78:	4606      	mov	r6, r0
 800aa7a:	460d      	mov	r5, r1
 800aa7c:	b93c      	cbnz	r4, 800aa8e <_Bfree+0x1a>
 800aa7e:	2010      	movs	r0, #16
 800aa80:	f001 f982 	bl	800bd88 <malloc>
 800aa84:	6270      	str	r0, [r6, #36]	; 0x24
 800aa86:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa8a:	6004      	str	r4, [r0, #0]
 800aa8c:	60c4      	str	r4, [r0, #12]
 800aa8e:	b13d      	cbz	r5, 800aaa0 <_Bfree+0x2c>
 800aa90:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aa92:	686a      	ldr	r2, [r5, #4]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa9a:	6029      	str	r1, [r5, #0]
 800aa9c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800aaa0:	bd70      	pop	{r4, r5, r6, pc}

0800aaa2 <__multadd>:
 800aaa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa6:	690d      	ldr	r5, [r1, #16]
 800aaa8:	461f      	mov	r7, r3
 800aaaa:	4606      	mov	r6, r0
 800aaac:	460c      	mov	r4, r1
 800aaae:	f101 0c14 	add.w	ip, r1, #20
 800aab2:	2300      	movs	r3, #0
 800aab4:	f8dc 0000 	ldr.w	r0, [ip]
 800aab8:	b281      	uxth	r1, r0
 800aaba:	fb02 7101 	mla	r1, r2, r1, r7
 800aabe:	0c0f      	lsrs	r7, r1, #16
 800aac0:	0c00      	lsrs	r0, r0, #16
 800aac2:	fb02 7000 	mla	r0, r2, r0, r7
 800aac6:	b289      	uxth	r1, r1
 800aac8:	3301      	adds	r3, #1
 800aaca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800aace:	429d      	cmp	r5, r3
 800aad0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800aad4:	f84c 1b04 	str.w	r1, [ip], #4
 800aad8:	dcec      	bgt.n	800aab4 <__multadd+0x12>
 800aada:	b1d7      	cbz	r7, 800ab12 <__multadd+0x70>
 800aadc:	68a3      	ldr	r3, [r4, #8]
 800aade:	42ab      	cmp	r3, r5
 800aae0:	dc12      	bgt.n	800ab08 <__multadd+0x66>
 800aae2:	6861      	ldr	r1, [r4, #4]
 800aae4:	4630      	mov	r0, r6
 800aae6:	3101      	adds	r1, #1
 800aae8:	f7ff ff90 	bl	800aa0c <_Balloc>
 800aaec:	6922      	ldr	r2, [r4, #16]
 800aaee:	3202      	adds	r2, #2
 800aaf0:	f104 010c 	add.w	r1, r4, #12
 800aaf4:	4680      	mov	r8, r0
 800aaf6:	0092      	lsls	r2, r2, #2
 800aaf8:	300c      	adds	r0, #12
 800aafa:	f7ff fe35 	bl	800a768 <memcpy>
 800aafe:	4621      	mov	r1, r4
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff ffb7 	bl	800aa74 <_Bfree>
 800ab06:	4644      	mov	r4, r8
 800ab08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab0c:	3501      	adds	r5, #1
 800ab0e:	615f      	str	r7, [r3, #20]
 800ab10:	6125      	str	r5, [r4, #16]
 800ab12:	4620      	mov	r0, r4
 800ab14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ab18 <__hi0bits>:
 800ab18:	0c02      	lsrs	r2, r0, #16
 800ab1a:	0412      	lsls	r2, r2, #16
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	b9b2      	cbnz	r2, 800ab4e <__hi0bits+0x36>
 800ab20:	0403      	lsls	r3, r0, #16
 800ab22:	2010      	movs	r0, #16
 800ab24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ab28:	bf04      	itt	eq
 800ab2a:	021b      	lsleq	r3, r3, #8
 800ab2c:	3008      	addeq	r0, #8
 800ab2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ab32:	bf04      	itt	eq
 800ab34:	011b      	lsleq	r3, r3, #4
 800ab36:	3004      	addeq	r0, #4
 800ab38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ab3c:	bf04      	itt	eq
 800ab3e:	009b      	lsleq	r3, r3, #2
 800ab40:	3002      	addeq	r0, #2
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	db06      	blt.n	800ab54 <__hi0bits+0x3c>
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	d503      	bpl.n	800ab52 <__hi0bits+0x3a>
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	4770      	bx	lr
 800ab4e:	2000      	movs	r0, #0
 800ab50:	e7e8      	b.n	800ab24 <__hi0bits+0xc>
 800ab52:	2020      	movs	r0, #32
 800ab54:	4770      	bx	lr

0800ab56 <__lo0bits>:
 800ab56:	6803      	ldr	r3, [r0, #0]
 800ab58:	f013 0207 	ands.w	r2, r3, #7
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	d00b      	beq.n	800ab78 <__lo0bits+0x22>
 800ab60:	07da      	lsls	r2, r3, #31
 800ab62:	d423      	bmi.n	800abac <__lo0bits+0x56>
 800ab64:	0798      	lsls	r0, r3, #30
 800ab66:	bf49      	itett	mi
 800ab68:	085b      	lsrmi	r3, r3, #1
 800ab6a:	089b      	lsrpl	r3, r3, #2
 800ab6c:	2001      	movmi	r0, #1
 800ab6e:	600b      	strmi	r3, [r1, #0]
 800ab70:	bf5c      	itt	pl
 800ab72:	600b      	strpl	r3, [r1, #0]
 800ab74:	2002      	movpl	r0, #2
 800ab76:	4770      	bx	lr
 800ab78:	b298      	uxth	r0, r3
 800ab7a:	b9a8      	cbnz	r0, 800aba8 <__lo0bits+0x52>
 800ab7c:	0c1b      	lsrs	r3, r3, #16
 800ab7e:	2010      	movs	r0, #16
 800ab80:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ab84:	bf04      	itt	eq
 800ab86:	0a1b      	lsreq	r3, r3, #8
 800ab88:	3008      	addeq	r0, #8
 800ab8a:	071a      	lsls	r2, r3, #28
 800ab8c:	bf04      	itt	eq
 800ab8e:	091b      	lsreq	r3, r3, #4
 800ab90:	3004      	addeq	r0, #4
 800ab92:	079a      	lsls	r2, r3, #30
 800ab94:	bf04      	itt	eq
 800ab96:	089b      	lsreq	r3, r3, #2
 800ab98:	3002      	addeq	r0, #2
 800ab9a:	07da      	lsls	r2, r3, #31
 800ab9c:	d402      	bmi.n	800aba4 <__lo0bits+0x4e>
 800ab9e:	085b      	lsrs	r3, r3, #1
 800aba0:	d006      	beq.n	800abb0 <__lo0bits+0x5a>
 800aba2:	3001      	adds	r0, #1
 800aba4:	600b      	str	r3, [r1, #0]
 800aba6:	4770      	bx	lr
 800aba8:	4610      	mov	r0, r2
 800abaa:	e7e9      	b.n	800ab80 <__lo0bits+0x2a>
 800abac:	2000      	movs	r0, #0
 800abae:	4770      	bx	lr
 800abb0:	2020      	movs	r0, #32
 800abb2:	4770      	bx	lr

0800abb4 <__i2b>:
 800abb4:	b510      	push	{r4, lr}
 800abb6:	460c      	mov	r4, r1
 800abb8:	2101      	movs	r1, #1
 800abba:	f7ff ff27 	bl	800aa0c <_Balloc>
 800abbe:	2201      	movs	r2, #1
 800abc0:	6144      	str	r4, [r0, #20]
 800abc2:	6102      	str	r2, [r0, #16]
 800abc4:	bd10      	pop	{r4, pc}

0800abc6 <__multiply>:
 800abc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abca:	4614      	mov	r4, r2
 800abcc:	690a      	ldr	r2, [r1, #16]
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	bfb8      	it	lt
 800abd4:	460b      	movlt	r3, r1
 800abd6:	4688      	mov	r8, r1
 800abd8:	bfbc      	itt	lt
 800abda:	46a0      	movlt	r8, r4
 800abdc:	461c      	movlt	r4, r3
 800abde:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800abe2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800abe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800abee:	eb07 0609 	add.w	r6, r7, r9
 800abf2:	42b3      	cmp	r3, r6
 800abf4:	bfb8      	it	lt
 800abf6:	3101      	addlt	r1, #1
 800abf8:	f7ff ff08 	bl	800aa0c <_Balloc>
 800abfc:	f100 0514 	add.w	r5, r0, #20
 800ac00:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ac04:	462b      	mov	r3, r5
 800ac06:	2200      	movs	r2, #0
 800ac08:	4573      	cmp	r3, lr
 800ac0a:	d316      	bcc.n	800ac3a <__multiply+0x74>
 800ac0c:	f104 0214 	add.w	r2, r4, #20
 800ac10:	f108 0114 	add.w	r1, r8, #20
 800ac14:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ac18:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	9b00      	ldr	r3, [sp, #0]
 800ac20:	9201      	str	r2, [sp, #4]
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d80c      	bhi.n	800ac40 <__multiply+0x7a>
 800ac26:	2e00      	cmp	r6, #0
 800ac28:	dd03      	ble.n	800ac32 <__multiply+0x6c>
 800ac2a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d05d      	beq.n	800acee <__multiply+0x128>
 800ac32:	6106      	str	r6, [r0, #16]
 800ac34:	b003      	add	sp, #12
 800ac36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3a:	f843 2b04 	str.w	r2, [r3], #4
 800ac3e:	e7e3      	b.n	800ac08 <__multiply+0x42>
 800ac40:	f8b2 b000 	ldrh.w	fp, [r2]
 800ac44:	f1bb 0f00 	cmp.w	fp, #0
 800ac48:	d023      	beq.n	800ac92 <__multiply+0xcc>
 800ac4a:	4689      	mov	r9, r1
 800ac4c:	46ac      	mov	ip, r5
 800ac4e:	f04f 0800 	mov.w	r8, #0
 800ac52:	f859 4b04 	ldr.w	r4, [r9], #4
 800ac56:	f8dc a000 	ldr.w	sl, [ip]
 800ac5a:	b2a3      	uxth	r3, r4
 800ac5c:	fa1f fa8a 	uxth.w	sl, sl
 800ac60:	fb0b a303 	mla	r3, fp, r3, sl
 800ac64:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ac68:	f8dc 4000 	ldr.w	r4, [ip]
 800ac6c:	4443      	add	r3, r8
 800ac6e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ac72:	fb0b 840a 	mla	r4, fp, sl, r8
 800ac76:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ac7a:	46e2      	mov	sl, ip
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ac82:	454f      	cmp	r7, r9
 800ac84:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ac88:	f84a 3b04 	str.w	r3, [sl], #4
 800ac8c:	d82b      	bhi.n	800ace6 <__multiply+0x120>
 800ac8e:	f8cc 8004 	str.w	r8, [ip, #4]
 800ac92:	9b01      	ldr	r3, [sp, #4]
 800ac94:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ac98:	3204      	adds	r2, #4
 800ac9a:	f1ba 0f00 	cmp.w	sl, #0
 800ac9e:	d020      	beq.n	800ace2 <__multiply+0x11c>
 800aca0:	682b      	ldr	r3, [r5, #0]
 800aca2:	4689      	mov	r9, r1
 800aca4:	46a8      	mov	r8, r5
 800aca6:	f04f 0b00 	mov.w	fp, #0
 800acaa:	f8b9 c000 	ldrh.w	ip, [r9]
 800acae:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800acb2:	fb0a 440c 	mla	r4, sl, ip, r4
 800acb6:	445c      	add	r4, fp
 800acb8:	46c4      	mov	ip, r8
 800acba:	b29b      	uxth	r3, r3
 800acbc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800acc0:	f84c 3b04 	str.w	r3, [ip], #4
 800acc4:	f859 3b04 	ldr.w	r3, [r9], #4
 800acc8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800accc:	0c1b      	lsrs	r3, r3, #16
 800acce:	fb0a b303 	mla	r3, sl, r3, fp
 800acd2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800acd6:	454f      	cmp	r7, r9
 800acd8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800acdc:	d805      	bhi.n	800acea <__multiply+0x124>
 800acde:	f8c8 3004 	str.w	r3, [r8, #4]
 800ace2:	3504      	adds	r5, #4
 800ace4:	e79b      	b.n	800ac1e <__multiply+0x58>
 800ace6:	46d4      	mov	ip, sl
 800ace8:	e7b3      	b.n	800ac52 <__multiply+0x8c>
 800acea:	46e0      	mov	r8, ip
 800acec:	e7dd      	b.n	800acaa <__multiply+0xe4>
 800acee:	3e01      	subs	r6, #1
 800acf0:	e799      	b.n	800ac26 <__multiply+0x60>
	...

0800acf4 <__pow5mult>:
 800acf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acf8:	4615      	mov	r5, r2
 800acfa:	f012 0203 	ands.w	r2, r2, #3
 800acfe:	4606      	mov	r6, r0
 800ad00:	460f      	mov	r7, r1
 800ad02:	d007      	beq.n	800ad14 <__pow5mult+0x20>
 800ad04:	3a01      	subs	r2, #1
 800ad06:	4c21      	ldr	r4, [pc, #132]	; (800ad8c <__pow5mult+0x98>)
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad0e:	f7ff fec8 	bl	800aaa2 <__multadd>
 800ad12:	4607      	mov	r7, r0
 800ad14:	10ad      	asrs	r5, r5, #2
 800ad16:	d035      	beq.n	800ad84 <__pow5mult+0x90>
 800ad18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad1a:	b93c      	cbnz	r4, 800ad2c <__pow5mult+0x38>
 800ad1c:	2010      	movs	r0, #16
 800ad1e:	f001 f833 	bl	800bd88 <malloc>
 800ad22:	6270      	str	r0, [r6, #36]	; 0x24
 800ad24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad28:	6004      	str	r4, [r0, #0]
 800ad2a:	60c4      	str	r4, [r0, #12]
 800ad2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad34:	b94c      	cbnz	r4, 800ad4a <__pow5mult+0x56>
 800ad36:	f240 2171 	movw	r1, #625	; 0x271
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f7ff ff3a 	bl	800abb4 <__i2b>
 800ad40:	2300      	movs	r3, #0
 800ad42:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad46:	4604      	mov	r4, r0
 800ad48:	6003      	str	r3, [r0, #0]
 800ad4a:	f04f 0800 	mov.w	r8, #0
 800ad4e:	07eb      	lsls	r3, r5, #31
 800ad50:	d50a      	bpl.n	800ad68 <__pow5mult+0x74>
 800ad52:	4639      	mov	r1, r7
 800ad54:	4622      	mov	r2, r4
 800ad56:	4630      	mov	r0, r6
 800ad58:	f7ff ff35 	bl	800abc6 <__multiply>
 800ad5c:	4639      	mov	r1, r7
 800ad5e:	4681      	mov	r9, r0
 800ad60:	4630      	mov	r0, r6
 800ad62:	f7ff fe87 	bl	800aa74 <_Bfree>
 800ad66:	464f      	mov	r7, r9
 800ad68:	106d      	asrs	r5, r5, #1
 800ad6a:	d00b      	beq.n	800ad84 <__pow5mult+0x90>
 800ad6c:	6820      	ldr	r0, [r4, #0]
 800ad6e:	b938      	cbnz	r0, 800ad80 <__pow5mult+0x8c>
 800ad70:	4622      	mov	r2, r4
 800ad72:	4621      	mov	r1, r4
 800ad74:	4630      	mov	r0, r6
 800ad76:	f7ff ff26 	bl	800abc6 <__multiply>
 800ad7a:	6020      	str	r0, [r4, #0]
 800ad7c:	f8c0 8000 	str.w	r8, [r0]
 800ad80:	4604      	mov	r4, r0
 800ad82:	e7e4      	b.n	800ad4e <__pow5mult+0x5a>
 800ad84:	4638      	mov	r0, r7
 800ad86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad8a:	bf00      	nop
 800ad8c:	0800eef0 	.word	0x0800eef0

0800ad90 <__lshift>:
 800ad90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad94:	460c      	mov	r4, r1
 800ad96:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	6849      	ldr	r1, [r1, #4]
 800ad9e:	eb0a 0903 	add.w	r9, sl, r3
 800ada2:	68a3      	ldr	r3, [r4, #8]
 800ada4:	4607      	mov	r7, r0
 800ada6:	4616      	mov	r6, r2
 800ada8:	f109 0501 	add.w	r5, r9, #1
 800adac:	42ab      	cmp	r3, r5
 800adae:	db32      	blt.n	800ae16 <__lshift+0x86>
 800adb0:	4638      	mov	r0, r7
 800adb2:	f7ff fe2b 	bl	800aa0c <_Balloc>
 800adb6:	2300      	movs	r3, #0
 800adb8:	4680      	mov	r8, r0
 800adba:	f100 0114 	add.w	r1, r0, #20
 800adbe:	461a      	mov	r2, r3
 800adc0:	4553      	cmp	r3, sl
 800adc2:	db2b      	blt.n	800ae1c <__lshift+0x8c>
 800adc4:	6920      	ldr	r0, [r4, #16]
 800adc6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800adca:	f104 0314 	add.w	r3, r4, #20
 800adce:	f016 021f 	ands.w	r2, r6, #31
 800add2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800add6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800adda:	d025      	beq.n	800ae28 <__lshift+0x98>
 800addc:	f1c2 0e20 	rsb	lr, r2, #32
 800ade0:	2000      	movs	r0, #0
 800ade2:	681e      	ldr	r6, [r3, #0]
 800ade4:	468a      	mov	sl, r1
 800ade6:	4096      	lsls	r6, r2
 800ade8:	4330      	orrs	r0, r6
 800adea:	f84a 0b04 	str.w	r0, [sl], #4
 800adee:	f853 0b04 	ldr.w	r0, [r3], #4
 800adf2:	459c      	cmp	ip, r3
 800adf4:	fa20 f00e 	lsr.w	r0, r0, lr
 800adf8:	d814      	bhi.n	800ae24 <__lshift+0x94>
 800adfa:	6048      	str	r0, [r1, #4]
 800adfc:	b108      	cbz	r0, 800ae02 <__lshift+0x72>
 800adfe:	f109 0502 	add.w	r5, r9, #2
 800ae02:	3d01      	subs	r5, #1
 800ae04:	4638      	mov	r0, r7
 800ae06:	f8c8 5010 	str.w	r5, [r8, #16]
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	f7ff fe32 	bl	800aa74 <_Bfree>
 800ae10:	4640      	mov	r0, r8
 800ae12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae16:	3101      	adds	r1, #1
 800ae18:	005b      	lsls	r3, r3, #1
 800ae1a:	e7c7      	b.n	800adac <__lshift+0x1c>
 800ae1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ae20:	3301      	adds	r3, #1
 800ae22:	e7cd      	b.n	800adc0 <__lshift+0x30>
 800ae24:	4651      	mov	r1, sl
 800ae26:	e7dc      	b.n	800ade2 <__lshift+0x52>
 800ae28:	3904      	subs	r1, #4
 800ae2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae2e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae32:	459c      	cmp	ip, r3
 800ae34:	d8f9      	bhi.n	800ae2a <__lshift+0x9a>
 800ae36:	e7e4      	b.n	800ae02 <__lshift+0x72>

0800ae38 <__mcmp>:
 800ae38:	6903      	ldr	r3, [r0, #16]
 800ae3a:	690a      	ldr	r2, [r1, #16]
 800ae3c:	1a9b      	subs	r3, r3, r2
 800ae3e:	b530      	push	{r4, r5, lr}
 800ae40:	d10c      	bne.n	800ae5c <__mcmp+0x24>
 800ae42:	0092      	lsls	r2, r2, #2
 800ae44:	3014      	adds	r0, #20
 800ae46:	3114      	adds	r1, #20
 800ae48:	1884      	adds	r4, r0, r2
 800ae4a:	4411      	add	r1, r2
 800ae4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae54:	4295      	cmp	r5, r2
 800ae56:	d003      	beq.n	800ae60 <__mcmp+0x28>
 800ae58:	d305      	bcc.n	800ae66 <__mcmp+0x2e>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	bd30      	pop	{r4, r5, pc}
 800ae60:	42a0      	cmp	r0, r4
 800ae62:	d3f3      	bcc.n	800ae4c <__mcmp+0x14>
 800ae64:	e7fa      	b.n	800ae5c <__mcmp+0x24>
 800ae66:	f04f 33ff 	mov.w	r3, #4294967295
 800ae6a:	e7f7      	b.n	800ae5c <__mcmp+0x24>

0800ae6c <__mdiff>:
 800ae6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae70:	460d      	mov	r5, r1
 800ae72:	4607      	mov	r7, r0
 800ae74:	4611      	mov	r1, r2
 800ae76:	4628      	mov	r0, r5
 800ae78:	4614      	mov	r4, r2
 800ae7a:	f7ff ffdd 	bl	800ae38 <__mcmp>
 800ae7e:	1e06      	subs	r6, r0, #0
 800ae80:	d108      	bne.n	800ae94 <__mdiff+0x28>
 800ae82:	4631      	mov	r1, r6
 800ae84:	4638      	mov	r0, r7
 800ae86:	f7ff fdc1 	bl	800aa0c <_Balloc>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ae90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae94:	bfa4      	itt	ge
 800ae96:	4623      	movge	r3, r4
 800ae98:	462c      	movge	r4, r5
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	6861      	ldr	r1, [r4, #4]
 800ae9e:	bfa6      	itte	ge
 800aea0:	461d      	movge	r5, r3
 800aea2:	2600      	movge	r6, #0
 800aea4:	2601      	movlt	r6, #1
 800aea6:	f7ff fdb1 	bl	800aa0c <_Balloc>
 800aeaa:	692b      	ldr	r3, [r5, #16]
 800aeac:	60c6      	str	r6, [r0, #12]
 800aeae:	6926      	ldr	r6, [r4, #16]
 800aeb0:	f105 0914 	add.w	r9, r5, #20
 800aeb4:	f104 0214 	add.w	r2, r4, #20
 800aeb8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800aebc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800aec0:	f100 0514 	add.w	r5, r0, #20
 800aec4:	f04f 0e00 	mov.w	lr, #0
 800aec8:	f852 ab04 	ldr.w	sl, [r2], #4
 800aecc:	f859 4b04 	ldr.w	r4, [r9], #4
 800aed0:	fa1e f18a 	uxtah	r1, lr, sl
 800aed4:	b2a3      	uxth	r3, r4
 800aed6:	1ac9      	subs	r1, r1, r3
 800aed8:	0c23      	lsrs	r3, r4, #16
 800aeda:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800aede:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800aee2:	b289      	uxth	r1, r1
 800aee4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800aee8:	45c8      	cmp	r8, r9
 800aeea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800aeee:	4694      	mov	ip, r2
 800aef0:	f845 3b04 	str.w	r3, [r5], #4
 800aef4:	d8e8      	bhi.n	800aec8 <__mdiff+0x5c>
 800aef6:	45bc      	cmp	ip, r7
 800aef8:	d304      	bcc.n	800af04 <__mdiff+0x98>
 800aefa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800aefe:	b183      	cbz	r3, 800af22 <__mdiff+0xb6>
 800af00:	6106      	str	r6, [r0, #16]
 800af02:	e7c5      	b.n	800ae90 <__mdiff+0x24>
 800af04:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af08:	fa1e f381 	uxtah	r3, lr, r1
 800af0c:	141a      	asrs	r2, r3, #16
 800af0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af12:	b29b      	uxth	r3, r3
 800af14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af18:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800af1c:	f845 3b04 	str.w	r3, [r5], #4
 800af20:	e7e9      	b.n	800aef6 <__mdiff+0x8a>
 800af22:	3e01      	subs	r6, #1
 800af24:	e7e9      	b.n	800aefa <__mdiff+0x8e>

0800af26 <__d2b>:
 800af26:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af2a:	460e      	mov	r6, r1
 800af2c:	2101      	movs	r1, #1
 800af2e:	ec59 8b10 	vmov	r8, r9, d0
 800af32:	4615      	mov	r5, r2
 800af34:	f7ff fd6a 	bl	800aa0c <_Balloc>
 800af38:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800af3c:	4607      	mov	r7, r0
 800af3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af42:	bb34      	cbnz	r4, 800af92 <__d2b+0x6c>
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	f1b8 0300 	subs.w	r3, r8, #0
 800af4a:	d027      	beq.n	800af9c <__d2b+0x76>
 800af4c:	a802      	add	r0, sp, #8
 800af4e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800af52:	f7ff fe00 	bl	800ab56 <__lo0bits>
 800af56:	9900      	ldr	r1, [sp, #0]
 800af58:	b1f0      	cbz	r0, 800af98 <__d2b+0x72>
 800af5a:	9a01      	ldr	r2, [sp, #4]
 800af5c:	f1c0 0320 	rsb	r3, r0, #32
 800af60:	fa02 f303 	lsl.w	r3, r2, r3
 800af64:	430b      	orrs	r3, r1
 800af66:	40c2      	lsrs	r2, r0
 800af68:	617b      	str	r3, [r7, #20]
 800af6a:	9201      	str	r2, [sp, #4]
 800af6c:	9b01      	ldr	r3, [sp, #4]
 800af6e:	61bb      	str	r3, [r7, #24]
 800af70:	2b00      	cmp	r3, #0
 800af72:	bf14      	ite	ne
 800af74:	2102      	movne	r1, #2
 800af76:	2101      	moveq	r1, #1
 800af78:	6139      	str	r1, [r7, #16]
 800af7a:	b1c4      	cbz	r4, 800afae <__d2b+0x88>
 800af7c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800af80:	4404      	add	r4, r0
 800af82:	6034      	str	r4, [r6, #0]
 800af84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af88:	6028      	str	r0, [r5, #0]
 800af8a:	4638      	mov	r0, r7
 800af8c:	b003      	add	sp, #12
 800af8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af96:	e7d5      	b.n	800af44 <__d2b+0x1e>
 800af98:	6179      	str	r1, [r7, #20]
 800af9a:	e7e7      	b.n	800af6c <__d2b+0x46>
 800af9c:	a801      	add	r0, sp, #4
 800af9e:	f7ff fdda 	bl	800ab56 <__lo0bits>
 800afa2:	9b01      	ldr	r3, [sp, #4]
 800afa4:	617b      	str	r3, [r7, #20]
 800afa6:	2101      	movs	r1, #1
 800afa8:	6139      	str	r1, [r7, #16]
 800afaa:	3020      	adds	r0, #32
 800afac:	e7e5      	b.n	800af7a <__d2b+0x54>
 800afae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800afb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800afb6:	6030      	str	r0, [r6, #0]
 800afb8:	6918      	ldr	r0, [r3, #16]
 800afba:	f7ff fdad 	bl	800ab18 <__hi0bits>
 800afbe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800afc2:	e7e1      	b.n	800af88 <__d2b+0x62>

0800afc4 <_mprec_log10>:
 800afc4:	2817      	cmp	r0, #23
 800afc6:	b5d0      	push	{r4, r6, r7, lr}
 800afc8:	4604      	mov	r4, r0
 800afca:	dc07      	bgt.n	800afdc <_mprec_log10+0x18>
 800afcc:	4b09      	ldr	r3, [pc, #36]	; (800aff4 <_mprec_log10+0x30>)
 800afce:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800afd2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800afd6:	ec41 0b10 	vmov	d0, r0, r1
 800afda:	bdd0      	pop	{r4, r6, r7, pc}
 800afdc:	4906      	ldr	r1, [pc, #24]	; (800aff8 <_mprec_log10+0x34>)
 800afde:	4f07      	ldr	r7, [pc, #28]	; (800affc <_mprec_log10+0x38>)
 800afe0:	2000      	movs	r0, #0
 800afe2:	2600      	movs	r6, #0
 800afe4:	4632      	mov	r2, r6
 800afe6:	463b      	mov	r3, r7
 800afe8:	f7f5 fabe 	bl	8000568 <__aeabi_dmul>
 800afec:	3c01      	subs	r4, #1
 800afee:	d1f9      	bne.n	800afe4 <_mprec_log10+0x20>
 800aff0:	e7f1      	b.n	800afd6 <_mprec_log10+0x12>
 800aff2:	bf00      	nop
 800aff4:	0800ee28 	.word	0x0800ee28
 800aff8:	3ff00000 	.word	0x3ff00000
 800affc:	40240000 	.word	0x40240000

0800b000 <_calloc_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	fb02 f401 	mul.w	r4, r2, r1
 800b006:	4621      	mov	r1, r4
 800b008:	f000 f808 	bl	800b01c <_malloc_r>
 800b00c:	4605      	mov	r5, r0
 800b00e:	b118      	cbz	r0, 800b018 <_calloc_r+0x18>
 800b010:	4622      	mov	r2, r4
 800b012:	2100      	movs	r1, #0
 800b014:	f7ff fbb3 	bl	800a77e <memset>
 800b018:	4628      	mov	r0, r5
 800b01a:	bd38      	pop	{r3, r4, r5, pc}

0800b01c <_malloc_r>:
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	1ccd      	adds	r5, r1, #3
 800b020:	f025 0503 	bic.w	r5, r5, #3
 800b024:	3508      	adds	r5, #8
 800b026:	2d0c      	cmp	r5, #12
 800b028:	bf38      	it	cc
 800b02a:	250c      	movcc	r5, #12
 800b02c:	2d00      	cmp	r5, #0
 800b02e:	4606      	mov	r6, r0
 800b030:	db01      	blt.n	800b036 <_malloc_r+0x1a>
 800b032:	42a9      	cmp	r1, r5
 800b034:	d903      	bls.n	800b03e <_malloc_r+0x22>
 800b036:	230c      	movs	r3, #12
 800b038:	6033      	str	r3, [r6, #0]
 800b03a:	2000      	movs	r0, #0
 800b03c:	bd70      	pop	{r4, r5, r6, pc}
 800b03e:	f000 feab 	bl	800bd98 <__malloc_lock>
 800b042:	4a21      	ldr	r2, [pc, #132]	; (800b0c8 <_malloc_r+0xac>)
 800b044:	6814      	ldr	r4, [r2, #0]
 800b046:	4621      	mov	r1, r4
 800b048:	b991      	cbnz	r1, 800b070 <_malloc_r+0x54>
 800b04a:	4c20      	ldr	r4, [pc, #128]	; (800b0cc <_malloc_r+0xb0>)
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	b91b      	cbnz	r3, 800b058 <_malloc_r+0x3c>
 800b050:	4630      	mov	r0, r6
 800b052:	f000 f83d 	bl	800b0d0 <_sbrk_r>
 800b056:	6020      	str	r0, [r4, #0]
 800b058:	4629      	mov	r1, r5
 800b05a:	4630      	mov	r0, r6
 800b05c:	f000 f838 	bl	800b0d0 <_sbrk_r>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d124      	bne.n	800b0ae <_malloc_r+0x92>
 800b064:	230c      	movs	r3, #12
 800b066:	6033      	str	r3, [r6, #0]
 800b068:	4630      	mov	r0, r6
 800b06a:	f000 fe96 	bl	800bd9a <__malloc_unlock>
 800b06e:	e7e4      	b.n	800b03a <_malloc_r+0x1e>
 800b070:	680b      	ldr	r3, [r1, #0]
 800b072:	1b5b      	subs	r3, r3, r5
 800b074:	d418      	bmi.n	800b0a8 <_malloc_r+0x8c>
 800b076:	2b0b      	cmp	r3, #11
 800b078:	d90f      	bls.n	800b09a <_malloc_r+0x7e>
 800b07a:	600b      	str	r3, [r1, #0]
 800b07c:	50cd      	str	r5, [r1, r3]
 800b07e:	18cc      	adds	r4, r1, r3
 800b080:	4630      	mov	r0, r6
 800b082:	f000 fe8a 	bl	800bd9a <__malloc_unlock>
 800b086:	f104 000b 	add.w	r0, r4, #11
 800b08a:	1d23      	adds	r3, r4, #4
 800b08c:	f020 0007 	bic.w	r0, r0, #7
 800b090:	1ac3      	subs	r3, r0, r3
 800b092:	d0d3      	beq.n	800b03c <_malloc_r+0x20>
 800b094:	425a      	negs	r2, r3
 800b096:	50e2      	str	r2, [r4, r3]
 800b098:	e7d0      	b.n	800b03c <_malloc_r+0x20>
 800b09a:	428c      	cmp	r4, r1
 800b09c:	684b      	ldr	r3, [r1, #4]
 800b09e:	bf16      	itet	ne
 800b0a0:	6063      	strne	r3, [r4, #4]
 800b0a2:	6013      	streq	r3, [r2, #0]
 800b0a4:	460c      	movne	r4, r1
 800b0a6:	e7eb      	b.n	800b080 <_malloc_r+0x64>
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	6849      	ldr	r1, [r1, #4]
 800b0ac:	e7cc      	b.n	800b048 <_malloc_r+0x2c>
 800b0ae:	1cc4      	adds	r4, r0, #3
 800b0b0:	f024 0403 	bic.w	r4, r4, #3
 800b0b4:	42a0      	cmp	r0, r4
 800b0b6:	d005      	beq.n	800b0c4 <_malloc_r+0xa8>
 800b0b8:	1a21      	subs	r1, r4, r0
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f000 f808 	bl	800b0d0 <_sbrk_r>
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	d0cf      	beq.n	800b064 <_malloc_r+0x48>
 800b0c4:	6025      	str	r5, [r4, #0]
 800b0c6:	e7db      	b.n	800b080 <_malloc_r+0x64>
 800b0c8:	20000294 	.word	0x20000294
 800b0cc:	20000298 	.word	0x20000298

0800b0d0 <_sbrk_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4c06      	ldr	r4, [pc, #24]	; (800b0ec <_sbrk_r+0x1c>)
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	4608      	mov	r0, r1
 800b0da:	6023      	str	r3, [r4, #0]
 800b0dc:	f7f7 feb8 	bl	8002e50 <_sbrk>
 800b0e0:	1c43      	adds	r3, r0, #1
 800b0e2:	d102      	bne.n	800b0ea <_sbrk_r+0x1a>
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	b103      	cbz	r3, 800b0ea <_sbrk_r+0x1a>
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	bd38      	pop	{r3, r4, r5, pc}
 800b0ec:	200005dc 	.word	0x200005dc

0800b0f0 <strcpy>:
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0f6:	f803 2b01 	strb.w	r2, [r3], #1
 800b0fa:	2a00      	cmp	r2, #0
 800b0fc:	d1f9      	bne.n	800b0f2 <strcpy+0x2>
 800b0fe:	4770      	bx	lr

0800b100 <quorem>:
 800b100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b104:	6903      	ldr	r3, [r0, #16]
 800b106:	690c      	ldr	r4, [r1, #16]
 800b108:	42a3      	cmp	r3, r4
 800b10a:	4680      	mov	r8, r0
 800b10c:	f2c0 8082 	blt.w	800b214 <quorem+0x114>
 800b110:	3c01      	subs	r4, #1
 800b112:	f101 0714 	add.w	r7, r1, #20
 800b116:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b11a:	f100 0614 	add.w	r6, r0, #20
 800b11e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b122:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b126:	eb06 030c 	add.w	r3, r6, ip
 800b12a:	3501      	adds	r5, #1
 800b12c:	eb07 090c 	add.w	r9, r7, ip
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	fbb0 f5f5 	udiv	r5, r0, r5
 800b136:	b395      	cbz	r5, 800b19e <quorem+0x9e>
 800b138:	f04f 0a00 	mov.w	sl, #0
 800b13c:	4638      	mov	r0, r7
 800b13e:	46b6      	mov	lr, r6
 800b140:	46d3      	mov	fp, sl
 800b142:	f850 2b04 	ldr.w	r2, [r0], #4
 800b146:	b293      	uxth	r3, r2
 800b148:	fb05 a303 	mla	r3, r5, r3, sl
 800b14c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b150:	b29b      	uxth	r3, r3
 800b152:	ebab 0303 	sub.w	r3, fp, r3
 800b156:	0c12      	lsrs	r2, r2, #16
 800b158:	f8de b000 	ldr.w	fp, [lr]
 800b15c:	fb05 a202 	mla	r2, r5, r2, sl
 800b160:	fa13 f38b 	uxtah	r3, r3, fp
 800b164:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b168:	fa1f fb82 	uxth.w	fp, r2
 800b16c:	f8de 2000 	ldr.w	r2, [lr]
 800b170:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b174:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b178:	b29b      	uxth	r3, r3
 800b17a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b17e:	4581      	cmp	r9, r0
 800b180:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b184:	f84e 3b04 	str.w	r3, [lr], #4
 800b188:	d2db      	bcs.n	800b142 <quorem+0x42>
 800b18a:	f856 300c 	ldr.w	r3, [r6, ip]
 800b18e:	b933      	cbnz	r3, 800b19e <quorem+0x9e>
 800b190:	9b01      	ldr	r3, [sp, #4]
 800b192:	3b04      	subs	r3, #4
 800b194:	429e      	cmp	r6, r3
 800b196:	461a      	mov	r2, r3
 800b198:	d330      	bcc.n	800b1fc <quorem+0xfc>
 800b19a:	f8c8 4010 	str.w	r4, [r8, #16]
 800b19e:	4640      	mov	r0, r8
 800b1a0:	f7ff fe4a 	bl	800ae38 <__mcmp>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	db25      	blt.n	800b1f4 <quorem+0xf4>
 800b1a8:	3501      	adds	r5, #1
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f04f 0c00 	mov.w	ip, #0
 800b1b0:	f857 2b04 	ldr.w	r2, [r7], #4
 800b1b4:	f8d0 e000 	ldr.w	lr, [r0]
 800b1b8:	b293      	uxth	r3, r2
 800b1ba:	ebac 0303 	sub.w	r3, ip, r3
 800b1be:	0c12      	lsrs	r2, r2, #16
 800b1c0:	fa13 f38e 	uxtah	r3, r3, lr
 800b1c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b1c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1d2:	45b9      	cmp	r9, r7
 800b1d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b1d8:	f840 3b04 	str.w	r3, [r0], #4
 800b1dc:	d2e8      	bcs.n	800b1b0 <quorem+0xb0>
 800b1de:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b1e2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b1e6:	b92a      	cbnz	r2, 800b1f4 <quorem+0xf4>
 800b1e8:	3b04      	subs	r3, #4
 800b1ea:	429e      	cmp	r6, r3
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	d30b      	bcc.n	800b208 <quorem+0x108>
 800b1f0:	f8c8 4010 	str.w	r4, [r8, #16]
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	b003      	add	sp, #12
 800b1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fc:	6812      	ldr	r2, [r2, #0]
 800b1fe:	3b04      	subs	r3, #4
 800b200:	2a00      	cmp	r2, #0
 800b202:	d1ca      	bne.n	800b19a <quorem+0x9a>
 800b204:	3c01      	subs	r4, #1
 800b206:	e7c5      	b.n	800b194 <quorem+0x94>
 800b208:	6812      	ldr	r2, [r2, #0]
 800b20a:	3b04      	subs	r3, #4
 800b20c:	2a00      	cmp	r2, #0
 800b20e:	d1ef      	bne.n	800b1f0 <quorem+0xf0>
 800b210:	3c01      	subs	r4, #1
 800b212:	e7ea      	b.n	800b1ea <quorem+0xea>
 800b214:	2000      	movs	r0, #0
 800b216:	e7ee      	b.n	800b1f6 <quorem+0xf6>

0800b218 <_dtoa_r>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	ec57 6b10 	vmov	r6, r7, d0
 800b220:	b097      	sub	sp, #92	; 0x5c
 800b222:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b224:	9106      	str	r1, [sp, #24]
 800b226:	4604      	mov	r4, r0
 800b228:	920b      	str	r2, [sp, #44]	; 0x2c
 800b22a:	9312      	str	r3, [sp, #72]	; 0x48
 800b22c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b230:	e9cd 6700 	strd	r6, r7, [sp]
 800b234:	b93d      	cbnz	r5, 800b246 <_dtoa_r+0x2e>
 800b236:	2010      	movs	r0, #16
 800b238:	f000 fda6 	bl	800bd88 <malloc>
 800b23c:	6260      	str	r0, [r4, #36]	; 0x24
 800b23e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b242:	6005      	str	r5, [r0, #0]
 800b244:	60c5      	str	r5, [r0, #12]
 800b246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b248:	6819      	ldr	r1, [r3, #0]
 800b24a:	b151      	cbz	r1, 800b262 <_dtoa_r+0x4a>
 800b24c:	685a      	ldr	r2, [r3, #4]
 800b24e:	604a      	str	r2, [r1, #4]
 800b250:	2301      	movs	r3, #1
 800b252:	4093      	lsls	r3, r2
 800b254:	608b      	str	r3, [r1, #8]
 800b256:	4620      	mov	r0, r4
 800b258:	f7ff fc0c 	bl	800aa74 <_Bfree>
 800b25c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b25e:	2200      	movs	r2, #0
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	1e3b      	subs	r3, r7, #0
 800b264:	bfbb      	ittet	lt
 800b266:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b26a:	9301      	strlt	r3, [sp, #4]
 800b26c:	2300      	movge	r3, #0
 800b26e:	2201      	movlt	r2, #1
 800b270:	bfac      	ite	ge
 800b272:	f8c8 3000 	strge.w	r3, [r8]
 800b276:	f8c8 2000 	strlt.w	r2, [r8]
 800b27a:	4baf      	ldr	r3, [pc, #700]	; (800b538 <_dtoa_r+0x320>)
 800b27c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b280:	ea33 0308 	bics.w	r3, r3, r8
 800b284:	d114      	bne.n	800b2b0 <_dtoa_r+0x98>
 800b286:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b288:	f242 730f 	movw	r3, #9999	; 0x270f
 800b28c:	6013      	str	r3, [r2, #0]
 800b28e:	9b00      	ldr	r3, [sp, #0]
 800b290:	b923      	cbnz	r3, 800b29c <_dtoa_r+0x84>
 800b292:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b296:	2800      	cmp	r0, #0
 800b298:	f000 8542 	beq.w	800bd20 <_dtoa_r+0xb08>
 800b29c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b29e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b54c <_dtoa_r+0x334>
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f000 8544 	beq.w	800bd30 <_dtoa_r+0xb18>
 800b2a8:	f10b 0303 	add.w	r3, fp, #3
 800b2ac:	f000 bd3e 	b.w	800bd2c <_dtoa_r+0xb14>
 800b2b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	4639      	mov	r1, r7
 800b2bc:	f7f5 fbbc 	bl	8000a38 <__aeabi_dcmpeq>
 800b2c0:	4681      	mov	r9, r0
 800b2c2:	b168      	cbz	r0, 800b2e0 <_dtoa_r+0xc8>
 800b2c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	6013      	str	r3, [r2, #0]
 800b2ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 8524 	beq.w	800bd1a <_dtoa_r+0xb02>
 800b2d2:	4b9a      	ldr	r3, [pc, #616]	; (800b53c <_dtoa_r+0x324>)
 800b2d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2d6:	f103 3bff 	add.w	fp, r3, #4294967295
 800b2da:	6013      	str	r3, [r2, #0]
 800b2dc:	f000 bd28 	b.w	800bd30 <_dtoa_r+0xb18>
 800b2e0:	aa14      	add	r2, sp, #80	; 0x50
 800b2e2:	a915      	add	r1, sp, #84	; 0x54
 800b2e4:	ec47 6b10 	vmov	d0, r6, r7
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f7ff fe1c 	bl	800af26 <__d2b>
 800b2ee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b2f2:	9004      	str	r0, [sp, #16]
 800b2f4:	2d00      	cmp	r5, #0
 800b2f6:	d07c      	beq.n	800b3f2 <_dtoa_r+0x1da>
 800b2f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b2fc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b300:	46b2      	mov	sl, r6
 800b302:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b306:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b30a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b30e:	2200      	movs	r2, #0
 800b310:	4b8b      	ldr	r3, [pc, #556]	; (800b540 <_dtoa_r+0x328>)
 800b312:	4650      	mov	r0, sl
 800b314:	4659      	mov	r1, fp
 800b316:	f7f4 ff6f 	bl	80001f8 <__aeabi_dsub>
 800b31a:	a381      	add	r3, pc, #516	; (adr r3, 800b520 <_dtoa_r+0x308>)
 800b31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b320:	f7f5 f922 	bl	8000568 <__aeabi_dmul>
 800b324:	a380      	add	r3, pc, #512	; (adr r3, 800b528 <_dtoa_r+0x310>)
 800b326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32a:	f7f4 ff67 	bl	80001fc <__adddf3>
 800b32e:	4606      	mov	r6, r0
 800b330:	4628      	mov	r0, r5
 800b332:	460f      	mov	r7, r1
 800b334:	f7f5 f8ae 	bl	8000494 <__aeabi_i2d>
 800b338:	a37d      	add	r3, pc, #500	; (adr r3, 800b530 <_dtoa_r+0x318>)
 800b33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33e:	f7f5 f913 	bl	8000568 <__aeabi_dmul>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	4630      	mov	r0, r6
 800b348:	4639      	mov	r1, r7
 800b34a:	f7f4 ff57 	bl	80001fc <__adddf3>
 800b34e:	4606      	mov	r6, r0
 800b350:	460f      	mov	r7, r1
 800b352:	f7f5 fba3 	bl	8000a9c <__aeabi_d2iz>
 800b356:	2200      	movs	r2, #0
 800b358:	4682      	mov	sl, r0
 800b35a:	2300      	movs	r3, #0
 800b35c:	4630      	mov	r0, r6
 800b35e:	4639      	mov	r1, r7
 800b360:	f7f5 fb74 	bl	8000a4c <__aeabi_dcmplt>
 800b364:	b148      	cbz	r0, 800b37a <_dtoa_r+0x162>
 800b366:	4650      	mov	r0, sl
 800b368:	f7f5 f894 	bl	8000494 <__aeabi_i2d>
 800b36c:	4632      	mov	r2, r6
 800b36e:	463b      	mov	r3, r7
 800b370:	f7f5 fb62 	bl	8000a38 <__aeabi_dcmpeq>
 800b374:	b908      	cbnz	r0, 800b37a <_dtoa_r+0x162>
 800b376:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b37a:	f1ba 0f16 	cmp.w	sl, #22
 800b37e:	d859      	bhi.n	800b434 <_dtoa_r+0x21c>
 800b380:	4970      	ldr	r1, [pc, #448]	; (800b544 <_dtoa_r+0x32c>)
 800b382:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b38a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b38e:	f7f5 fb7b 	bl	8000a88 <__aeabi_dcmpgt>
 800b392:	2800      	cmp	r0, #0
 800b394:	d050      	beq.n	800b438 <_dtoa_r+0x220>
 800b396:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b39a:	2300      	movs	r3, #0
 800b39c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b39e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3a0:	1b5d      	subs	r5, r3, r5
 800b3a2:	f1b5 0801 	subs.w	r8, r5, #1
 800b3a6:	bf49      	itett	mi
 800b3a8:	f1c5 0301 	rsbmi	r3, r5, #1
 800b3ac:	2300      	movpl	r3, #0
 800b3ae:	9305      	strmi	r3, [sp, #20]
 800b3b0:	f04f 0800 	movmi.w	r8, #0
 800b3b4:	bf58      	it	pl
 800b3b6:	9305      	strpl	r3, [sp, #20]
 800b3b8:	f1ba 0f00 	cmp.w	sl, #0
 800b3bc:	db3e      	blt.n	800b43c <_dtoa_r+0x224>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	44d0      	add	r8, sl
 800b3c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b3c6:	9307      	str	r3, [sp, #28]
 800b3c8:	9b06      	ldr	r3, [sp, #24]
 800b3ca:	2b09      	cmp	r3, #9
 800b3cc:	f200 8090 	bhi.w	800b4f0 <_dtoa_r+0x2d8>
 800b3d0:	2b05      	cmp	r3, #5
 800b3d2:	bfc4      	itt	gt
 800b3d4:	3b04      	subgt	r3, #4
 800b3d6:	9306      	strgt	r3, [sp, #24]
 800b3d8:	9b06      	ldr	r3, [sp, #24]
 800b3da:	f1a3 0302 	sub.w	r3, r3, #2
 800b3de:	bfcc      	ite	gt
 800b3e0:	2500      	movgt	r5, #0
 800b3e2:	2501      	movle	r5, #1
 800b3e4:	2b03      	cmp	r3, #3
 800b3e6:	f200 808f 	bhi.w	800b508 <_dtoa_r+0x2f0>
 800b3ea:	e8df f003 	tbb	[pc, r3]
 800b3ee:	7f7d      	.short	0x7f7d
 800b3f0:	7131      	.short	0x7131
 800b3f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b3f6:	441d      	add	r5, r3
 800b3f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b3fc:	2820      	cmp	r0, #32
 800b3fe:	dd13      	ble.n	800b428 <_dtoa_r+0x210>
 800b400:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b404:	9b00      	ldr	r3, [sp, #0]
 800b406:	fa08 f800 	lsl.w	r8, r8, r0
 800b40a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b40e:	fa23 f000 	lsr.w	r0, r3, r0
 800b412:	ea48 0000 	orr.w	r0, r8, r0
 800b416:	f7f5 f82d 	bl	8000474 <__aeabi_ui2d>
 800b41a:	2301      	movs	r3, #1
 800b41c:	4682      	mov	sl, r0
 800b41e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b422:	3d01      	subs	r5, #1
 800b424:	9313      	str	r3, [sp, #76]	; 0x4c
 800b426:	e772      	b.n	800b30e <_dtoa_r+0xf6>
 800b428:	9b00      	ldr	r3, [sp, #0]
 800b42a:	f1c0 0020 	rsb	r0, r0, #32
 800b42e:	fa03 f000 	lsl.w	r0, r3, r0
 800b432:	e7f0      	b.n	800b416 <_dtoa_r+0x1fe>
 800b434:	2301      	movs	r3, #1
 800b436:	e7b1      	b.n	800b39c <_dtoa_r+0x184>
 800b438:	900f      	str	r0, [sp, #60]	; 0x3c
 800b43a:	e7b0      	b.n	800b39e <_dtoa_r+0x186>
 800b43c:	9b05      	ldr	r3, [sp, #20]
 800b43e:	eba3 030a 	sub.w	r3, r3, sl
 800b442:	9305      	str	r3, [sp, #20]
 800b444:	f1ca 0300 	rsb	r3, sl, #0
 800b448:	9307      	str	r3, [sp, #28]
 800b44a:	2300      	movs	r3, #0
 800b44c:	930e      	str	r3, [sp, #56]	; 0x38
 800b44e:	e7bb      	b.n	800b3c8 <_dtoa_r+0x1b0>
 800b450:	2301      	movs	r3, #1
 800b452:	930a      	str	r3, [sp, #40]	; 0x28
 800b454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b456:	2b00      	cmp	r3, #0
 800b458:	dd59      	ble.n	800b50e <_dtoa_r+0x2f6>
 800b45a:	9302      	str	r3, [sp, #8]
 800b45c:	4699      	mov	r9, r3
 800b45e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b460:	2200      	movs	r2, #0
 800b462:	6072      	str	r2, [r6, #4]
 800b464:	2204      	movs	r2, #4
 800b466:	f102 0014 	add.w	r0, r2, #20
 800b46a:	4298      	cmp	r0, r3
 800b46c:	6871      	ldr	r1, [r6, #4]
 800b46e:	d953      	bls.n	800b518 <_dtoa_r+0x300>
 800b470:	4620      	mov	r0, r4
 800b472:	f7ff facb 	bl	800aa0c <_Balloc>
 800b476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b478:	6030      	str	r0, [r6, #0]
 800b47a:	f1b9 0f0e 	cmp.w	r9, #14
 800b47e:	f8d3 b000 	ldr.w	fp, [r3]
 800b482:	f200 80e6 	bhi.w	800b652 <_dtoa_r+0x43a>
 800b486:	2d00      	cmp	r5, #0
 800b488:	f000 80e3 	beq.w	800b652 <_dtoa_r+0x43a>
 800b48c:	ed9d 7b00 	vldr	d7, [sp]
 800b490:	f1ba 0f00 	cmp.w	sl, #0
 800b494:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b498:	dd74      	ble.n	800b584 <_dtoa_r+0x36c>
 800b49a:	4a2a      	ldr	r2, [pc, #168]	; (800b544 <_dtoa_r+0x32c>)
 800b49c:	f00a 030f 	and.w	r3, sl, #15
 800b4a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b4a4:	ed93 7b00 	vldr	d7, [r3]
 800b4a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b4ac:	06f0      	lsls	r0, r6, #27
 800b4ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b4b2:	d565      	bpl.n	800b580 <_dtoa_r+0x368>
 800b4b4:	4b24      	ldr	r3, [pc, #144]	; (800b548 <_dtoa_r+0x330>)
 800b4b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4be:	f7f5 f97d 	bl	80007bc <__aeabi_ddiv>
 800b4c2:	e9cd 0100 	strd	r0, r1, [sp]
 800b4c6:	f006 060f 	and.w	r6, r6, #15
 800b4ca:	2503      	movs	r5, #3
 800b4cc:	4f1e      	ldr	r7, [pc, #120]	; (800b548 <_dtoa_r+0x330>)
 800b4ce:	e04c      	b.n	800b56a <_dtoa_r+0x352>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b4d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4d6:	4453      	add	r3, sl
 800b4d8:	f103 0901 	add.w	r9, r3, #1
 800b4dc:	9302      	str	r3, [sp, #8]
 800b4de:	464b      	mov	r3, r9
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	bfb8      	it	lt
 800b4e4:	2301      	movlt	r3, #1
 800b4e6:	e7ba      	b.n	800b45e <_dtoa_r+0x246>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	e7b2      	b.n	800b452 <_dtoa_r+0x23a>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	e7f0      	b.n	800b4d2 <_dtoa_r+0x2ba>
 800b4f0:	2501      	movs	r5, #1
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9306      	str	r3, [sp, #24]
 800b4f6:	950a      	str	r5, [sp, #40]	; 0x28
 800b4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4fc:	9302      	str	r3, [sp, #8]
 800b4fe:	4699      	mov	r9, r3
 800b500:	2200      	movs	r2, #0
 800b502:	2312      	movs	r3, #18
 800b504:	920b      	str	r2, [sp, #44]	; 0x2c
 800b506:	e7aa      	b.n	800b45e <_dtoa_r+0x246>
 800b508:	2301      	movs	r3, #1
 800b50a:	930a      	str	r3, [sp, #40]	; 0x28
 800b50c:	e7f4      	b.n	800b4f8 <_dtoa_r+0x2e0>
 800b50e:	2301      	movs	r3, #1
 800b510:	9302      	str	r3, [sp, #8]
 800b512:	4699      	mov	r9, r3
 800b514:	461a      	mov	r2, r3
 800b516:	e7f5      	b.n	800b504 <_dtoa_r+0x2ec>
 800b518:	3101      	adds	r1, #1
 800b51a:	6071      	str	r1, [r6, #4]
 800b51c:	0052      	lsls	r2, r2, #1
 800b51e:	e7a2      	b.n	800b466 <_dtoa_r+0x24e>
 800b520:	636f4361 	.word	0x636f4361
 800b524:	3fd287a7 	.word	0x3fd287a7
 800b528:	8b60c8b3 	.word	0x8b60c8b3
 800b52c:	3fc68a28 	.word	0x3fc68a28
 800b530:	509f79fb 	.word	0x509f79fb
 800b534:	3fd34413 	.word	0x3fd34413
 800b538:	7ff00000 	.word	0x7ff00000
 800b53c:	0800ef0a 	.word	0x0800ef0a
 800b540:	3ff80000 	.word	0x3ff80000
 800b544:	0800ee28 	.word	0x0800ee28
 800b548:	0800ee00 	.word	0x0800ee00
 800b54c:	0800ef05 	.word	0x0800ef05
 800b550:	07f1      	lsls	r1, r6, #31
 800b552:	d508      	bpl.n	800b566 <_dtoa_r+0x34e>
 800b554:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b55c:	f7f5 f804 	bl	8000568 <__aeabi_dmul>
 800b560:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b564:	3501      	adds	r5, #1
 800b566:	1076      	asrs	r6, r6, #1
 800b568:	3708      	adds	r7, #8
 800b56a:	2e00      	cmp	r6, #0
 800b56c:	d1f0      	bne.n	800b550 <_dtoa_r+0x338>
 800b56e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b572:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b576:	f7f5 f921 	bl	80007bc <__aeabi_ddiv>
 800b57a:	e9cd 0100 	strd	r0, r1, [sp]
 800b57e:	e01a      	b.n	800b5b6 <_dtoa_r+0x39e>
 800b580:	2502      	movs	r5, #2
 800b582:	e7a3      	b.n	800b4cc <_dtoa_r+0x2b4>
 800b584:	f000 80a0 	beq.w	800b6c8 <_dtoa_r+0x4b0>
 800b588:	f1ca 0600 	rsb	r6, sl, #0
 800b58c:	4b9f      	ldr	r3, [pc, #636]	; (800b80c <_dtoa_r+0x5f4>)
 800b58e:	4fa0      	ldr	r7, [pc, #640]	; (800b810 <_dtoa_r+0x5f8>)
 800b590:	f006 020f 	and.w	r2, r6, #15
 800b594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b5a0:	f7f4 ffe2 	bl	8000568 <__aeabi_dmul>
 800b5a4:	e9cd 0100 	strd	r0, r1, [sp]
 800b5a8:	1136      	asrs	r6, r6, #4
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	2502      	movs	r5, #2
 800b5ae:	2e00      	cmp	r6, #0
 800b5b0:	d17f      	bne.n	800b6b2 <_dtoa_r+0x49a>
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1e1      	bne.n	800b57a <_dtoa_r+0x362>
 800b5b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 8087 	beq.w	800b6cc <_dtoa_r+0x4b4>
 800b5be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	4b93      	ldr	r3, [pc, #588]	; (800b814 <_dtoa_r+0x5fc>)
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	f7f5 fa3f 	bl	8000a4c <__aeabi_dcmplt>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	d07c      	beq.n	800b6cc <_dtoa_r+0x4b4>
 800b5d2:	f1b9 0f00 	cmp.w	r9, #0
 800b5d6:	d079      	beq.n	800b6cc <_dtoa_r+0x4b4>
 800b5d8:	9b02      	ldr	r3, [sp, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	dd35      	ble.n	800b64a <_dtoa_r+0x432>
 800b5de:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b5e2:	9308      	str	r3, [sp, #32]
 800b5e4:	4639      	mov	r1, r7
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	4b8b      	ldr	r3, [pc, #556]	; (800b818 <_dtoa_r+0x600>)
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	f7f4 ffbc 	bl	8000568 <__aeabi_dmul>
 800b5f0:	e9cd 0100 	strd	r0, r1, [sp]
 800b5f4:	9f02      	ldr	r7, [sp, #8]
 800b5f6:	3501      	adds	r5, #1
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	f7f4 ff4b 	bl	8000494 <__aeabi_i2d>
 800b5fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b602:	f7f4 ffb1 	bl	8000568 <__aeabi_dmul>
 800b606:	2200      	movs	r2, #0
 800b608:	4b84      	ldr	r3, [pc, #528]	; (800b81c <_dtoa_r+0x604>)
 800b60a:	f7f4 fdf7 	bl	80001fc <__adddf3>
 800b60e:	4605      	mov	r5, r0
 800b610:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b614:	2f00      	cmp	r7, #0
 800b616:	d15d      	bne.n	800b6d4 <_dtoa_r+0x4bc>
 800b618:	2200      	movs	r2, #0
 800b61a:	4b81      	ldr	r3, [pc, #516]	; (800b820 <_dtoa_r+0x608>)
 800b61c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b620:	f7f4 fdea 	bl	80001f8 <__aeabi_dsub>
 800b624:	462a      	mov	r2, r5
 800b626:	4633      	mov	r3, r6
 800b628:	e9cd 0100 	strd	r0, r1, [sp]
 800b62c:	f7f5 fa2c 	bl	8000a88 <__aeabi_dcmpgt>
 800b630:	2800      	cmp	r0, #0
 800b632:	f040 8288 	bne.w	800bb46 <_dtoa_r+0x92e>
 800b636:	462a      	mov	r2, r5
 800b638:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b63c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b640:	f7f5 fa04 	bl	8000a4c <__aeabi_dcmplt>
 800b644:	2800      	cmp	r0, #0
 800b646:	f040 827c 	bne.w	800bb42 <_dtoa_r+0x92a>
 800b64a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b64e:	e9cd 2300 	strd	r2, r3, [sp]
 800b652:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b654:	2b00      	cmp	r3, #0
 800b656:	f2c0 8150 	blt.w	800b8fa <_dtoa_r+0x6e2>
 800b65a:	f1ba 0f0e 	cmp.w	sl, #14
 800b65e:	f300 814c 	bgt.w	800b8fa <_dtoa_r+0x6e2>
 800b662:	4b6a      	ldr	r3, [pc, #424]	; (800b80c <_dtoa_r+0x5f4>)
 800b664:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b668:	ed93 7b00 	vldr	d7, [r3]
 800b66c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b66e:	2b00      	cmp	r3, #0
 800b670:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b674:	f280 80d8 	bge.w	800b828 <_dtoa_r+0x610>
 800b678:	f1b9 0f00 	cmp.w	r9, #0
 800b67c:	f300 80d4 	bgt.w	800b828 <_dtoa_r+0x610>
 800b680:	f040 825e 	bne.w	800bb40 <_dtoa_r+0x928>
 800b684:	2200      	movs	r2, #0
 800b686:	4b66      	ldr	r3, [pc, #408]	; (800b820 <_dtoa_r+0x608>)
 800b688:	ec51 0b17 	vmov	r0, r1, d7
 800b68c:	f7f4 ff6c 	bl	8000568 <__aeabi_dmul>
 800b690:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b694:	f7f5 f9ee 	bl	8000a74 <__aeabi_dcmpge>
 800b698:	464f      	mov	r7, r9
 800b69a:	464e      	mov	r6, r9
 800b69c:	2800      	cmp	r0, #0
 800b69e:	f040 8234 	bne.w	800bb0a <_dtoa_r+0x8f2>
 800b6a2:	2331      	movs	r3, #49	; 0x31
 800b6a4:	f10b 0501 	add.w	r5, fp, #1
 800b6a8:	f88b 3000 	strb.w	r3, [fp]
 800b6ac:	f10a 0a01 	add.w	sl, sl, #1
 800b6b0:	e22f      	b.n	800bb12 <_dtoa_r+0x8fa>
 800b6b2:	07f2      	lsls	r2, r6, #31
 800b6b4:	d505      	bpl.n	800b6c2 <_dtoa_r+0x4aa>
 800b6b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6ba:	f7f4 ff55 	bl	8000568 <__aeabi_dmul>
 800b6be:	3501      	adds	r5, #1
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	1076      	asrs	r6, r6, #1
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	e772      	b.n	800b5ae <_dtoa_r+0x396>
 800b6c8:	2502      	movs	r5, #2
 800b6ca:	e774      	b.n	800b5b6 <_dtoa_r+0x39e>
 800b6cc:	f8cd a020 	str.w	sl, [sp, #32]
 800b6d0:	464f      	mov	r7, r9
 800b6d2:	e791      	b.n	800b5f8 <_dtoa_r+0x3e0>
 800b6d4:	4b4d      	ldr	r3, [pc, #308]	; (800b80c <_dtoa_r+0x5f4>)
 800b6d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b6da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d047      	beq.n	800b774 <_dtoa_r+0x55c>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	494e      	ldr	r1, [pc, #312]	; (800b824 <_dtoa_r+0x60c>)
 800b6ec:	f7f5 f866 	bl	80007bc <__aeabi_ddiv>
 800b6f0:	462a      	mov	r2, r5
 800b6f2:	4633      	mov	r3, r6
 800b6f4:	f7f4 fd80 	bl	80001f8 <__aeabi_dsub>
 800b6f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b6fc:	465d      	mov	r5, fp
 800b6fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b702:	f7f5 f9cb 	bl	8000a9c <__aeabi_d2iz>
 800b706:	4606      	mov	r6, r0
 800b708:	f7f4 fec4 	bl	8000494 <__aeabi_i2d>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b714:	f7f4 fd70 	bl	80001f8 <__aeabi_dsub>
 800b718:	3630      	adds	r6, #48	; 0x30
 800b71a:	f805 6b01 	strb.w	r6, [r5], #1
 800b71e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b722:	e9cd 0100 	strd	r0, r1, [sp]
 800b726:	f7f5 f991 	bl	8000a4c <__aeabi_dcmplt>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d163      	bne.n	800b7f6 <_dtoa_r+0x5de>
 800b72e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b732:	2000      	movs	r0, #0
 800b734:	4937      	ldr	r1, [pc, #220]	; (800b814 <_dtoa_r+0x5fc>)
 800b736:	f7f4 fd5f 	bl	80001f8 <__aeabi_dsub>
 800b73a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b73e:	f7f5 f985 	bl	8000a4c <__aeabi_dcmplt>
 800b742:	2800      	cmp	r0, #0
 800b744:	f040 80b7 	bne.w	800b8b6 <_dtoa_r+0x69e>
 800b748:	eba5 030b 	sub.w	r3, r5, fp
 800b74c:	429f      	cmp	r7, r3
 800b74e:	f77f af7c 	ble.w	800b64a <_dtoa_r+0x432>
 800b752:	2200      	movs	r2, #0
 800b754:	4b30      	ldr	r3, [pc, #192]	; (800b818 <_dtoa_r+0x600>)
 800b756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b75a:	f7f4 ff05 	bl	8000568 <__aeabi_dmul>
 800b75e:	2200      	movs	r2, #0
 800b760:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b764:	4b2c      	ldr	r3, [pc, #176]	; (800b818 <_dtoa_r+0x600>)
 800b766:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b76a:	f7f4 fefd 	bl	8000568 <__aeabi_dmul>
 800b76e:	e9cd 0100 	strd	r0, r1, [sp]
 800b772:	e7c4      	b.n	800b6fe <_dtoa_r+0x4e6>
 800b774:	462a      	mov	r2, r5
 800b776:	4633      	mov	r3, r6
 800b778:	f7f4 fef6 	bl	8000568 <__aeabi_dmul>
 800b77c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b780:	eb0b 0507 	add.w	r5, fp, r7
 800b784:	465e      	mov	r6, fp
 800b786:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b78a:	f7f5 f987 	bl	8000a9c <__aeabi_d2iz>
 800b78e:	4607      	mov	r7, r0
 800b790:	f7f4 fe80 	bl	8000494 <__aeabi_i2d>
 800b794:	3730      	adds	r7, #48	; 0x30
 800b796:	4602      	mov	r2, r0
 800b798:	460b      	mov	r3, r1
 800b79a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b79e:	f7f4 fd2b 	bl	80001f8 <__aeabi_dsub>
 800b7a2:	f806 7b01 	strb.w	r7, [r6], #1
 800b7a6:	42ae      	cmp	r6, r5
 800b7a8:	e9cd 0100 	strd	r0, r1, [sp]
 800b7ac:	f04f 0200 	mov.w	r2, #0
 800b7b0:	d126      	bne.n	800b800 <_dtoa_r+0x5e8>
 800b7b2:	4b1c      	ldr	r3, [pc, #112]	; (800b824 <_dtoa_r+0x60c>)
 800b7b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b7b8:	f7f4 fd20 	bl	80001fc <__adddf3>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7c4:	f7f5 f960 	bl	8000a88 <__aeabi_dcmpgt>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d174      	bne.n	800b8b6 <_dtoa_r+0x69e>
 800b7cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	4914      	ldr	r1, [pc, #80]	; (800b824 <_dtoa_r+0x60c>)
 800b7d4:	f7f4 fd10 	bl	80001f8 <__aeabi_dsub>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7e0:	f7f5 f934 	bl	8000a4c <__aeabi_dcmplt>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	f43f af30 	beq.w	800b64a <_dtoa_r+0x432>
 800b7ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b7ee:	2b30      	cmp	r3, #48	; 0x30
 800b7f0:	f105 32ff 	add.w	r2, r5, #4294967295
 800b7f4:	d002      	beq.n	800b7fc <_dtoa_r+0x5e4>
 800b7f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b7fa:	e04a      	b.n	800b892 <_dtoa_r+0x67a>
 800b7fc:	4615      	mov	r5, r2
 800b7fe:	e7f4      	b.n	800b7ea <_dtoa_r+0x5d2>
 800b800:	4b05      	ldr	r3, [pc, #20]	; (800b818 <_dtoa_r+0x600>)
 800b802:	f7f4 feb1 	bl	8000568 <__aeabi_dmul>
 800b806:	e9cd 0100 	strd	r0, r1, [sp]
 800b80a:	e7bc      	b.n	800b786 <_dtoa_r+0x56e>
 800b80c:	0800ee28 	.word	0x0800ee28
 800b810:	0800ee00 	.word	0x0800ee00
 800b814:	3ff00000 	.word	0x3ff00000
 800b818:	40240000 	.word	0x40240000
 800b81c:	401c0000 	.word	0x401c0000
 800b820:	40140000 	.word	0x40140000
 800b824:	3fe00000 	.word	0x3fe00000
 800b828:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b82c:	465d      	mov	r5, fp
 800b82e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b832:	4630      	mov	r0, r6
 800b834:	4639      	mov	r1, r7
 800b836:	f7f4 ffc1 	bl	80007bc <__aeabi_ddiv>
 800b83a:	f7f5 f92f 	bl	8000a9c <__aeabi_d2iz>
 800b83e:	4680      	mov	r8, r0
 800b840:	f7f4 fe28 	bl	8000494 <__aeabi_i2d>
 800b844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b848:	f7f4 fe8e 	bl	8000568 <__aeabi_dmul>
 800b84c:	4602      	mov	r2, r0
 800b84e:	460b      	mov	r3, r1
 800b850:	4630      	mov	r0, r6
 800b852:	4639      	mov	r1, r7
 800b854:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b858:	f7f4 fcce 	bl	80001f8 <__aeabi_dsub>
 800b85c:	f805 6b01 	strb.w	r6, [r5], #1
 800b860:	eba5 060b 	sub.w	r6, r5, fp
 800b864:	45b1      	cmp	r9, r6
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	d139      	bne.n	800b8e0 <_dtoa_r+0x6c8>
 800b86c:	f7f4 fcc6 	bl	80001fc <__adddf3>
 800b870:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b874:	4606      	mov	r6, r0
 800b876:	460f      	mov	r7, r1
 800b878:	f7f5 f906 	bl	8000a88 <__aeabi_dcmpgt>
 800b87c:	b9c8      	cbnz	r0, 800b8b2 <_dtoa_r+0x69a>
 800b87e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b882:	4630      	mov	r0, r6
 800b884:	4639      	mov	r1, r7
 800b886:	f7f5 f8d7 	bl	8000a38 <__aeabi_dcmpeq>
 800b88a:	b110      	cbz	r0, 800b892 <_dtoa_r+0x67a>
 800b88c:	f018 0f01 	tst.w	r8, #1
 800b890:	d10f      	bne.n	800b8b2 <_dtoa_r+0x69a>
 800b892:	9904      	ldr	r1, [sp, #16]
 800b894:	4620      	mov	r0, r4
 800b896:	f7ff f8ed 	bl	800aa74 <_Bfree>
 800b89a:	2300      	movs	r3, #0
 800b89c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b89e:	702b      	strb	r3, [r5, #0]
 800b8a0:	f10a 0301 	add.w	r3, sl, #1
 800b8a4:	6013      	str	r3, [r2, #0]
 800b8a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f000 8241 	beq.w	800bd30 <_dtoa_r+0xb18>
 800b8ae:	601d      	str	r5, [r3, #0]
 800b8b0:	e23e      	b.n	800bd30 <_dtoa_r+0xb18>
 800b8b2:	f8cd a020 	str.w	sl, [sp, #32]
 800b8b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b8ba:	2a39      	cmp	r2, #57	; 0x39
 800b8bc:	f105 33ff 	add.w	r3, r5, #4294967295
 800b8c0:	d108      	bne.n	800b8d4 <_dtoa_r+0x6bc>
 800b8c2:	459b      	cmp	fp, r3
 800b8c4:	d10a      	bne.n	800b8dc <_dtoa_r+0x6c4>
 800b8c6:	9b08      	ldr	r3, [sp, #32]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	9308      	str	r3, [sp, #32]
 800b8cc:	2330      	movs	r3, #48	; 0x30
 800b8ce:	f88b 3000 	strb.w	r3, [fp]
 800b8d2:	465b      	mov	r3, fp
 800b8d4:	781a      	ldrb	r2, [r3, #0]
 800b8d6:	3201      	adds	r2, #1
 800b8d8:	701a      	strb	r2, [r3, #0]
 800b8da:	e78c      	b.n	800b7f6 <_dtoa_r+0x5de>
 800b8dc:	461d      	mov	r5, r3
 800b8de:	e7ea      	b.n	800b8b6 <_dtoa_r+0x69e>
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	4b9b      	ldr	r3, [pc, #620]	; (800bb50 <_dtoa_r+0x938>)
 800b8e4:	f7f4 fe40 	bl	8000568 <__aeabi_dmul>
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	460f      	mov	r7, r1
 800b8f0:	f7f5 f8a2 	bl	8000a38 <__aeabi_dcmpeq>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d09a      	beq.n	800b82e <_dtoa_r+0x616>
 800b8f8:	e7cb      	b.n	800b892 <_dtoa_r+0x67a>
 800b8fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8fc:	2a00      	cmp	r2, #0
 800b8fe:	f000 808b 	beq.w	800ba18 <_dtoa_r+0x800>
 800b902:	9a06      	ldr	r2, [sp, #24]
 800b904:	2a01      	cmp	r2, #1
 800b906:	dc6e      	bgt.n	800b9e6 <_dtoa_r+0x7ce>
 800b908:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b90a:	2a00      	cmp	r2, #0
 800b90c:	d067      	beq.n	800b9de <_dtoa_r+0x7c6>
 800b90e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b912:	9f07      	ldr	r7, [sp, #28]
 800b914:	9d05      	ldr	r5, [sp, #20]
 800b916:	9a05      	ldr	r2, [sp, #20]
 800b918:	2101      	movs	r1, #1
 800b91a:	441a      	add	r2, r3
 800b91c:	4620      	mov	r0, r4
 800b91e:	9205      	str	r2, [sp, #20]
 800b920:	4498      	add	r8, r3
 800b922:	f7ff f947 	bl	800abb4 <__i2b>
 800b926:	4606      	mov	r6, r0
 800b928:	2d00      	cmp	r5, #0
 800b92a:	dd0c      	ble.n	800b946 <_dtoa_r+0x72e>
 800b92c:	f1b8 0f00 	cmp.w	r8, #0
 800b930:	dd09      	ble.n	800b946 <_dtoa_r+0x72e>
 800b932:	4545      	cmp	r5, r8
 800b934:	9a05      	ldr	r2, [sp, #20]
 800b936:	462b      	mov	r3, r5
 800b938:	bfa8      	it	ge
 800b93a:	4643      	movge	r3, r8
 800b93c:	1ad2      	subs	r2, r2, r3
 800b93e:	9205      	str	r2, [sp, #20]
 800b940:	1aed      	subs	r5, r5, r3
 800b942:	eba8 0803 	sub.w	r8, r8, r3
 800b946:	9b07      	ldr	r3, [sp, #28]
 800b948:	b1eb      	cbz	r3, 800b986 <_dtoa_r+0x76e>
 800b94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d067      	beq.n	800ba20 <_dtoa_r+0x808>
 800b950:	b18f      	cbz	r7, 800b976 <_dtoa_r+0x75e>
 800b952:	4631      	mov	r1, r6
 800b954:	463a      	mov	r2, r7
 800b956:	4620      	mov	r0, r4
 800b958:	f7ff f9cc 	bl	800acf4 <__pow5mult>
 800b95c:	9a04      	ldr	r2, [sp, #16]
 800b95e:	4601      	mov	r1, r0
 800b960:	4606      	mov	r6, r0
 800b962:	4620      	mov	r0, r4
 800b964:	f7ff f92f 	bl	800abc6 <__multiply>
 800b968:	9904      	ldr	r1, [sp, #16]
 800b96a:	9008      	str	r0, [sp, #32]
 800b96c:	4620      	mov	r0, r4
 800b96e:	f7ff f881 	bl	800aa74 <_Bfree>
 800b972:	9b08      	ldr	r3, [sp, #32]
 800b974:	9304      	str	r3, [sp, #16]
 800b976:	9b07      	ldr	r3, [sp, #28]
 800b978:	1bda      	subs	r2, r3, r7
 800b97a:	d004      	beq.n	800b986 <_dtoa_r+0x76e>
 800b97c:	9904      	ldr	r1, [sp, #16]
 800b97e:	4620      	mov	r0, r4
 800b980:	f7ff f9b8 	bl	800acf4 <__pow5mult>
 800b984:	9004      	str	r0, [sp, #16]
 800b986:	2101      	movs	r1, #1
 800b988:	4620      	mov	r0, r4
 800b98a:	f7ff f913 	bl	800abb4 <__i2b>
 800b98e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b990:	4607      	mov	r7, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	f000 81d0 	beq.w	800bd38 <_dtoa_r+0xb20>
 800b998:	461a      	mov	r2, r3
 800b99a:	4601      	mov	r1, r0
 800b99c:	4620      	mov	r0, r4
 800b99e:	f7ff f9a9 	bl	800acf4 <__pow5mult>
 800b9a2:	9b06      	ldr	r3, [sp, #24]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	4607      	mov	r7, r0
 800b9a8:	dc40      	bgt.n	800ba2c <_dtoa_r+0x814>
 800b9aa:	9b00      	ldr	r3, [sp, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d139      	bne.n	800ba24 <_dtoa_r+0x80c>
 800b9b0:	9b01      	ldr	r3, [sp, #4]
 800b9b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d136      	bne.n	800ba28 <_dtoa_r+0x810>
 800b9ba:	9b01      	ldr	r3, [sp, #4]
 800b9bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9c0:	0d1b      	lsrs	r3, r3, #20
 800b9c2:	051b      	lsls	r3, r3, #20
 800b9c4:	b12b      	cbz	r3, 800b9d2 <_dtoa_r+0x7ba>
 800b9c6:	9b05      	ldr	r3, [sp, #20]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	9305      	str	r3, [sp, #20]
 800b9cc:	f108 0801 	add.w	r8, r8, #1
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	9307      	str	r3, [sp, #28]
 800b9d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d12a      	bne.n	800ba30 <_dtoa_r+0x818>
 800b9da:	2001      	movs	r0, #1
 800b9dc:	e030      	b.n	800ba40 <_dtoa_r+0x828>
 800b9de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9e4:	e795      	b.n	800b912 <_dtoa_r+0x6fa>
 800b9e6:	9b07      	ldr	r3, [sp, #28]
 800b9e8:	f109 37ff 	add.w	r7, r9, #4294967295
 800b9ec:	42bb      	cmp	r3, r7
 800b9ee:	bfbf      	itttt	lt
 800b9f0:	9b07      	ldrlt	r3, [sp, #28]
 800b9f2:	9707      	strlt	r7, [sp, #28]
 800b9f4:	1afa      	sublt	r2, r7, r3
 800b9f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b9f8:	bfbb      	ittet	lt
 800b9fa:	189b      	addlt	r3, r3, r2
 800b9fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b9fe:	1bdf      	subge	r7, r3, r7
 800ba00:	2700      	movlt	r7, #0
 800ba02:	f1b9 0f00 	cmp.w	r9, #0
 800ba06:	bfb5      	itete	lt
 800ba08:	9b05      	ldrlt	r3, [sp, #20]
 800ba0a:	9d05      	ldrge	r5, [sp, #20]
 800ba0c:	eba3 0509 	sublt.w	r5, r3, r9
 800ba10:	464b      	movge	r3, r9
 800ba12:	bfb8      	it	lt
 800ba14:	2300      	movlt	r3, #0
 800ba16:	e77e      	b.n	800b916 <_dtoa_r+0x6fe>
 800ba18:	9f07      	ldr	r7, [sp, #28]
 800ba1a:	9d05      	ldr	r5, [sp, #20]
 800ba1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ba1e:	e783      	b.n	800b928 <_dtoa_r+0x710>
 800ba20:	9a07      	ldr	r2, [sp, #28]
 800ba22:	e7ab      	b.n	800b97c <_dtoa_r+0x764>
 800ba24:	2300      	movs	r3, #0
 800ba26:	e7d4      	b.n	800b9d2 <_dtoa_r+0x7ba>
 800ba28:	9b00      	ldr	r3, [sp, #0]
 800ba2a:	e7d2      	b.n	800b9d2 <_dtoa_r+0x7ba>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	9307      	str	r3, [sp, #28]
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ba36:	6918      	ldr	r0, [r3, #16]
 800ba38:	f7ff f86e 	bl	800ab18 <__hi0bits>
 800ba3c:	f1c0 0020 	rsb	r0, r0, #32
 800ba40:	4440      	add	r0, r8
 800ba42:	f010 001f 	ands.w	r0, r0, #31
 800ba46:	d047      	beq.n	800bad8 <_dtoa_r+0x8c0>
 800ba48:	f1c0 0320 	rsb	r3, r0, #32
 800ba4c:	2b04      	cmp	r3, #4
 800ba4e:	dd3b      	ble.n	800bac8 <_dtoa_r+0x8b0>
 800ba50:	9b05      	ldr	r3, [sp, #20]
 800ba52:	f1c0 001c 	rsb	r0, r0, #28
 800ba56:	4403      	add	r3, r0
 800ba58:	9305      	str	r3, [sp, #20]
 800ba5a:	4405      	add	r5, r0
 800ba5c:	4480      	add	r8, r0
 800ba5e:	9b05      	ldr	r3, [sp, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	dd05      	ble.n	800ba70 <_dtoa_r+0x858>
 800ba64:	461a      	mov	r2, r3
 800ba66:	9904      	ldr	r1, [sp, #16]
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f7ff f991 	bl	800ad90 <__lshift>
 800ba6e:	9004      	str	r0, [sp, #16]
 800ba70:	f1b8 0f00 	cmp.w	r8, #0
 800ba74:	dd05      	ble.n	800ba82 <_dtoa_r+0x86a>
 800ba76:	4639      	mov	r1, r7
 800ba78:	4642      	mov	r2, r8
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f7ff f988 	bl	800ad90 <__lshift>
 800ba80:	4607      	mov	r7, r0
 800ba82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba84:	b353      	cbz	r3, 800badc <_dtoa_r+0x8c4>
 800ba86:	4639      	mov	r1, r7
 800ba88:	9804      	ldr	r0, [sp, #16]
 800ba8a:	f7ff f9d5 	bl	800ae38 <__mcmp>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	da24      	bge.n	800badc <_dtoa_r+0x8c4>
 800ba92:	2300      	movs	r3, #0
 800ba94:	220a      	movs	r2, #10
 800ba96:	9904      	ldr	r1, [sp, #16]
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f7ff f802 	bl	800aaa2 <__multadd>
 800ba9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa0:	9004      	str	r0, [sp, #16]
 800baa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f000 814d 	beq.w	800bd46 <_dtoa_r+0xb2e>
 800baac:	2300      	movs	r3, #0
 800baae:	4631      	mov	r1, r6
 800bab0:	220a      	movs	r2, #10
 800bab2:	4620      	mov	r0, r4
 800bab4:	f7fe fff5 	bl	800aaa2 <__multadd>
 800bab8:	9b02      	ldr	r3, [sp, #8]
 800baba:	2b00      	cmp	r3, #0
 800babc:	4606      	mov	r6, r0
 800babe:	dc4f      	bgt.n	800bb60 <_dtoa_r+0x948>
 800bac0:	9b06      	ldr	r3, [sp, #24]
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	dd4c      	ble.n	800bb60 <_dtoa_r+0x948>
 800bac6:	e011      	b.n	800baec <_dtoa_r+0x8d4>
 800bac8:	d0c9      	beq.n	800ba5e <_dtoa_r+0x846>
 800baca:	9a05      	ldr	r2, [sp, #20]
 800bacc:	331c      	adds	r3, #28
 800bace:	441a      	add	r2, r3
 800bad0:	9205      	str	r2, [sp, #20]
 800bad2:	441d      	add	r5, r3
 800bad4:	4498      	add	r8, r3
 800bad6:	e7c2      	b.n	800ba5e <_dtoa_r+0x846>
 800bad8:	4603      	mov	r3, r0
 800bada:	e7f6      	b.n	800baca <_dtoa_r+0x8b2>
 800badc:	f1b9 0f00 	cmp.w	r9, #0
 800bae0:	dc38      	bgt.n	800bb54 <_dtoa_r+0x93c>
 800bae2:	9b06      	ldr	r3, [sp, #24]
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	dd35      	ble.n	800bb54 <_dtoa_r+0x93c>
 800bae8:	f8cd 9008 	str.w	r9, [sp, #8]
 800baec:	9b02      	ldr	r3, [sp, #8]
 800baee:	b963      	cbnz	r3, 800bb0a <_dtoa_r+0x8f2>
 800baf0:	4639      	mov	r1, r7
 800baf2:	2205      	movs	r2, #5
 800baf4:	4620      	mov	r0, r4
 800baf6:	f7fe ffd4 	bl	800aaa2 <__multadd>
 800bafa:	4601      	mov	r1, r0
 800bafc:	4607      	mov	r7, r0
 800bafe:	9804      	ldr	r0, [sp, #16]
 800bb00:	f7ff f99a 	bl	800ae38 <__mcmp>
 800bb04:	2800      	cmp	r0, #0
 800bb06:	f73f adcc 	bgt.w	800b6a2 <_dtoa_r+0x48a>
 800bb0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb0c:	465d      	mov	r5, fp
 800bb0e:	ea6f 0a03 	mvn.w	sl, r3
 800bb12:	f04f 0900 	mov.w	r9, #0
 800bb16:	4639      	mov	r1, r7
 800bb18:	4620      	mov	r0, r4
 800bb1a:	f7fe ffab 	bl	800aa74 <_Bfree>
 800bb1e:	2e00      	cmp	r6, #0
 800bb20:	f43f aeb7 	beq.w	800b892 <_dtoa_r+0x67a>
 800bb24:	f1b9 0f00 	cmp.w	r9, #0
 800bb28:	d005      	beq.n	800bb36 <_dtoa_r+0x91e>
 800bb2a:	45b1      	cmp	r9, r6
 800bb2c:	d003      	beq.n	800bb36 <_dtoa_r+0x91e>
 800bb2e:	4649      	mov	r1, r9
 800bb30:	4620      	mov	r0, r4
 800bb32:	f7fe ff9f 	bl	800aa74 <_Bfree>
 800bb36:	4631      	mov	r1, r6
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f7fe ff9b 	bl	800aa74 <_Bfree>
 800bb3e:	e6a8      	b.n	800b892 <_dtoa_r+0x67a>
 800bb40:	2700      	movs	r7, #0
 800bb42:	463e      	mov	r6, r7
 800bb44:	e7e1      	b.n	800bb0a <_dtoa_r+0x8f2>
 800bb46:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bb4a:	463e      	mov	r6, r7
 800bb4c:	e5a9      	b.n	800b6a2 <_dtoa_r+0x48a>
 800bb4e:	bf00      	nop
 800bb50:	40240000 	.word	0x40240000
 800bb54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb56:	f8cd 9008 	str.w	r9, [sp, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f000 80fa 	beq.w	800bd54 <_dtoa_r+0xb3c>
 800bb60:	2d00      	cmp	r5, #0
 800bb62:	dd05      	ble.n	800bb70 <_dtoa_r+0x958>
 800bb64:	4631      	mov	r1, r6
 800bb66:	462a      	mov	r2, r5
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f7ff f911 	bl	800ad90 <__lshift>
 800bb6e:	4606      	mov	r6, r0
 800bb70:	9b07      	ldr	r3, [sp, #28]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d04c      	beq.n	800bc10 <_dtoa_r+0x9f8>
 800bb76:	6871      	ldr	r1, [r6, #4]
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f7fe ff47 	bl	800aa0c <_Balloc>
 800bb7e:	6932      	ldr	r2, [r6, #16]
 800bb80:	3202      	adds	r2, #2
 800bb82:	4605      	mov	r5, r0
 800bb84:	0092      	lsls	r2, r2, #2
 800bb86:	f106 010c 	add.w	r1, r6, #12
 800bb8a:	300c      	adds	r0, #12
 800bb8c:	f7fe fdec 	bl	800a768 <memcpy>
 800bb90:	2201      	movs	r2, #1
 800bb92:	4629      	mov	r1, r5
 800bb94:	4620      	mov	r0, r4
 800bb96:	f7ff f8fb 	bl	800ad90 <__lshift>
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	f8cd b014 	str.w	fp, [sp, #20]
 800bba0:	f003 0301 	and.w	r3, r3, #1
 800bba4:	46b1      	mov	r9, r6
 800bba6:	9307      	str	r3, [sp, #28]
 800bba8:	4606      	mov	r6, r0
 800bbaa:	4639      	mov	r1, r7
 800bbac:	9804      	ldr	r0, [sp, #16]
 800bbae:	f7ff faa7 	bl	800b100 <quorem>
 800bbb2:	4649      	mov	r1, r9
 800bbb4:	4605      	mov	r5, r0
 800bbb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bbba:	9804      	ldr	r0, [sp, #16]
 800bbbc:	f7ff f93c 	bl	800ae38 <__mcmp>
 800bbc0:	4632      	mov	r2, r6
 800bbc2:	9000      	str	r0, [sp, #0]
 800bbc4:	4639      	mov	r1, r7
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f7ff f950 	bl	800ae6c <__mdiff>
 800bbcc:	68c3      	ldr	r3, [r0, #12]
 800bbce:	4602      	mov	r2, r0
 800bbd0:	bb03      	cbnz	r3, 800bc14 <_dtoa_r+0x9fc>
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	9008      	str	r0, [sp, #32]
 800bbd6:	9804      	ldr	r0, [sp, #16]
 800bbd8:	f7ff f92e 	bl	800ae38 <__mcmp>
 800bbdc:	9a08      	ldr	r2, [sp, #32]
 800bbde:	4603      	mov	r3, r0
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	9308      	str	r3, [sp, #32]
 800bbe6:	f7fe ff45 	bl	800aa74 <_Bfree>
 800bbea:	9b08      	ldr	r3, [sp, #32]
 800bbec:	b9a3      	cbnz	r3, 800bc18 <_dtoa_r+0xa00>
 800bbee:	9a06      	ldr	r2, [sp, #24]
 800bbf0:	b992      	cbnz	r2, 800bc18 <_dtoa_r+0xa00>
 800bbf2:	9a07      	ldr	r2, [sp, #28]
 800bbf4:	b982      	cbnz	r2, 800bc18 <_dtoa_r+0xa00>
 800bbf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bbfa:	d029      	beq.n	800bc50 <_dtoa_r+0xa38>
 800bbfc:	9b00      	ldr	r3, [sp, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	dd01      	ble.n	800bc06 <_dtoa_r+0x9ee>
 800bc02:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800bc06:	9b05      	ldr	r3, [sp, #20]
 800bc08:	1c5d      	adds	r5, r3, #1
 800bc0a:	f883 8000 	strb.w	r8, [r3]
 800bc0e:	e782      	b.n	800bb16 <_dtoa_r+0x8fe>
 800bc10:	4630      	mov	r0, r6
 800bc12:	e7c2      	b.n	800bb9a <_dtoa_r+0x982>
 800bc14:	2301      	movs	r3, #1
 800bc16:	e7e3      	b.n	800bbe0 <_dtoa_r+0x9c8>
 800bc18:	9a00      	ldr	r2, [sp, #0]
 800bc1a:	2a00      	cmp	r2, #0
 800bc1c:	db04      	blt.n	800bc28 <_dtoa_r+0xa10>
 800bc1e:	d125      	bne.n	800bc6c <_dtoa_r+0xa54>
 800bc20:	9a06      	ldr	r2, [sp, #24]
 800bc22:	bb1a      	cbnz	r2, 800bc6c <_dtoa_r+0xa54>
 800bc24:	9a07      	ldr	r2, [sp, #28]
 800bc26:	bb0a      	cbnz	r2, 800bc6c <_dtoa_r+0xa54>
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	ddec      	ble.n	800bc06 <_dtoa_r+0x9ee>
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	9904      	ldr	r1, [sp, #16]
 800bc30:	4620      	mov	r0, r4
 800bc32:	f7ff f8ad 	bl	800ad90 <__lshift>
 800bc36:	4639      	mov	r1, r7
 800bc38:	9004      	str	r0, [sp, #16]
 800bc3a:	f7ff f8fd 	bl	800ae38 <__mcmp>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	dc03      	bgt.n	800bc4a <_dtoa_r+0xa32>
 800bc42:	d1e0      	bne.n	800bc06 <_dtoa_r+0x9ee>
 800bc44:	f018 0f01 	tst.w	r8, #1
 800bc48:	d0dd      	beq.n	800bc06 <_dtoa_r+0x9ee>
 800bc4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bc4e:	d1d8      	bne.n	800bc02 <_dtoa_r+0x9ea>
 800bc50:	9b05      	ldr	r3, [sp, #20]
 800bc52:	9a05      	ldr	r2, [sp, #20]
 800bc54:	1c5d      	adds	r5, r3, #1
 800bc56:	2339      	movs	r3, #57	; 0x39
 800bc58:	7013      	strb	r3, [r2, #0]
 800bc5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc5e:	2b39      	cmp	r3, #57	; 0x39
 800bc60:	f105 32ff 	add.w	r2, r5, #4294967295
 800bc64:	d04f      	beq.n	800bd06 <_dtoa_r+0xaee>
 800bc66:	3301      	adds	r3, #1
 800bc68:	7013      	strb	r3, [r2, #0]
 800bc6a:	e754      	b.n	800bb16 <_dtoa_r+0x8fe>
 800bc6c:	9a05      	ldr	r2, [sp, #20]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f102 0501 	add.w	r5, r2, #1
 800bc74:	dd06      	ble.n	800bc84 <_dtoa_r+0xa6c>
 800bc76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bc7a:	d0e9      	beq.n	800bc50 <_dtoa_r+0xa38>
 800bc7c:	f108 0801 	add.w	r8, r8, #1
 800bc80:	9b05      	ldr	r3, [sp, #20]
 800bc82:	e7c2      	b.n	800bc0a <_dtoa_r+0x9f2>
 800bc84:	9a02      	ldr	r2, [sp, #8]
 800bc86:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bc8a:	eba5 030b 	sub.w	r3, r5, fp
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d021      	beq.n	800bcd6 <_dtoa_r+0xabe>
 800bc92:	2300      	movs	r3, #0
 800bc94:	220a      	movs	r2, #10
 800bc96:	9904      	ldr	r1, [sp, #16]
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f7fe ff02 	bl	800aaa2 <__multadd>
 800bc9e:	45b1      	cmp	r9, r6
 800bca0:	9004      	str	r0, [sp, #16]
 800bca2:	f04f 0300 	mov.w	r3, #0
 800bca6:	f04f 020a 	mov.w	r2, #10
 800bcaa:	4649      	mov	r1, r9
 800bcac:	4620      	mov	r0, r4
 800bcae:	d105      	bne.n	800bcbc <_dtoa_r+0xaa4>
 800bcb0:	f7fe fef7 	bl	800aaa2 <__multadd>
 800bcb4:	4681      	mov	r9, r0
 800bcb6:	4606      	mov	r6, r0
 800bcb8:	9505      	str	r5, [sp, #20]
 800bcba:	e776      	b.n	800bbaa <_dtoa_r+0x992>
 800bcbc:	f7fe fef1 	bl	800aaa2 <__multadd>
 800bcc0:	4631      	mov	r1, r6
 800bcc2:	4681      	mov	r9, r0
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	220a      	movs	r2, #10
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f7fe feea 	bl	800aaa2 <__multadd>
 800bcce:	4606      	mov	r6, r0
 800bcd0:	e7f2      	b.n	800bcb8 <_dtoa_r+0xaa0>
 800bcd2:	f04f 0900 	mov.w	r9, #0
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	9904      	ldr	r1, [sp, #16]
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f7ff f858 	bl	800ad90 <__lshift>
 800bce0:	4639      	mov	r1, r7
 800bce2:	9004      	str	r0, [sp, #16]
 800bce4:	f7ff f8a8 	bl	800ae38 <__mcmp>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	dcb6      	bgt.n	800bc5a <_dtoa_r+0xa42>
 800bcec:	d102      	bne.n	800bcf4 <_dtoa_r+0xadc>
 800bcee:	f018 0f01 	tst.w	r8, #1
 800bcf2:	d1b2      	bne.n	800bc5a <_dtoa_r+0xa42>
 800bcf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bcf8:	2b30      	cmp	r3, #48	; 0x30
 800bcfa:	f105 32ff 	add.w	r2, r5, #4294967295
 800bcfe:	f47f af0a 	bne.w	800bb16 <_dtoa_r+0x8fe>
 800bd02:	4615      	mov	r5, r2
 800bd04:	e7f6      	b.n	800bcf4 <_dtoa_r+0xadc>
 800bd06:	4593      	cmp	fp, r2
 800bd08:	d105      	bne.n	800bd16 <_dtoa_r+0xafe>
 800bd0a:	2331      	movs	r3, #49	; 0x31
 800bd0c:	f10a 0a01 	add.w	sl, sl, #1
 800bd10:	f88b 3000 	strb.w	r3, [fp]
 800bd14:	e6ff      	b.n	800bb16 <_dtoa_r+0x8fe>
 800bd16:	4615      	mov	r5, r2
 800bd18:	e79f      	b.n	800bc5a <_dtoa_r+0xa42>
 800bd1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800bd80 <_dtoa_r+0xb68>
 800bd1e:	e007      	b.n	800bd30 <_dtoa_r+0xb18>
 800bd20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd22:	f8df b060 	ldr.w	fp, [pc, #96]	; 800bd84 <_dtoa_r+0xb6c>
 800bd26:	b11b      	cbz	r3, 800bd30 <_dtoa_r+0xb18>
 800bd28:	f10b 0308 	add.w	r3, fp, #8
 800bd2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	4658      	mov	r0, fp
 800bd32:	b017      	add	sp, #92	; 0x5c
 800bd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd38:	9b06      	ldr	r3, [sp, #24]
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	f77f ae35 	ble.w	800b9aa <_dtoa_r+0x792>
 800bd40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd42:	9307      	str	r3, [sp, #28]
 800bd44:	e649      	b.n	800b9da <_dtoa_r+0x7c2>
 800bd46:	9b02      	ldr	r3, [sp, #8]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	dc03      	bgt.n	800bd54 <_dtoa_r+0xb3c>
 800bd4c:	9b06      	ldr	r3, [sp, #24]
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	f73f aecc 	bgt.w	800baec <_dtoa_r+0x8d4>
 800bd54:	465d      	mov	r5, fp
 800bd56:	4639      	mov	r1, r7
 800bd58:	9804      	ldr	r0, [sp, #16]
 800bd5a:	f7ff f9d1 	bl	800b100 <quorem>
 800bd5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bd62:	f805 8b01 	strb.w	r8, [r5], #1
 800bd66:	9a02      	ldr	r2, [sp, #8]
 800bd68:	eba5 030b 	sub.w	r3, r5, fp
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	ddb0      	ble.n	800bcd2 <_dtoa_r+0xaba>
 800bd70:	2300      	movs	r3, #0
 800bd72:	220a      	movs	r2, #10
 800bd74:	9904      	ldr	r1, [sp, #16]
 800bd76:	4620      	mov	r0, r4
 800bd78:	f7fe fe93 	bl	800aaa2 <__multadd>
 800bd7c:	9004      	str	r0, [sp, #16]
 800bd7e:	e7ea      	b.n	800bd56 <_dtoa_r+0xb3e>
 800bd80:	0800ef09 	.word	0x0800ef09
 800bd84:	0800eefc 	.word	0x0800eefc

0800bd88 <malloc>:
 800bd88:	4b02      	ldr	r3, [pc, #8]	; (800bd94 <malloc+0xc>)
 800bd8a:	4601      	mov	r1, r0
 800bd8c:	6818      	ldr	r0, [r3, #0]
 800bd8e:	f7ff b945 	b.w	800b01c <_malloc_r>
 800bd92:	bf00      	nop
 800bd94:	20000064 	.word	0x20000064

0800bd98 <__malloc_lock>:
 800bd98:	4770      	bx	lr

0800bd9a <__malloc_unlock>:
 800bd9a:	4770      	bx	lr

0800bd9c <_init>:
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9e:	bf00      	nop
 800bda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bda2:	bc08      	pop	{r3}
 800bda4:	469e      	mov	lr, r3
 800bda6:	4770      	bx	lr

0800bda8 <_fini>:
 800bda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdaa:	bf00      	nop
 800bdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdae:	bc08      	pop	{r3}
 800bdb0:	469e      	mov	lr, r3
 800bdb2:	4770      	bx	lr
